
UART_Driver_Optimized.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000770  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008f8  080008f8  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080008f8  080008f8  000108f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080008fc  080008fc  000108fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000030  20000000  08000900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020030  2**0
                  CONTENTS
  7 .bss          0000001c  20000030  20000030  00020030  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000004c  2000004c  00020030  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000131a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000510  00000000  00000000  0002137a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000160  00000000  00000000  00021890  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000100  00000000  00000000  000219f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000094b  00000000  00000000  00021af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000078c  00000000  00000000  0002243b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00022bc7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000003b0  00000000  00000000  00022c44  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00022ff4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080008e0 	.word	0x080008e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	080008e0 	.word	0x080008e0

080001c8 <GPIO_PeriClockControl>:

static void GPIO_PeriClockControl(uint8_t PORT_num,uint8_t EnorDi);

//void GPIO_PeriClockControl(GPIO_regdef_t *pGPIOx,uint8_t EnorDi)
static void GPIO_PeriClockControl(uint8_t PORT_num,uint8_t EnCLK)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	460a      	mov	r2, r1
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	4613      	mov	r3, r2
 80001d6:	71bb      	strb	r3, [r7, #6]
	switch(EnCLK)
 80001d8:	79bb      	ldrb	r3, [r7, #6]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d02b      	beq.n	8000236 <GPIO_PeriClockControl+0x6e>
 80001de:	2b01      	cmp	r3, #1
 80001e0:	d012      	beq.n	8000208 <GPIO_PeriClockControl+0x40>
				break;
			}
		}
		break;
	}
}
 80001e2:	e02c      	b.n	800023e <GPIO_PeriClockControl+0x76>
			if(i == PORT_num)
 80001e4:	79fa      	ldrb	r2, [r7, #7]
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	429a      	cmp	r2, r3
 80001ea:	d10a      	bne.n	8000202 <GPIO_PeriClockControl+0x3a>
				GPIO_PCLK_EN |= (One_bit_mask << PORT_num);
 80001ec:	4917      	ldr	r1, [pc, #92]	; (800024c <GPIO_PeriClockControl+0x84>)
 80001ee:	4b17      	ldr	r3, [pc, #92]	; (800024c <GPIO_PeriClockControl+0x84>)
 80001f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f2:	79fa      	ldrb	r2, [r7, #7]
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	4313      	orrs	r3, r2
 80001fc:	630b      	str	r3, [r1, #48]	; 0x30
				break;
 80001fe:	bf00      	nop
		break;
 8000200:	e01d      	b.n	800023e <GPIO_PeriClockControl+0x76>
		for(i; i<NUM_OF_GPIO; i++)          //new
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	3301      	adds	r3, #1
 8000206:	60fb      	str	r3, [r7, #12]
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	2b08      	cmp	r3, #8
 800020c:	ddea      	ble.n	80001e4 <GPIO_PeriClockControl+0x1c>
		break;
 800020e:	e016      	b.n	800023e <GPIO_PeriClockControl+0x76>
			if(i == PORT_num)
 8000210:	79fa      	ldrb	r2, [r7, #7]
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	429a      	cmp	r2, r3
 8000216:	d10b      	bne.n	8000230 <GPIO_PeriClockControl+0x68>
				GPIO_PCLK_EN &= ~(One_bit_mask << PORT_num);
 8000218:	490c      	ldr	r1, [pc, #48]	; (800024c <GPIO_PeriClockControl+0x84>)
 800021a:	4b0c      	ldr	r3, [pc, #48]	; (800024c <GPIO_PeriClockControl+0x84>)
 800021c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021e:	79fa      	ldrb	r2, [r7, #7]
 8000220:	2001      	movs	r0, #1
 8000222:	fa00 f202 	lsl.w	r2, r0, r2
 8000226:	43d2      	mvns	r2, r2
 8000228:	4013      	ands	r3, r2
 800022a:	630b      	str	r3, [r1, #48]	; 0x30
				break;
 800022c:	bf00      	nop
		break;
 800022e:	e005      	b.n	800023c <GPIO_PeriClockControl+0x74>
		for(i; i<NUM_OF_GPIO; i++)
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	3301      	adds	r3, #1
 8000234:	60fb      	str	r3, [r7, #12]
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	2b08      	cmp	r3, #8
 800023a:	dde9      	ble.n	8000210 <GPIO_PeriClockControl+0x48>
		break;
 800023c:	bf00      	nop
}
 800023e:	bf00      	nop
 8000240:	3714      	adds	r7, #20
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40023800 	.word	0x40023800

08000250 <GPIO_Init>:



// Modified
void GPIO_Init(void)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b087      	sub	sp, #28
 8000254:	af00      	add	r7, sp, #0

	uint8_t counter=0;
 8000256:	2300      	movs	r3, #0
 8000258:	75fb      	strb	r3, [r7, #23]
	uint8_t PortNumber=0;
 800025a:	2300      	movs	r3, #0
 800025c:	75bb      	strb	r3, [r7, #22]
	uint8_t PinActualNumber=0;
 800025e:	2300      	movs	r3, #0
 8000260:	757b      	strb	r3, [r7, #21]


	for( counter; counter<NUMBER_OF_CONFIGURED_PINS; counter++ )
 8000262:	e198      	b.n	8000596 <GPIO_Init+0x346>
	{
		PortNumber = ( GPIO_PinConfigArray[counter].GPIO_PinNumber) / PORT_NUMBER_OF_BITS_IN_REG;
 8000264:	7dfa      	ldrb	r2, [r7, #23]
 8000266:	4970      	ldr	r1, [pc, #448]	; (8000428 <GPIO_Init+0x1d8>)
 8000268:	4613      	mov	r3, r2
 800026a:	005b      	lsls	r3, r3, #1
 800026c:	4413      	add	r3, r2
 800026e:	005b      	lsls	r3, r3, #1
 8000270:	440b      	add	r3, r1
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	091b      	lsrs	r3, r3, #4
 8000276:	75bb      	strb	r3, [r7, #22]
		PinActualNumber = (GPIO_PinConfigArray[counter].GPIO_PinNumber) % PORT_NUMBER_OF_BITS_IN_REG;
 8000278:	7dfa      	ldrb	r2, [r7, #23]
 800027a:	496b      	ldr	r1, [pc, #428]	; (8000428 <GPIO_Init+0x1d8>)
 800027c:	4613      	mov	r3, r2
 800027e:	005b      	lsls	r3, r3, #1
 8000280:	4413      	add	r3, r2
 8000282:	005b      	lsls	r3, r3, #1
 8000284:	440b      	add	r3, r1
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	f003 030f 	and.w	r3, r3, #15
 800028c:	757b      	strb	r3, [r7, #21]

		uint32_t temp = 0;  //temp register
 800028e:	2300      	movs	r3, #0
 8000290:	613b      	str	r3, [r7, #16]



		GPIO_handle_t *pGPIOHandle;
		pGPIOHandle-> pGPIOx = GPIO_Arr[PortNumber];     // new
 8000292:	7dbb      	ldrb	r3, [r7, #22]
 8000294:	4a65      	ldr	r2, [pc, #404]	; (800042c <GPIO_Init+0x1dc>)
 8000296:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	601a      	str	r2, [r3, #0]
		pGPIOHandle-> GPIO_pinconfig = GPIO_PinConfigArray[counter];
 800029e:	7dfa      	ldrb	r2, [r7, #23]
 80002a0:	68f9      	ldr	r1, [r7, #12]
 80002a2:	4861      	ldr	r0, [pc, #388]	; (8000428 <GPIO_Init+0x1d8>)
 80002a4:	4613      	mov	r3, r2
 80002a6:	005b      	lsls	r3, r3, #1
 80002a8:	4413      	add	r3, r2
 80002aa:	005b      	lsls	r3, r3, #1
 80002ac:	18c2      	adds	r2, r0, r3
 80002ae:	1d0b      	adds	r3, r1, #4
 80002b0:	6810      	ldr	r0, [r2, #0]
 80002b2:	6018      	str	r0, [r3, #0]
 80002b4:	8892      	ldrh	r2, [r2, #4]
 80002b6:	809a      	strh	r2, [r3, #4]


		//enable the peripheral clock
		GPIO_PeriClockControl(PortNumber, ENABLE);
 80002b8:	7dbb      	ldrb	r3, [r7, #22]
 80002ba:	2101      	movs	r1, #1
 80002bc:	4618      	mov	r0, r3
 80002be:	f7ff ff83 	bl	80001c8 <GPIO_PeriClockControl>

		//configure the mode of gpio pin
		if(pGPIOHandle->GPIO_pinconfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	795b      	ldrb	r3, [r3, #5]
 80002c6:	2b03      	cmp	r3, #3
 80002c8:	d820      	bhi.n	800030c <GPIO_Init+0xbc>
		{
			temp = (pGPIOHandle->GPIO_pinconfig.GPIO_PinMode << (Two_bits_shift * pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber) );
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	795b      	ldrb	r3, [r3, #5]
 80002ce:	461a      	mov	r2, r3
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	791b      	ldrb	r3, [r3, #4]
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	fa02 f303 	lsl.w	r3, r2, r3
 80002da:	613b      	str	r3, [r7, #16]
			pGPIOHandle->pGPIOx->MODER &= ~( Two_consecutive_bits_mask_by_HEX << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber );
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	68fa      	ldr	r2, [r7, #12]
 80002e2:	6812      	ldr	r2, [r2, #0]
 80002e4:	6812      	ldr	r2, [r2, #0]
 80002e6:	68f9      	ldr	r1, [r7, #12]
 80002e8:	7909      	ldrb	r1, [r1, #4]
 80002ea:	4608      	mov	r0, r1
 80002ec:	2103      	movs	r1, #3
 80002ee:	4081      	lsls	r1, r0
 80002f0:	43c9      	mvns	r1, r1
 80002f2:	400a      	ands	r2, r1
 80002f4:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->MODER |= temp;
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	68fa      	ldr	r2, [r7, #12]
 80002fc:	6812      	ldr	r2, [r2, #0]
 80002fe:	6811      	ldr	r1, [r2, #0]
 8000300:	693a      	ldr	r2, [r7, #16]
 8000302:	430a      	orrs	r2, r1
 8000304:	601a      	str	r2, [r3, #0]
			temp = 0;
 8000306:	2300      	movs	r3, #0
 8000308:	613b      	str	r3, [r7, #16]
 800030a:	e0b5      	b.n	8000478 <GPIO_Init+0x228>
		}
		else
		{
			//this part for interrupt mode
			if(pGPIOHandle->GPIO_pinconfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	795b      	ldrb	r3, [r3, #5]
 8000310:	2b04      	cmp	r3, #4
 8000312:	d115      	bne.n	8000340 <GPIO_Init+0xf0>
			{
				//configure the FTSR
				EXTI->FTSR |= ( One_bit_shift << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber);
 8000314:	4946      	ldr	r1, [pc, #280]	; (8000430 <GPIO_Init+0x1e0>)
 8000316:	4b46      	ldr	r3, [pc, #280]	; (8000430 <GPIO_Init+0x1e0>)
 8000318:	68db      	ldr	r3, [r3, #12]
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	7912      	ldrb	r2, [r2, #4]
 800031e:	4610      	mov	r0, r2
 8000320:	2201      	movs	r2, #1
 8000322:	4082      	lsls	r2, r0
 8000324:	4313      	orrs	r3, r2
 8000326:	60cb      	str	r3, [r1, #12]
				//clear the corresponding RTSR bit
				EXTI->RTSR &= ~(One_bit_mask << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber);
 8000328:	4941      	ldr	r1, [pc, #260]	; (8000430 <GPIO_Init+0x1e0>)
 800032a:	4b41      	ldr	r3, [pc, #260]	; (8000430 <GPIO_Init+0x1e0>)
 800032c:	689b      	ldr	r3, [r3, #8]
 800032e:	68fa      	ldr	r2, [r7, #12]
 8000330:	7912      	ldrb	r2, [r2, #4]
 8000332:	4610      	mov	r0, r2
 8000334:	2201      	movs	r2, #1
 8000336:	4082      	lsls	r2, r0
 8000338:	43d2      	mvns	r2, r2
 800033a:	4013      	ands	r3, r2
 800033c:	608b      	str	r3, [r1, #8]
 800033e:	e031      	b.n	80003a4 <GPIO_Init+0x154>
			}
			else if(pGPIOHandle->GPIO_pinconfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	795b      	ldrb	r3, [r3, #5]
 8000344:	2b05      	cmp	r3, #5
 8000346:	d115      	bne.n	8000374 <GPIO_Init+0x124>
			{
				//configure the RTSR
				EXTI->RTSR |= ( One_bit_shift << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber);
 8000348:	4939      	ldr	r1, [pc, #228]	; (8000430 <GPIO_Init+0x1e0>)
 800034a:	4b39      	ldr	r3, [pc, #228]	; (8000430 <GPIO_Init+0x1e0>)
 800034c:	689b      	ldr	r3, [r3, #8]
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	7912      	ldrb	r2, [r2, #4]
 8000352:	4610      	mov	r0, r2
 8000354:	2201      	movs	r2, #1
 8000356:	4082      	lsls	r2, r0
 8000358:	4313      	orrs	r3, r2
 800035a:	608b      	str	r3, [r1, #8]
				//clear the correspnding RISR bit
				EXTI->FTSR &= ~( One_bit_mask << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber);
 800035c:	4934      	ldr	r1, [pc, #208]	; (8000430 <GPIO_Init+0x1e0>)
 800035e:	4b34      	ldr	r3, [pc, #208]	; (8000430 <GPIO_Init+0x1e0>)
 8000360:	68db      	ldr	r3, [r3, #12]
 8000362:	68fa      	ldr	r2, [r7, #12]
 8000364:	7912      	ldrb	r2, [r2, #4]
 8000366:	4610      	mov	r0, r2
 8000368:	2201      	movs	r2, #1
 800036a:	4082      	lsls	r2, r0
 800036c:	43d2      	mvns	r2, r2
 800036e:	4013      	ands	r3, r2
 8000370:	60cb      	str	r3, [r1, #12]
 8000372:	e017      	b.n	80003a4 <GPIO_Init+0x154>
			}
			else if(pGPIOHandle->GPIO_pinconfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	795b      	ldrb	r3, [r3, #5]
 8000378:	2b06      	cmp	r3, #6
 800037a:	d113      	bne.n	80003a4 <GPIO_Init+0x154>
			{
				//configure the FTSR and RTSR
				EXTI->RTSR |= ( One_bit_shift << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber);
 800037c:	492c      	ldr	r1, [pc, #176]	; (8000430 <GPIO_Init+0x1e0>)
 800037e:	4b2c      	ldr	r3, [pc, #176]	; (8000430 <GPIO_Init+0x1e0>)
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	7912      	ldrb	r2, [r2, #4]
 8000386:	4610      	mov	r0, r2
 8000388:	2201      	movs	r2, #1
 800038a:	4082      	lsls	r2, r0
 800038c:	4313      	orrs	r3, r2
 800038e:	608b      	str	r3, [r1, #8]

				EXTI->FTSR |= ( One_bit_shift << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber);
 8000390:	4927      	ldr	r1, [pc, #156]	; (8000430 <GPIO_Init+0x1e0>)
 8000392:	4b27      	ldr	r3, [pc, #156]	; (8000430 <GPIO_Init+0x1e0>)
 8000394:	68db      	ldr	r3, [r3, #12]
 8000396:	68fa      	ldr	r2, [r7, #12]
 8000398:	7912      	ldrb	r2, [r2, #4]
 800039a:	4610      	mov	r0, r2
 800039c:	2201      	movs	r2, #1
 800039e:	4082      	lsls	r2, r0
 80003a0:	4313      	orrs	r3, r2
 80003a2:	60cb      	str	r3, [r1, #12]
			}

			//configure the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber / Four_Pins_for_SYSCFG_EXTICR;
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	791b      	ldrb	r3, [r3, #4]
 80003a8:	089b      	lsrs	r3, r3, #2
 80003aa:	72fb      	strb	r3, [r7, #11]
			uint8_t temp2 = pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber % Four_Pins_for_SYSCFG_EXTICR;
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	791b      	ldrb	r3, [r3, #4]
 80003b0:	f003 0303 	and.w	r3, r3, #3
 80003b4:	72bb      	strb	r3, [r7, #10]
			uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a1e      	ldr	r2, [pc, #120]	; (8000434 <GPIO_Init+0x1e4>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d03f      	beq.n	8000440 <GPIO_Init+0x1f0>
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a1c      	ldr	r2, [pc, #112]	; (8000438 <GPIO_Init+0x1e8>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d02b      	beq.n	8000422 <GPIO_Init+0x1d2>
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a1b      	ldr	r2, [pc, #108]	; (800043c <GPIO_Init+0x1ec>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d024      	beq.n	800041e <GPIO_Init+0x1ce>
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a17      	ldr	r2, [pc, #92]	; (8000438 <GPIO_Init+0x1e8>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d01d      	beq.n	800041a <GPIO_Init+0x1ca>
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a14      	ldr	r2, [pc, #80]	; (8000434 <GPIO_Init+0x1e4>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d016      	beq.n	8000416 <GPIO_Init+0x1c6>
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a12      	ldr	r2, [pc, #72]	; (8000438 <GPIO_Init+0x1e8>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d00f      	beq.n	8000412 <GPIO_Init+0x1c2>
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a0f      	ldr	r2, [pc, #60]	; (8000434 <GPIO_Init+0x1e4>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d008      	beq.n	800040e <GPIO_Init+0x1be>
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a0d      	ldr	r2, [pc, #52]	; (8000438 <GPIO_Init+0x1e8>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d101      	bne.n	800040a <GPIO_Init+0x1ba>
 8000406:	2307      	movs	r3, #7
 8000408:	e01b      	b.n	8000442 <GPIO_Init+0x1f2>
 800040a:	2300      	movs	r3, #0
 800040c:	e019      	b.n	8000442 <GPIO_Init+0x1f2>
 800040e:	2306      	movs	r3, #6
 8000410:	e017      	b.n	8000442 <GPIO_Init+0x1f2>
 8000412:	2305      	movs	r3, #5
 8000414:	e015      	b.n	8000442 <GPIO_Init+0x1f2>
 8000416:	2304      	movs	r3, #4
 8000418:	e013      	b.n	8000442 <GPIO_Init+0x1f2>
 800041a:	2303      	movs	r3, #3
 800041c:	e011      	b.n	8000442 <GPIO_Init+0x1f2>
 800041e:	2302      	movs	r3, #2
 8000420:	e00f      	b.n	8000442 <GPIO_Init+0x1f2>
 8000422:	2301      	movs	r3, #1
 8000424:	e00d      	b.n	8000442 <GPIO_Init+0x1f2>
 8000426:	bf00      	nop
 8000428:	20000024 	.word	0x20000024
 800042c:	20000000 	.word	0x20000000
 8000430:	40013c00 	.word	0x40013c00
 8000434:	40020000 	.word	0x40020000
 8000438:	40020400 	.word	0x40020400
 800043c:	40020800 	.word	0x40020800
 8000440:	2300      	movs	r3, #0
 8000442:	727b      	strb	r3, [r7, #9]
			SYSCFG->EXTICR[temp1] = portcode << (temp2 * Four_bits_shift);
 8000444:	4858      	ldr	r0, [pc, #352]	; (80005a8 <GPIO_Init+0x358>)
 8000446:	7afb      	ldrb	r3, [r7, #11]
 8000448:	7a79      	ldrb	r1, [r7, #9]
 800044a:	7aba      	ldrb	r2, [r7, #10]
 800044c:	0092      	lsls	r2, r2, #2
 800044e:	fa01 f202 	lsl.w	r2, r1, r2
 8000452:	3302      	adds	r3, #2
 8000454:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			SYSCFG_PCLK_EN;
 8000458:	4a54      	ldr	r2, [pc, #336]	; (80005ac <GPIO_Init+0x35c>)
 800045a:	4b54      	ldr	r3, [pc, #336]	; (80005ac <GPIO_Init+0x35c>)
 800045c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800045e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000462:	6453      	str	r3, [r2, #68]	; 0x44
			//enable the exti interrupt delivery using IMR
			EXTI->IMR |= (One_bit_shift << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber);
 8000464:	4952      	ldr	r1, [pc, #328]	; (80005b0 <GPIO_Init+0x360>)
 8000466:	4b52      	ldr	r3, [pc, #328]	; (80005b0 <GPIO_Init+0x360>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	7912      	ldrb	r2, [r2, #4]
 800046e:	4610      	mov	r0, r2
 8000470:	2201      	movs	r2, #1
 8000472:	4082      	lsls	r2, r0
 8000474:	4313      	orrs	r3, r2
 8000476:	600b      	str	r3, [r1, #0]
		}

		temp = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	613b      	str	r3, [r7, #16]

		//configure the speed
		temp = (pGPIOHandle->GPIO_pinconfig.GPIO_PinSpeed << (Two_bits_shift * pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber));
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	799b      	ldrb	r3, [r3, #6]
 8000480:	461a      	mov	r2, r3
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	791b      	ldrb	r3, [r3, #4]
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	fa02 f303 	lsl.w	r3, r2, r3
 800048c:	613b      	str	r3, [r7, #16]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~( Two_consecutive_bits_mask_by_HEX << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber );
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	6812      	ldr	r2, [r2, #0]
 8000496:	6892      	ldr	r2, [r2, #8]
 8000498:	68f9      	ldr	r1, [r7, #12]
 800049a:	7909      	ldrb	r1, [r1, #4]
 800049c:	4608      	mov	r0, r1
 800049e:	2103      	movs	r1, #3
 80004a0:	4081      	lsls	r1, r0
 80004a2:	43c9      	mvns	r1, r1
 80004a4:	400a      	ands	r2, r1
 80004a6:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	68fa      	ldr	r2, [r7, #12]
 80004ae:	6812      	ldr	r2, [r2, #0]
 80004b0:	6891      	ldr	r1, [r2, #8]
 80004b2:	693a      	ldr	r2, [r7, #16]
 80004b4:	430a      	orrs	r2, r1
 80004b6:	609a      	str	r2, [r3, #8]

		temp = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	613b      	str	r3, [r7, #16]

		//configure the pupd setting
		temp = (pGPIOHandle->GPIO_pinconfig.GPIO_PinPuPdControl << (Two_bits_shift * pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber) );
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	79db      	ldrb	r3, [r3, #7]
 80004c0:	461a      	mov	r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	791b      	ldrb	r3, [r3, #4]
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	fa02 f303 	lsl.w	r3, r2, r3
 80004cc:	613b      	str	r3, [r7, #16]
		pGPIOHandle->pGPIOx->PUPDR &= ~(Two_consecutive_bits_mask_by_HEX << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber);  //clearing
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	6812      	ldr	r2, [r2, #0]
 80004d6:	68d2      	ldr	r2, [r2, #12]
 80004d8:	68f9      	ldr	r1, [r7, #12]
 80004da:	7909      	ldrb	r1, [r1, #4]
 80004dc:	4608      	mov	r0, r1
 80004de:	2103      	movs	r1, #3
 80004e0:	4081      	lsls	r1, r0
 80004e2:	43c9      	mvns	r1, r1
 80004e4:	400a      	ands	r2, r1
 80004e6:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	68fa      	ldr	r2, [r7, #12]
 80004ee:	6812      	ldr	r2, [r2, #0]
 80004f0:	68d1      	ldr	r1, [r2, #12]
 80004f2:	693a      	ldr	r2, [r7, #16]
 80004f4:	430a      	orrs	r2, r1
 80004f6:	60da      	str	r2, [r3, #12]

		temp = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]

		//configure the optype
		temp = (pGPIOHandle->GPIO_pinconfig.GPIO_PinOPType << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber);
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	7a1b      	ldrb	r3, [r3, #8]
 8000500:	461a      	mov	r2, r3
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	fa02 f303 	lsl.w	r3, r2, r3
 800050a:	613b      	str	r3, [r7, #16]
		pGPIOHandle->pGPIOx->OTYPER &= ~( One_bit_mask_by_HEX << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber );
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	68fa      	ldr	r2, [r7, #12]
 8000512:	6812      	ldr	r2, [r2, #0]
 8000514:	6852      	ldr	r2, [r2, #4]
 8000516:	68f9      	ldr	r1, [r7, #12]
 8000518:	7909      	ldrb	r1, [r1, #4]
 800051a:	4608      	mov	r0, r1
 800051c:	2101      	movs	r1, #1
 800051e:	4081      	lsls	r1, r0
 8000520:	43c9      	mvns	r1, r1
 8000522:	400a      	ands	r2, r1
 8000524:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	6812      	ldr	r2, [r2, #0]
 800052e:	6851      	ldr	r1, [r2, #4]
 8000530:	693a      	ldr	r2, [r7, #16]
 8000532:	430a      	orrs	r2, r1
 8000534:	605a      	str	r2, [r3, #4]

		//configure the alternate functionality
		if(pGPIOHandle->GPIO_pinconfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	795b      	ldrb	r3, [r3, #5]
 800053a:	2b02      	cmp	r3, #2
 800053c:	d128      	bne.n	8000590 <GPIO_Init+0x340>
		{
			//alternate function
			uint8_t temp1,temp2;

			temp1 = pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber / Eight_Pins_for_GPIOxAFRH_or_AFRL;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	791b      	ldrb	r3, [r3, #4]
 8000542:	08db      	lsrs	r3, r3, #3
 8000544:	723b      	strb	r3, [r7, #8]
			temp2 = pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber % Eight_Pins_for_GPIOxAFRH_or_AFRL;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	791b      	ldrb	r3, [r3, #4]
 800054a:	f003 0307 	and.w	r3, r3, #7
 800054e:	71fb      	strb	r3, [r7, #7]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(bits_mask_by_HEX << (Four_bits_shift * temp2) ); //clearing
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	7a3a      	ldrb	r2, [r7, #8]
 8000556:	68f9      	ldr	r1, [r7, #12]
 8000558:	6809      	ldr	r1, [r1, #0]
 800055a:	7a38      	ldrb	r0, [r7, #8]
 800055c:	3008      	adds	r0, #8
 800055e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8000562:	79f8      	ldrb	r0, [r7, #7]
 8000564:	0080      	lsls	r0, r0, #2
 8000566:	240f      	movs	r4, #15
 8000568:	fa04 f000 	lsl.w	r0, r4, r0
 800056c:	43c0      	mvns	r0, r0
 800056e:	4001      	ands	r1, r0
 8000570:	3208      	adds	r2, #8
 8000572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] = (pGPIOHandle->GPIO_pinconfig.GPIO_PinAltFunMode << (Four_bits_shift * temp2) ); //setting
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	7a3a      	ldrb	r2, [r7, #8]
 800057c:	68f9      	ldr	r1, [r7, #12]
 800057e:	7a49      	ldrb	r1, [r1, #9]
 8000580:	4608      	mov	r0, r1
 8000582:	79f9      	ldrb	r1, [r7, #7]
 8000584:	0089      	lsls	r1, r1, #2
 8000586:	fa00 f101 	lsl.w	r1, r0, r1
 800058a:	3208      	adds	r2, #8
 800058c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for( counter; counter<NUMBER_OF_CONFIGURED_PINS; counter++ )
 8000590:	7dfb      	ldrb	r3, [r7, #23]
 8000592:	3301      	adds	r3, #1
 8000594:	75fb      	strb	r3, [r7, #23]
 8000596:	7dfb      	ldrb	r3, [r7, #23]
 8000598:	2b01      	cmp	r3, #1
 800059a:	f67f ae63 	bls.w	8000264 <GPIO_Init+0x14>
		}

	}
}
 800059e:	bf00      	nop
 80005a0:	371c      	adds	r7, #28
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd90      	pop	{r4, r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40013800 	.word	0x40013800
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40013c00 	.word	0x40013c00

080005b4 <GPIO_WriteOutputPin>:
Note       =
 */

//void GPIO_WriteOutputPin(GPIO_regdef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
void GPIO_WriteOutputPin(uint8_t Pin, uint8_t Value)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	460a      	mov	r2, r1
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	4613      	mov	r3, r2
 80005c2:	71bb      	strb	r3, [r7, #6]

	uint8_t PortNumber=0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	73fb      	strb	r3, [r7, #15]
	uint8_t PinActualNumber=0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	73bb      	strb	r3, [r7, #14]

	PortNumber = ((Pin / PORT_NUMBER_OF_BITS_IN_REG));
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	091b      	lsrs	r3, r3, #4
 80005d0:	73fb      	strb	r3, [r7, #15]
	PinActualNumber = (Pin % PORT_NUMBER_OF_BITS_IN_REG);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	f003 030f 	and.w	r3, r3, #15
 80005d8:	73bb      	strb	r3, [r7, #14]

	GPIO_regdef_t *pGPIOx = GPIO_Arr[PortNumber];     // new
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	4a10      	ldr	r2, [pc, #64]	; (8000620 <GPIO_WriteOutputPin+0x6c>)
 80005de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e2:	60bb      	str	r3, [r7, #8]

	if(Value == GPIO_PIN_SET)
 80005e4:	79bb      	ldrb	r3, [r7, #6]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d109      	bne.n	80005fe <GPIO_WriteOutputPin+0x4a>
	{
		//write 1 to the output data register at the bit field coreesponding to the pin
		pGPIOx->ODR |= ( One_bit_shift << PinActualNumber);
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	7bba      	ldrb	r2, [r7, #14]
 80005f0:	2101      	movs	r1, #1
 80005f2:	fa01 f202 	lsl.w	r2, r1, r2
 80005f6:	431a      	orrs	r2, r3
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	615a      	str	r2, [r3, #20]
	{
		//write 0
		pGPIOx->ODR &= ~( One_bit_mask << PinActualNumber);
	}

}
 80005fc:	e009      	b.n	8000612 <GPIO_WriteOutputPin+0x5e>
		pGPIOx->ODR &= ~( One_bit_mask << PinActualNumber);
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	7bba      	ldrb	r2, [r7, #14]
 8000604:	2101      	movs	r1, #1
 8000606:	fa01 f202 	lsl.w	r2, r1, r2
 800060a:	43d2      	mvns	r2, r2
 800060c:	401a      	ands	r2, r3
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	615a      	str	r2, [r3, #20]
}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000000 	.word	0x20000000

08000624 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
  int i = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]

  GPIO_handle_t *pGPIOHandle;
 // pGPIOHandle-> pGPIOx = GPIO_Arr[GPIOB_];     // new
  pGPIOHandle-> GPIO_pinconfig = GPIO_PinConfigArray[1];
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	4a12      	ldr	r2, [pc, #72]	; (800067c <main+0x58>)
 8000632:	3304      	adds	r3, #4
 8000634:	3206      	adds	r2, #6
 8000636:	6810      	ldr	r0, [r2, #0]
 8000638:	6018      	str	r0, [r3, #0]
 800063a:	8892      	ldrh	r2, [r2, #4]
 800063c:	809a      	strh	r2, [r3, #4]
  GPIO_Init();
 800063e:	f7ff fe07 	bl	8000250 <GPIO_Init>

  while (1)
  {
		GPIO_WriteOutputPin(GPIO_CHANNEL_A0 , GPIO_PIN_SET);
 8000642:	2101      	movs	r1, #1
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff ffb5 	bl	80005b4 <GPIO_WriteOutputPin>

		for(i=0; i<4000000; i++);
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	e002      	b.n	8000656 <main+0x32>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3301      	adds	r3, #1
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a09      	ldr	r2, [pc, #36]	; (8000680 <main+0x5c>)
 800065a:	4293      	cmp	r3, r2
 800065c:	ddf8      	ble.n	8000650 <main+0x2c>

		GPIO_WriteOutputPin(GPIO_CHANNEL_A0 , GPIO_PIN_RESET);
 800065e:	2100      	movs	r1, #0
 8000660:	2000      	movs	r0, #0
 8000662:	f7ff ffa7 	bl	80005b4 <GPIO_WriteOutputPin>

		for(i=0; i<4000000; i++);
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	e002      	b.n	8000672 <main+0x4e>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3301      	adds	r3, #1
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a02      	ldr	r2, [pc, #8]	; (8000680 <main+0x5c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	ddf8      	ble.n	800066c <main+0x48>
		GPIO_WriteOutputPin(GPIO_CHANNEL_A0 , GPIO_PIN_SET);
 800067a:	e7e2      	b.n	8000642 <main+0x1e>
 800067c:	20000024 	.word	0x20000024
 8000680:	003d08ff 	.word	0x003d08ff

08000684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000688:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800068a:	e003      	b.n	8000694 <LoopCopyDataInit>

0800068c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800068e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000690:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000692:	3104      	adds	r1, #4

08000694 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000698:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800069a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800069c:	d3f6      	bcc.n	800068c <CopyDataInit>
  ldr  r2, =_sbss
 800069e:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80006a0:	e002      	b.n	80006a8 <LoopFillZerobss>

080006a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80006a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80006a4:	f842 3b04 	str.w	r3, [r2], #4

080006a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80006aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80006ac:	d3f9      	bcc.n	80006a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006ae:	f000 f841 	bl	8000734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006b2:	f000 f8f1 	bl	8000898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006b6:	f7ff ffb5 	bl	8000624 <main>
  bx  lr    
 80006ba:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80006c0:	08000900 	.word	0x08000900
  ldr  r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80006c8:	20000030 	.word	0x20000030
  ldr  r2, =_sbss
 80006cc:	20000030 	.word	0x20000030
  ldr  r3, = _ebss
 80006d0:	2000004c 	.word	0x2000004c

080006d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006d4:	e7fe      	b.n	80006d4 <ADC_IRQHandler>

080006d6 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <HardFault_Handler+0x4>

080006ea <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <MemManage_Handler+0x4>

080006f0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <BusFault_Handler+0x4>

080006f6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <UsageFault_Handler+0x4>

080006fc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr

08000726 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000738:	4a16      	ldr	r2, [pc, #88]	; (8000794 <SystemInit+0x60>)
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <SystemInit+0x60>)
 800073c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000748:	4a13      	ldr	r2, [pc, #76]	; (8000798 <SystemInit+0x64>)
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <SystemInit+0x64>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <SystemInit+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800075a:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <SystemInit+0x64>)
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <SystemInit+0x64>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000768:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <SystemInit+0x64>)
 800076c:	4a0b      	ldr	r2, [pc, #44]	; (800079c <SystemInit+0x68>)
 800076e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000770:	4a09      	ldr	r2, [pc, #36]	; (8000798 <SystemInit+0x64>)
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <SystemInit+0x64>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800077a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <SystemInit+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000782:	f000 f80d 	bl	80007a0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000786:	4b03      	ldr	r3, [pc, #12]	; (8000794 <SystemInit+0x60>)
 8000788:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800078c:	609a      	str	r2, [r3, #8]
#endif
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00
 8000798:	40023800 	.word	0x40023800
 800079c:	24003010 	.word	0x24003010

080007a0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80007ae:	4a36      	ldr	r2, [pc, #216]	; (8000888 <SetSysClock+0xe8>)
 80007b0:	4b35      	ldr	r3, [pc, #212]	; (8000888 <SetSysClock+0xe8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007b8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80007ba:	4b33      	ldr	r3, [pc, #204]	; (8000888 <SetSysClock+0xe8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3301      	adds	r3, #1
 80007c8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d103      	bne.n	80007d8 <SetSysClock+0x38>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80007d6:	d1f0      	bne.n	80007ba <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80007d8:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <SetSysClock+0xe8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d002      	beq.n	80007ea <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80007e4:	2301      	movs	r3, #1
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	e001      	b.n	80007ee <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d142      	bne.n	800087a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80007f4:	4a24      	ldr	r2, [pc, #144]	; (8000888 <SetSysClock+0xe8>)
 80007f6:	4b24      	ldr	r3, [pc, #144]	; (8000888 <SetSysClock+0xe8>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fe:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000800:	4a22      	ldr	r2, [pc, #136]	; (800088c <SetSysClock+0xec>)
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <SetSysClock+0xec>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800080a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800080c:	4a1e      	ldr	r2, [pc, #120]	; (8000888 <SetSysClock+0xe8>)
 800080e:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <SetSysClock+0xe8>)
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000814:	4a1c      	ldr	r2, [pc, #112]	; (8000888 <SetSysClock+0xe8>)
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <SetSysClock+0xe8>)
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800081e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000820:	4a19      	ldr	r2, [pc, #100]	; (8000888 <SetSysClock+0xe8>)
 8000822:	4b19      	ldr	r3, [pc, #100]	; (8000888 <SetSysClock+0xe8>)
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800082a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <SetSysClock+0xe8>)
 800082e:	4a18      	ldr	r2, [pc, #96]	; (8000890 <SetSysClock+0xf0>)
 8000830:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000832:	4a15      	ldr	r2, [pc, #84]	; (8000888 <SetSysClock+0xe8>)
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <SetSysClock+0xe8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800083c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800083e:	bf00      	nop
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <SetSysClock+0xe8>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000848:	2b00      	cmp	r3, #0
 800084a:	d0f9      	beq.n	8000840 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <SetSysClock+0xf4>)
 800084e:	f240 7205 	movw	r2, #1797	; 0x705
 8000852:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000854:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <SetSysClock+0xe8>)
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <SetSysClock+0xe8>)
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	f023 0303 	bic.w	r3, r3, #3
 800085e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000860:	4a09      	ldr	r2, [pc, #36]	; (8000888 <SetSysClock+0xe8>)
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <SetSysClock+0xe8>)
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	f043 0302 	orr.w	r3, r3, #2
 800086a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800086c:	bf00      	nop
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <SetSysClock+0xe8>)
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	f003 030c 	and.w	r3, r3, #12
 8000876:	2b08      	cmp	r3, #8
 8000878:	d1f9      	bne.n	800086e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40007000 	.word	0x40007000
 8000890:	07405419 	.word	0x07405419
 8000894:	40023c00 	.word	0x40023c00

08000898 <__libc_init_array>:
 8000898:	b570      	push	{r4, r5, r6, lr}
 800089a:	4e0d      	ldr	r6, [pc, #52]	; (80008d0 <__libc_init_array+0x38>)
 800089c:	4c0d      	ldr	r4, [pc, #52]	; (80008d4 <__libc_init_array+0x3c>)
 800089e:	1ba4      	subs	r4, r4, r6
 80008a0:	10a4      	asrs	r4, r4, #2
 80008a2:	2500      	movs	r5, #0
 80008a4:	42a5      	cmp	r5, r4
 80008a6:	d109      	bne.n	80008bc <__libc_init_array+0x24>
 80008a8:	4e0b      	ldr	r6, [pc, #44]	; (80008d8 <__libc_init_array+0x40>)
 80008aa:	4c0c      	ldr	r4, [pc, #48]	; (80008dc <__libc_init_array+0x44>)
 80008ac:	f000 f818 	bl	80008e0 <_init>
 80008b0:	1ba4      	subs	r4, r4, r6
 80008b2:	10a4      	asrs	r4, r4, #2
 80008b4:	2500      	movs	r5, #0
 80008b6:	42a5      	cmp	r5, r4
 80008b8:	d105      	bne.n	80008c6 <__libc_init_array+0x2e>
 80008ba:	bd70      	pop	{r4, r5, r6, pc}
 80008bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008c0:	4798      	blx	r3
 80008c2:	3501      	adds	r5, #1
 80008c4:	e7ee      	b.n	80008a4 <__libc_init_array+0xc>
 80008c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008ca:	4798      	blx	r3
 80008cc:	3501      	adds	r5, #1
 80008ce:	e7f2      	b.n	80008b6 <__libc_init_array+0x1e>
 80008d0:	080008f8 	.word	0x080008f8
 80008d4:	080008f8 	.word	0x080008f8
 80008d8:	080008f8 	.word	0x080008f8
 80008dc:	080008fc 	.word	0x080008fc

080008e0 <_init>:
 80008e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008e2:	bf00      	nop
 80008e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008e6:	bc08      	pop	{r3}
 80008e8:	469e      	mov	lr, r3
 80008ea:	4770      	bx	lr

080008ec <_fini>:
 80008ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ee:	bf00      	nop
 80008f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008f2:	bc08      	pop	{r3}
 80008f4:	469e      	mov	lr, r3
 80008f6:	4770      	bx	lr
