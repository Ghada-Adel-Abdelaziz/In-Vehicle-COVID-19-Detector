
GP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ee8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001070  08001070  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001070  08001070  00011070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001074  08001074  00011074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08001078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  7 .bss          00000038  20000074  20000074  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000ac  200000ac  00020074  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000022a1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000871  00000000  00000000  00022345  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000240  00000000  00000000  00022bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001a8  00000000  00000000  00022df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001023  00000000  00000000  00022fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000c5a  00000000  00000000  00023fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00024c1d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000006a4  00000000  00000000  00024c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00025340  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001058 	.word	0x08001058

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08001058 	.word	0x08001058

080001c8 <GPIO_PeriClockControl>:

static void GPIO_PeriClockControl(uint8_t PORT_num,uint8_t EnorDi);

//void GPIO_PeriClockControl(GPIO_regdef_t *pGPIOx,uint8_t EnorDi)
static void GPIO_PeriClockControl(uint8_t PORT_num,uint8_t EnCLK)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	460a      	mov	r2, r1
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	4613      	mov	r3, r2
 80001d6:	71bb      	strb	r3, [r7, #6]
	//	GPIO_PCLK_EN &=~ (One_bit_shift << PORT_num);
	//	GPIO_PCLK_EN |= (EnCLK << PORT_num);

	GPIO_PCLK_EN =(GPIO_PCLK_EN & ~(One_bit_shift << PORT_num))
 80001d8:	480a      	ldr	r0, [pc, #40]	; (8000204 <GPIO_PeriClockControl+0x3c>)
 80001da:	4b0a      	ldr	r3, [pc, #40]	; (8000204 <GPIO_PeriClockControl+0x3c>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001de:	79fa      	ldrb	r2, [r7, #7]
 80001e0:	2101      	movs	r1, #1
 80001e2:	fa01 f202 	lsl.w	r2, r1, r2
 80001e6:	43d2      	mvns	r2, r2
 80001e8:	4013      	ands	r3, r2
																											|(EnCLK << PORT_num);
 80001ea:	79b9      	ldrb	r1, [r7, #6]
 80001ec:	79fa      	ldrb	r2, [r7, #7]
 80001ee:	fa01 f202 	lsl.w	r2, r1, r2
 80001f2:	4313      	orrs	r3, r2
	GPIO_PCLK_EN =(GPIO_PCLK_EN & ~(One_bit_shift << PORT_num))
 80001f4:	6303      	str	r3, [r0, #48]	; 0x30
}
 80001f6:	bf00      	nop
 80001f8:	370c      	adds	r7, #12
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	40023800 	.word	0x40023800

08000208 <GPIO_Init>:
return     -
Note       =
 */

void GPIO_Init(void)
{
 8000208:	b590      	push	{r4, r7, lr}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0

	uint8_t counter=0;
 800020e:	2300      	movs	r3, #0
 8000210:	73fb      	strb	r3, [r7, #15]
	uint8_t PortNumber=0;
 8000212:	2300      	movs	r3, #0
 8000214:	73bb      	strb	r3, [r7, #14]
	uint8_t PinActualNumber=0;
 8000216:	2300      	movs	r3, #0
 8000218:	737b      	strb	r3, [r7, #13]


	for( counter=0; counter<NUMBER_OF_CONFIGURED_PINS; counter++ )
 800021a:	2300      	movs	r3, #0
 800021c:	73fb      	strb	r3, [r7, #15]
 800021e:	e1b1      	b.n	8000584 <GPIO_Init+0x37c>
	{
		PortNumber = ( GPIO_PinConfigArray[counter].GPIO_PinNumber) / PORT_NUMBER_OF_BITS_IN_REG;
 8000220:	7bfa      	ldrb	r2, [r7, #15]
 8000222:	496f      	ldr	r1, [pc, #444]	; (80003e0 <GPIO_Init+0x1d8>)
 8000224:	4613      	mov	r3, r2
 8000226:	005b      	lsls	r3, r3, #1
 8000228:	4413      	add	r3, r2
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	440b      	add	r3, r1
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	091b      	lsrs	r3, r3, #4
 8000232:	73bb      	strb	r3, [r7, #14]
		PinActualNumber = (GPIO_PinConfigArray[counter].GPIO_PinNumber) % PORT_NUMBER_OF_BITS_IN_REG;
 8000234:	7bfa      	ldrb	r2, [r7, #15]
 8000236:	496a      	ldr	r1, [pc, #424]	; (80003e0 <GPIO_Init+0x1d8>)
 8000238:	4613      	mov	r3, r2
 800023a:	005b      	lsls	r3, r3, #1
 800023c:	4413      	add	r3, r2
 800023e:	005b      	lsls	r3, r3, #1
 8000240:	440b      	add	r3, r1
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	f003 030f 	and.w	r3, r3, #15
 8000248:	737b      	strb	r3, [r7, #13]
		uint32_t temp = 0;  //temp register
 800024a:	2300      	movs	r3, #0
 800024c:	60bb      	str	r3, [r7, #8]
		//enable the peripheral clock
		GPIO_PeriClockControl(PortNumber, ENABLE);
 800024e:	7bbb      	ldrb	r3, [r7, #14]
 8000250:	2101      	movs	r1, #1
 8000252:	4618      	mov	r0, r3
 8000254:	f7ff ffb8 	bl	80001c8 <GPIO_PeriClockControl>
		GPIO_regdef_t *pGPIOx = GPIO_Arr[PortNumber];
 8000258:	7bbb      	ldrb	r3, [r7, #14]
 800025a:	4a62      	ldr	r2, [pc, #392]	; (80003e4 <GPIO_Init+0x1dc>)
 800025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000260:	607b      	str	r3, [r7, #4]
		//configure the mode of gpio pin
		if(GPIO_PinConfigArray[counter].GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000262:	7bfa      	ldrb	r2, [r7, #15]
 8000264:	495e      	ldr	r1, [pc, #376]	; (80003e0 <GPIO_Init+0x1d8>)
 8000266:	4613      	mov	r3, r2
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	4413      	add	r3, r2
 800026c:	005b      	lsls	r3, r3, #1
 800026e:	440b      	add	r3, r1
 8000270:	3301      	adds	r3, #1
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	2b03      	cmp	r3, #3
 8000276:	d821      	bhi.n	80002bc <GPIO_Init+0xb4>
		{
//			temp = (GPIO_PinConfigArray[counter].GPIO_PinMode << (Two_bits_shift * PinActualNumber) );
//			pGPIOx->MODER &= ~( (Two_bits_shift *Two_consecutive_bits_mask_by_HEX)<< PinActualNumber );
//			pGPIOx->MODER |= temp;
//			temp = 0;
						temp = pGPIOx->MODER;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	60bb      	str	r3, [r7, #8]
						temp &= ~(0x3UL << (PinActualNumber * 2u));
 800027e:	7b7b      	ldrb	r3, [r7, #13]
 8000280:	005b      	lsls	r3, r3, #1
 8000282:	2203      	movs	r2, #3
 8000284:	fa02 f303 	lsl.w	r3, r2, r3
 8000288:	43db      	mvns	r3, r3
 800028a:	68ba      	ldr	r2, [r7, #8]
 800028c:	4013      	ands	r3, r2
 800028e:	60bb      	str	r3, [r7, #8]
						temp |= ((GPIO_PinConfigArray[counter].GPIO_PinMode & 0x00000003U) << (PinActualNumber * 2u));
 8000290:	7bfa      	ldrb	r2, [r7, #15]
 8000292:	4953      	ldr	r1, [pc, #332]	; (80003e0 <GPIO_Init+0x1d8>)
 8000294:	4613      	mov	r3, r2
 8000296:	005b      	lsls	r3, r3, #1
 8000298:	4413      	add	r3, r2
 800029a:	005b      	lsls	r3, r3, #1
 800029c:	440b      	add	r3, r1
 800029e:	3301      	adds	r3, #1
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	f003 0203 	and.w	r2, r3, #3
 80002a6:	7b7b      	ldrb	r3, [r7, #13]
 80002a8:	005b      	lsls	r3, r3, #1
 80002aa:	fa02 f303 	lsl.w	r3, r2, r3
 80002ae:	68ba      	ldr	r2, [r7, #8]
 80002b0:	4313      	orrs	r3, r2
 80002b2:	60bb      	str	r3, [r7, #8]
						pGPIOx->MODER = temp;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	68ba      	ldr	r2, [r7, #8]
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	e0bf      	b.n	800043c <GPIO_Init+0x234>
		}
		else
		{
			//this part for interrupt mode
			if(GPIO_PinConfigArray[counter].GPIO_PinMode == GPIO_MODE_IT_FT)
 80002bc:	7bfa      	ldrb	r2, [r7, #15]
 80002be:	4948      	ldr	r1, [pc, #288]	; (80003e0 <GPIO_Init+0x1d8>)
 80002c0:	4613      	mov	r3, r2
 80002c2:	005b      	lsls	r3, r3, #1
 80002c4:	4413      	add	r3, r2
 80002c6:	005b      	lsls	r3, r3, #1
 80002c8:	440b      	add	r3, r1
 80002ca:	3301      	adds	r3, #1
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2b04      	cmp	r3, #4
 80002d0:	d113      	bne.n	80002fa <GPIO_Init+0xf2>
			{
				//configure the FTSR
				EXTI->FTSR |= ( One_bit_shift << PinActualNumber);
 80002d2:	4945      	ldr	r1, [pc, #276]	; (80003e8 <GPIO_Init+0x1e0>)
 80002d4:	4b44      	ldr	r3, [pc, #272]	; (80003e8 <GPIO_Init+0x1e0>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	7b7a      	ldrb	r2, [r7, #13]
 80002da:	2001      	movs	r0, #1
 80002dc:	fa00 f202 	lsl.w	r2, r0, r2
 80002e0:	4313      	orrs	r3, r2
 80002e2:	60cb      	str	r3, [r1, #12]
				//clear the corresponding RTSR bit
				EXTI->RTSR &= ~(One_bit_mask << PinActualNumber);
 80002e4:	4940      	ldr	r1, [pc, #256]	; (80003e8 <GPIO_Init+0x1e0>)
 80002e6:	4b40      	ldr	r3, [pc, #256]	; (80003e8 <GPIO_Init+0x1e0>)
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	7b7a      	ldrb	r2, [r7, #13]
 80002ec:	2001      	movs	r0, #1
 80002ee:	fa00 f202 	lsl.w	r2, r0, r2
 80002f2:	43d2      	mvns	r2, r2
 80002f4:	4013      	ands	r3, r2
 80002f6:	608b      	str	r3, [r1, #8]
 80002f8:	e03b      	b.n	8000372 <GPIO_Init+0x16a>
			}
			else if(GPIO_PinConfigArray[counter].GPIO_PinMode == GPIO_MODE_IT_RT)
 80002fa:	7bfa      	ldrb	r2, [r7, #15]
 80002fc:	4938      	ldr	r1, [pc, #224]	; (80003e0 <GPIO_Init+0x1d8>)
 80002fe:	4613      	mov	r3, r2
 8000300:	005b      	lsls	r3, r3, #1
 8000302:	4413      	add	r3, r2
 8000304:	005b      	lsls	r3, r3, #1
 8000306:	440b      	add	r3, r1
 8000308:	3301      	adds	r3, #1
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b05      	cmp	r3, #5
 800030e:	d113      	bne.n	8000338 <GPIO_Init+0x130>
			{
				//configure the RTSR
				EXTI->RTSR |= ( One_bit_shift << PinActualNumber);
 8000310:	4935      	ldr	r1, [pc, #212]	; (80003e8 <GPIO_Init+0x1e0>)
 8000312:	4b35      	ldr	r3, [pc, #212]	; (80003e8 <GPIO_Init+0x1e0>)
 8000314:	689b      	ldr	r3, [r3, #8]
 8000316:	7b7a      	ldrb	r2, [r7, #13]
 8000318:	2001      	movs	r0, #1
 800031a:	fa00 f202 	lsl.w	r2, r0, r2
 800031e:	4313      	orrs	r3, r2
 8000320:	608b      	str	r3, [r1, #8]
				//clear the correspnding RISR bit
				EXTI->FTSR &= ~( One_bit_mask << PinActualNumber);
 8000322:	4931      	ldr	r1, [pc, #196]	; (80003e8 <GPIO_Init+0x1e0>)
 8000324:	4b30      	ldr	r3, [pc, #192]	; (80003e8 <GPIO_Init+0x1e0>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	7b7a      	ldrb	r2, [r7, #13]
 800032a:	2001      	movs	r0, #1
 800032c:	fa00 f202 	lsl.w	r2, r0, r2
 8000330:	43d2      	mvns	r2, r2
 8000332:	4013      	ands	r3, r2
 8000334:	60cb      	str	r3, [r1, #12]
 8000336:	e01c      	b.n	8000372 <GPIO_Init+0x16a>
			}
			else if(GPIO_PinConfigArray[counter].GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000338:	7bfa      	ldrb	r2, [r7, #15]
 800033a:	4929      	ldr	r1, [pc, #164]	; (80003e0 <GPIO_Init+0x1d8>)
 800033c:	4613      	mov	r3, r2
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	4413      	add	r3, r2
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	440b      	add	r3, r1
 8000346:	3301      	adds	r3, #1
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b06      	cmp	r3, #6
 800034c:	d111      	bne.n	8000372 <GPIO_Init+0x16a>
			{
				//configure the FTSR and RTSR
				EXTI->RTSR |= ( One_bit_shift << PinActualNumber);
 800034e:	4926      	ldr	r1, [pc, #152]	; (80003e8 <GPIO_Init+0x1e0>)
 8000350:	4b25      	ldr	r3, [pc, #148]	; (80003e8 <GPIO_Init+0x1e0>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	7b7a      	ldrb	r2, [r7, #13]
 8000356:	2001      	movs	r0, #1
 8000358:	fa00 f202 	lsl.w	r2, r0, r2
 800035c:	4313      	orrs	r3, r2
 800035e:	608b      	str	r3, [r1, #8]

				EXTI->FTSR |= ( One_bit_shift << PinActualNumber);
 8000360:	4921      	ldr	r1, [pc, #132]	; (80003e8 <GPIO_Init+0x1e0>)
 8000362:	4b21      	ldr	r3, [pc, #132]	; (80003e8 <GPIO_Init+0x1e0>)
 8000364:	68db      	ldr	r3, [r3, #12]
 8000366:	7b7a      	ldrb	r2, [r7, #13]
 8000368:	2001      	movs	r0, #1
 800036a:	fa00 f202 	lsl.w	r2, r0, r2
 800036e:	4313      	orrs	r3, r2
 8000370:	60cb      	str	r3, [r1, #12]
			}

			//configure the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = PinActualNumber / Four_Pins_for_SYSCFG_EXTICR;
 8000372:	7b7b      	ldrb	r3, [r7, #13]
 8000374:	089b      	lsrs	r3, r3, #2
 8000376:	70fb      	strb	r3, [r7, #3]
			uint8_t temp2 = PinActualNumber % Four_Pins_for_SYSCFG_EXTICR;
 8000378:	7b7b      	ldrb	r3, [r7, #13]
 800037a:	f003 0303 	and.w	r3, r3, #3
 800037e:	70bb      	strb	r3, [r7, #2]
			uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOx);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a1a      	ldr	r2, [pc, #104]	; (80003ec <GPIO_Init+0x1e4>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d037      	beq.n	80003f8 <GPIO_Init+0x1f0>
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a19      	ldr	r2, [pc, #100]	; (80003f0 <GPIO_Init+0x1e8>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d025      	beq.n	80003dc <GPIO_Init+0x1d4>
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a18      	ldr	r2, [pc, #96]	; (80003f4 <GPIO_Init+0x1ec>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d01f      	beq.n	80003d8 <GPIO_Init+0x1d0>
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a15      	ldr	r2, [pc, #84]	; (80003f0 <GPIO_Init+0x1e8>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d019      	beq.n	80003d4 <GPIO_Init+0x1cc>
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4a12      	ldr	r2, [pc, #72]	; (80003ec <GPIO_Init+0x1e4>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d013      	beq.n	80003d0 <GPIO_Init+0x1c8>
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a11      	ldr	r2, [pc, #68]	; (80003f0 <GPIO_Init+0x1e8>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d00d      	beq.n	80003cc <GPIO_Init+0x1c4>
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a0e      	ldr	r2, [pc, #56]	; (80003ec <GPIO_Init+0x1e4>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d007      	beq.n	80003c8 <GPIO_Init+0x1c0>
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a0d      	ldr	r2, [pc, #52]	; (80003f0 <GPIO_Init+0x1e8>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d101      	bne.n	80003c4 <GPIO_Init+0x1bc>
 80003c0:	2307      	movs	r3, #7
 80003c2:	e01a      	b.n	80003fa <GPIO_Init+0x1f2>
 80003c4:	2300      	movs	r3, #0
 80003c6:	e018      	b.n	80003fa <GPIO_Init+0x1f2>
 80003c8:	2306      	movs	r3, #6
 80003ca:	e016      	b.n	80003fa <GPIO_Init+0x1f2>
 80003cc:	2305      	movs	r3, #5
 80003ce:	e014      	b.n	80003fa <GPIO_Init+0x1f2>
 80003d0:	2304      	movs	r3, #4
 80003d2:	e012      	b.n	80003fa <GPIO_Init+0x1f2>
 80003d4:	2303      	movs	r3, #3
 80003d6:	e010      	b.n	80003fa <GPIO_Init+0x1f2>
 80003d8:	2302      	movs	r3, #2
 80003da:	e00e      	b.n	80003fa <GPIO_Init+0x1f2>
 80003dc:	2301      	movs	r3, #1
 80003de:	e00c      	b.n	80003fa <GPIO_Init+0x1f2>
 80003e0:	20000024 	.word	0x20000024
 80003e4:	20000000 	.word	0x20000000
 80003e8:	40013c00 	.word	0x40013c00
 80003ec:	40020000 	.word	0x40020000
 80003f0:	40020400 	.word	0x40020400
 80003f4:	40020800 	.word	0x40020800
 80003f8:	2300      	movs	r3, #0
 80003fa:	707b      	strb	r3, [r7, #1]
			SYSCFG->EXTICR[temp1] = portcode << (temp2 * Four_bits_shift);
 80003fc:	4865      	ldr	r0, [pc, #404]	; (8000594 <GPIO_Init+0x38c>)
 80003fe:	78fb      	ldrb	r3, [r7, #3]
 8000400:	7879      	ldrb	r1, [r7, #1]
 8000402:	78ba      	ldrb	r2, [r7, #2]
 8000404:	0092      	lsls	r2, r2, #2
 8000406:	fa01 f202 	lsl.w	r2, r1, r2
 800040a:	3302      	adds	r3, #2
 800040c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			SYSCFG_PCLK_EN;
 8000410:	4a61      	ldr	r2, [pc, #388]	; (8000598 <GPIO_Init+0x390>)
 8000412:	4b61      	ldr	r3, [pc, #388]	; (8000598 <GPIO_Init+0x390>)
 8000414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800041a:	6453      	str	r3, [r2, #68]	; 0x44
			//enable the exti interrupt delivery using IMR
			EXTI->IMR |= (One_bit_shift << GPIO_PinConfigArray[counter]	.GPIO_PinNumber);
 800041c:	485f      	ldr	r0, [pc, #380]	; (800059c <GPIO_Init+0x394>)
 800041e:	4b5f      	ldr	r3, [pc, #380]	; (800059c <GPIO_Init+0x394>)
 8000420:	6819      	ldr	r1, [r3, #0]
 8000422:	7bfa      	ldrb	r2, [r7, #15]
 8000424:	4c5e      	ldr	r4, [pc, #376]	; (80005a0 <GPIO_Init+0x398>)
 8000426:	4613      	mov	r3, r2
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	4413      	add	r3, r2
 800042c:	005b      	lsls	r3, r3, #1
 800042e:	4423      	add	r3, r4
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	461a      	mov	r2, r3
 8000434:	2301      	movs	r3, #1
 8000436:	4093      	lsls	r3, r2
 8000438:	430b      	orrs	r3, r1
 800043a:	6003      	str	r3, [r0, #0]
		}

		temp = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	60bb      	str	r3, [r7, #8]
		//		temp &= ~( Two_consecutive_bits_mask_by_HEX <<(Two_bits_shift * PinActualNumber) );
		//		temp = ((GPIO_PinConfigArray[counter].GPIO_PinSpeed & 0x00000003U) << (Two_bits_shift * PinActualNumber));
		//		pGPIOx->OSPEEDR |= temp;
		//		//		temp = 0;

		temp = pGPIOx->OSPEEDR;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	60bb      	str	r3, [r7, #8]
		temp &= ~(0x3UL << (PinActualNumber * 2u));
 8000446:	7b7b      	ldrb	r3, [r7, #13]
 8000448:	005b      	lsls	r3, r3, #1
 800044a:	2203      	movs	r2, #3
 800044c:	fa02 f303 	lsl.w	r3, r2, r3
 8000450:	43db      	mvns	r3, r3
 8000452:	68ba      	ldr	r2, [r7, #8]
 8000454:	4013      	ands	r3, r2
 8000456:	60bb      	str	r3, [r7, #8]
		temp |= ((GPIO_PinConfigArray[counter].GPIO_PinSpeed & 0x00000003U) << (PinActualNumber * 2u));
 8000458:	7bfa      	ldrb	r2, [r7, #15]
 800045a:	4951      	ldr	r1, [pc, #324]	; (80005a0 <GPIO_Init+0x398>)
 800045c:	4613      	mov	r3, r2
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	4413      	add	r3, r2
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	440b      	add	r3, r1
 8000466:	3302      	adds	r3, #2
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	f003 0203 	and.w	r2, r3, #3
 800046e:	7b7b      	ldrb	r3, [r7, #13]
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	fa02 f303 	lsl.w	r3, r2, r3
 8000476:	68ba      	ldr	r2, [r7, #8]
 8000478:	4313      	orrs	r3, r2
 800047a:	60bb      	str	r3, [r7, #8]
		pGPIOx->OSPEEDR = temp;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	68ba      	ldr	r2, [r7, #8]
 8000480:	609a      	str	r2, [r3, #8]
		//		temp = (GPIO_PinConfigArray[counter].GPIO_PinPuPdControl << (Two_bits_shift * PinActualNumber) );
		//		pGPIOx->PUPDR &= ~(Two_consecutive_bits_mask_by_HEX << PinActualNumber);  //clearing
		//		pGPIOx->PUPDR |= temp;
		//
		//		temp = 0;
		temp = pGPIOx->PUPDR;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	60bb      	str	r3, [r7, #8]
		temp &= ~(0x3UL << (PinActualNumber * 2u));
 8000488:	7b7b      	ldrb	r3, [r7, #13]
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	2203      	movs	r2, #3
 800048e:	fa02 f303 	lsl.w	r3, r2, r3
 8000492:	43db      	mvns	r3, r3
 8000494:	68ba      	ldr	r2, [r7, #8]
 8000496:	4013      	ands	r3, r2
 8000498:	60bb      	str	r3, [r7, #8]
		temp |= ((GPIO_PinConfigArray[counter].GPIO_PinPuPdControl & 0x00000003U) << (PinActualNumber * 2u));
 800049a:	7bfa      	ldrb	r2, [r7, #15]
 800049c:	4940      	ldr	r1, [pc, #256]	; (80005a0 <GPIO_Init+0x398>)
 800049e:	4613      	mov	r3, r2
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	4413      	add	r3, r2
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	440b      	add	r3, r1
 80004a8:	3303      	adds	r3, #3
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	f003 0203 	and.w	r2, r3, #3
 80004b0:	7b7b      	ldrb	r3, [r7, #13]
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	fa02 f303 	lsl.w	r3, r2, r3
 80004b8:	68ba      	ldr	r2, [r7, #8]
 80004ba:	4313      	orrs	r3, r2
 80004bc:	60bb      	str	r3, [r7, #8]
		pGPIOx->PUPDR = temp;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	68ba      	ldr	r2, [r7, #8]
 80004c2:	60da      	str	r2, [r3, #12]
		//configure the optype
		//		temp = (GPIO_PinConfigArray[counter].GPIO_PinOPType << PinActualNumber);
		//		pGPIOx->OTYPER &= ~( One_bit_mask_by_HEX << PinActualNumber );
		//		pGPIOx->OTYPER |= temp;
		temp = pGPIOx->OTYPER;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	60bb      	str	r3, [r7, #8]
		temp &= ~(0x3UL << (PinActualNumber * 2u));
 80004ca:	7b7b      	ldrb	r3, [r7, #13]
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	2203      	movs	r2, #3
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	43db      	mvns	r3, r3
 80004d6:	68ba      	ldr	r2, [r7, #8]
 80004d8:	4013      	ands	r3, r2
 80004da:	60bb      	str	r3, [r7, #8]
		temp |= ((GPIO_PinConfigArray[counter].GPIO_PinOPType & 0x00000003U) << (PinActualNumber * 2u));
 80004dc:	7bfa      	ldrb	r2, [r7, #15]
 80004de:	4930      	ldr	r1, [pc, #192]	; (80005a0 <GPIO_Init+0x398>)
 80004e0:	4613      	mov	r3, r2
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	4413      	add	r3, r2
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	440b      	add	r3, r1
 80004ea:	3304      	adds	r3, #4
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	f003 0203 	and.w	r2, r3, #3
 80004f2:	7b7b      	ldrb	r3, [r7, #13]
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	fa02 f303 	lsl.w	r3, r2, r3
 80004fa:	68ba      	ldr	r2, [r7, #8]
 80004fc:	4313      	orrs	r3, r2
 80004fe:	60bb      	str	r3, [r7, #8]
		pGPIOx->OTYPER = temp;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	68ba      	ldr	r2, [r7, #8]
 8000504:	605a      	str	r2, [r3, #4]

		//configure the alternate functionality
		if(GPIO_PinConfigArray[counter].GPIO_PinMode == GPIO_MODE_ALTFN)
 8000506:	7bfa      	ldrb	r2, [r7, #15]
 8000508:	4925      	ldr	r1, [pc, #148]	; (80005a0 <GPIO_Init+0x398>)
 800050a:	4613      	mov	r3, r2
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	4413      	add	r3, r2
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	440b      	add	r3, r1
 8000514:	3301      	adds	r3, #1
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b02      	cmp	r3, #2
 800051a:	d130      	bne.n	800057e <GPIO_Init+0x376>
			//
			//			temp1 = PinActualNumber / Eight_Pins_for_GPIOxAFRH_or_AFRL;
			//			temp2 = PinActualNumber % Eight_Pins_for_GPIOxAFRH_or_AFRL;
			//			pGPIOx->AFR[temp1] &= ~(bits_mask_by_HEX << (Four_bits_shift * temp2) ); //clearing
			//			pGPIOx->AFR[temp1] = (GPIO_PinConfigArray[counter].GPIO_PinAltFunMode << (Four_bits_shift * temp2) ); //setting
			temp = pGPIOx->AFR[PinActualNumber >> 3u];
 800051c:	7b7b      	ldrb	r3, [r7, #13]
 800051e:	08db      	lsrs	r3, r3, #3
 8000520:	b2db      	uxtb	r3, r3
 8000522:	461a      	mov	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3208      	adds	r2, #8
 8000528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800052c:	60bb      	str	r3, [r7, #8]
			temp &= ~(0xFu << ((PinActualNumber & 0x07u) * 4u));
 800052e:	7b7b      	ldrb	r3, [r7, #13]
 8000530:	f003 0307 	and.w	r3, r3, #7
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	220f      	movs	r2, #15
 8000538:	fa02 f303 	lsl.w	r3, r2, r3
 800053c:	43db      	mvns	r3, r3
 800053e:	68ba      	ldr	r2, [r7, #8]
 8000540:	4013      	ands	r3, r2
 8000542:	60bb      	str	r3, [r7, #8]
			temp |= ((GPIO_PinConfigArray[counter].GPIO_PinAltFunMode ) << ((PinActualNumber & 0x07u) * 4u));
 8000544:	7bfa      	ldrb	r2, [r7, #15]
 8000546:	4916      	ldr	r1, [pc, #88]	; (80005a0 <GPIO_Init+0x398>)
 8000548:	4613      	mov	r3, r2
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	4413      	add	r3, r2
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	440b      	add	r3, r1
 8000552:	3305      	adds	r3, #5
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	461a      	mov	r2, r3
 8000558:	7b7b      	ldrb	r3, [r7, #13]
 800055a:	f003 0307 	and.w	r3, r3, #7
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	fa02 f303 	lsl.w	r3, r2, r3
 8000564:	461a      	mov	r2, r3
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	4313      	orrs	r3, r2
 800056a:	60bb      	str	r3, [r7, #8]
			pGPIOx->AFR[PinActualNumber >> 3u] = temp;
 800056c:	7b7b      	ldrb	r3, [r7, #13]
 800056e:	08db      	lsrs	r3, r3, #3
 8000570:	b2db      	uxtb	r3, r3
 8000572:	461a      	mov	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3208      	adds	r2, #8
 8000578:	68b9      	ldr	r1, [r7, #8]
 800057a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for( counter=0; counter<NUMBER_OF_CONFIGURED_PINS; counter++ )
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	3301      	adds	r3, #1
 8000582:	73fb      	strb	r3, [r7, #15]
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	2b03      	cmp	r3, #3
 8000588:	f67f ae4a 	bls.w	8000220 <GPIO_Init+0x18>
		}

	}
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	bd90      	pop	{r4, r7, pc}
 8000594:	40013800 	.word	0x40013800
 8000598:	40023800 	.word	0x40023800
 800059c:	40013c00 	.word	0x40013c00
 80005a0:	20000024 	.word	0x20000024

080005a4 <GPIO_WriteOutputPin>:
Note       =
 */

//void GPIO_WriteOutputPin(GPIO_regdef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
void GPIO_WriteOutputPin(uint8_t Pin, uint8_t Value)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	460a      	mov	r2, r1
 80005ae:	71fb      	strb	r3, [r7, #7]
 80005b0:	4613      	mov	r3, r2
 80005b2:	71bb      	strb	r3, [r7, #6]

	uint8_t PortNumber=0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	73fb      	strb	r3, [r7, #15]
	uint8_t PinActualNumber=0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73bb      	strb	r3, [r7, #14]

	PortNumber = ((Pin / PORT_NUMBER_OF_BITS_IN_REG));
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	091b      	lsrs	r3, r3, #4
 80005c0:	73fb      	strb	r3, [r7, #15]
	PinActualNumber = (Pin % PORT_NUMBER_OF_BITS_IN_REG);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f003 030f 	and.w	r3, r3, #15
 80005c8:	73bb      	strb	r3, [r7, #14]

	GPIO_regdef_t *pGPIOx = GPIO_Arr[PortNumber];     // new
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	4a10      	ldr	r2, [pc, #64]	; (8000610 <GPIO_WriteOutputPin+0x6c>)
 80005ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d2:	60bb      	str	r3, [r7, #8]

	if(Value == GPIO_PIN_SET)
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d109      	bne.n	80005ee <GPIO_WriteOutputPin+0x4a>
	{
		//write 1 to the output data register at the bit field coreesponding to the pin
		pGPIOx->ODR |= ( One_bit_shift << PinActualNumber);
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	7bba      	ldrb	r2, [r7, #14]
 80005e0:	2101      	movs	r1, #1
 80005e2:	fa01 f202 	lsl.w	r2, r1, r2
 80005e6:	431a      	orrs	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	615a      	str	r2, [r3, #20]
	{
		//write 0
		pGPIOx->ODR &= ~( One_bit_mask << PinActualNumber);
	}

}
 80005ec:	e009      	b.n	8000602 <GPIO_WriteOutputPin+0x5e>
		pGPIOx->ODR &= ~( One_bit_mask << PinActualNumber);
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	7bba      	ldrb	r2, [r7, #14]
 80005f4:	2101      	movs	r1, #1
 80005f6:	fa01 f202 	lsl.w	r2, r1, r2
 80005fa:	43d2      	mvns	r2, r2
 80005fc:	401a      	ands	r2, r3
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	615a      	str	r2, [r3, #20]
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000000 	.word	0x20000000

08000614 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 800061a:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <RCC_GetPCLK1Value+0x9c>)
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	089b      	lsrs	r3, r3, #2
 8000620:	b2db      	uxtb	r3, r3
 8000622:	f003 0303 	and.w	r3, r3, #3
 8000626:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8000628:	7a7b      	ldrb	r3, [r7, #9]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d102      	bne.n	8000634 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 800062e:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <RCC_GetPCLK1Value+0xa0>)
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	e00b      	b.n	800064c <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000634:	7a7b      	ldrb	r3, [r7, #9]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d102      	bne.n	8000640 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <RCC_GetPCLK1Value+0xa4>)
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	e005      	b.n	800064c <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000640:	7a7b      	ldrb	r3, [r7, #9]
 8000642:	2b02      	cmp	r3, #2
 8000644:	d102      	bne.n	800064c <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000646:	f000 f88d 	bl	8000764 <RCC_GetPLLOutputClock>
 800064a:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <RCC_GetPCLK1Value+0x9c>)
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	091b      	lsrs	r3, r3, #4
 8000652:	b2db      	uxtb	r3, r3
 8000654:	f003 030f 	and.w	r3, r3, #15
 8000658:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 800065a:	7a3b      	ldrb	r3, [r7, #8]
 800065c:	2b07      	cmp	r3, #7
 800065e:	d802      	bhi.n	8000666 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000660:	2301      	movs	r3, #1
 8000662:	72fb      	strb	r3, [r7, #11]
 8000664:	e005      	b.n	8000672 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000666:	7a3b      	ldrb	r3, [r7, #8]
 8000668:	3b08      	subs	r3, #8
 800066a:	4a14      	ldr	r2, [pc, #80]	; (80006bc <RCC_GetPCLK1Value+0xa8>)
 800066c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000670:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <RCC_GetPCLK1Value+0x9c>)
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	0a9b      	lsrs	r3, r3, #10
 8000678:	b2db      	uxtb	r3, r3
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000680:	7a3b      	ldrb	r3, [r7, #8]
 8000682:	2b03      	cmp	r3, #3
 8000684:	d802      	bhi.n	800068c <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000686:	2301      	movs	r3, #1
 8000688:	72bb      	strb	r3, [r7, #10]
 800068a:	e004      	b.n	8000696 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 800068c:	7a3b      	ldrb	r3, [r7, #8]
 800068e:	3b04      	subs	r3, #4
 8000690:	4a0b      	ldr	r2, [pc, #44]	; (80006c0 <RCC_GetPCLK1Value+0xac>)
 8000692:	5cd3      	ldrb	r3, [r2, r3]
 8000694:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8000696:	7afb      	ldrb	r3, [r7, #11]
 8000698:	68fa      	ldr	r2, [r7, #12]
 800069a:	fbb2 f2f3 	udiv	r2, r2, r3
 800069e:	7abb      	ldrb	r3, [r7, #10]
 80006a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a4:	607b      	str	r3, [r7, #4]

	return pclk1;
 80006a6:	687b      	ldr	r3, [r7, #4]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	00f42400 	.word	0x00f42400
 80006b8:	007a1200 	.word	0x007a1200
 80006bc:	2000003c 	.word	0x2000003c
 80006c0:	2000004c 	.word	0x2000004c

080006c4 <RCC_GetPCLK2Value>:
 * @return            -
 *
 * @Note              -
 */
uint32_t RCC_GetPCLK2Value(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 80006ce:	4b20      	ldr	r3, [pc, #128]	; (8000750 <RCC_GetPCLK2Value+0x8c>)
 80006d0:	689b      	ldr	r3, [r3, #8]
 80006d2:	089b      	lsrs	r3, r3, #2
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	f003 0303 	and.w	r3, r3, #3
 80006da:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 80006dc:	7a7b      	ldrb	r3, [r7, #9]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d102      	bne.n	80006e8 <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <RCC_GetPCLK2Value+0x90>)
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	e001      	b.n	80006ec <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <RCC_GetPCLK2Value+0x94>)
 80006ea:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <RCC_GetPCLK2Value+0x8c>)
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	091b      	lsrs	r3, r3, #4
 80006f2:	f003 030f 	and.w	r3, r3, #15
 80006f6:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b07      	cmp	r3, #7
 80006fc:	d802      	bhi.n	8000704 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	72fb      	strb	r3, [r7, #11]
 8000702:	e005      	b.n	8000710 <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3b08      	subs	r3, #8
 8000708:	4a14      	ldr	r2, [pc, #80]	; (800075c <RCC_GetPCLK2Value+0x98>)
 800070a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800070e:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <RCC_GetPCLK2Value+0x8c>)
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	0b5b      	lsrs	r3, r3, #13
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b03      	cmp	r3, #3
 8000720:	d802      	bhi.n	8000728 <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 8000722:	2301      	movs	r3, #1
 8000724:	72bb      	strb	r3, [r7, #10]
 8000726:	e004      	b.n	8000732 <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b04      	subs	r3, #4
 800072c:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <RCC_GetPCLK2Value+0x9c>)
 800072e:	5cd3      	ldrb	r3, [r2, r3]
 8000730:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8000732:	7afb      	ldrb	r3, [r7, #11]
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	fbb2 f2f3 	udiv	r2, r2, r3
 800073a:	7abb      	ldrb	r3, [r7, #10]
 800073c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000740:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000742:	683b      	ldr	r3, [r7, #0]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	40023800 	.word	0x40023800
 8000754:	00f42400 	.word	0x00f42400
 8000758:	007a1200 	.word	0x007a1200
 800075c:	2000003c 	.word	0x2000003c
 8000760:	2000004c 	.word	0x2000004c

08000764 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8000764:	b480      	push	{r7}
 8000766:	b087      	sub	sp, #28
 8000768:	af00      	add	r7, sp, #0

	uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	2302      	movs	r3, #2
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	2302      	movs	r3, #2
 8000780:	603b      	str	r3, [r7, #0]


	 /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
	         SYSCLK = PLL_VCO / PLLP
	         */
	      pllsource = (RCC->PLLCFGR & ((uint32_t)0x00400000)) >> 22;
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <RCC_GetPLLOutputClock+0x90>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	0d9b      	lsrs	r3, r3, #22
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	607b      	str	r3, [r7, #4]
	      pllm = RCC->PLLCFGR & ((uint32_t)0x0000003F);
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <RCC_GetPLLOutputClock+0x90>)
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000796:	603b      	str	r3, [r7, #0]

	      if (pllsource != 0)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d00c      	beq.n	80007b8 <RCC_GetPLLOutputClock+0x54>
	      {
	        /* HSE used as PLL clock source */
	        pllvco = (((uint32_t)8000000) / pllm) * ((RCC->PLLCFGR & ((uint32_t)0x00007FC0)) >> 6);
 800079e:	4a16      	ldr	r2, [pc, #88]	; (80007f8 <RCC_GetPLLOutputClock+0x94>)
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a6:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <RCC_GetPLLOutputClock+0x90>)
 80007a8:	6852      	ldr	r2, [r2, #4]
 80007aa:	0992      	lsrs	r2, r2, #6
 80007ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80007b0:	fb02 f303 	mul.w	r3, r2, r3
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	e00b      	b.n	80007d0 <RCC_GetPLLOutputClock+0x6c>
	      }
	      else
	      {
	        /* HSI used as PLL clock source */
	        pllvco = (((uint32_t)16000000) / pllm) * ((RCC->PLLCFGR & ((uint32_t)0x00007FC0)) >> 6);
 80007b8:	4a10      	ldr	r2, [pc, #64]	; (80007fc <RCC_GetPLLOutputClock+0x98>)
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c0:	4a0c      	ldr	r2, [pc, #48]	; (80007f4 <RCC_GetPLLOutputClock+0x90>)
 80007c2:	6852      	ldr	r2, [r2, #4]
 80007c4:	0992      	lsrs	r2, r2, #6
 80007c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80007ca:	fb02 f303 	mul.w	r3, r2, r3
 80007ce:	617b      	str	r3, [r7, #20]
	      }

	      pllp = (((RCC->PLLCFGR & ((uint32_t)0x00030000)) >>16) + 1 ) *2;
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <RCC_GetPLLOutputClock+0x90>)
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	0c1b      	lsrs	r3, r3, #16
 80007d6:	f003 0303 	and.w	r3, r3, #3
 80007da:	3301      	adds	r3, #1
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]

          return  pllvco/pllp;
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	fbb2 f3f3 	udiv	r3, r2, r3

	//return 0;
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	371c      	adds	r7, #28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	40023800 	.word	0x40023800
 80007f8:	007a1200 	.word	0x007a1200
 80007fc:	00f42400 	.word	0x00f42400

08000800 <USART_PeripheralControl>:
static FLAG_STATUS USART_GetFlagStatus(uint8_t USART_ID , uint32_t FlagName);
static void USART_PeripheralControl(uint8_t USART_ID, uint8_t Cmd);


static void USART_PeripheralControl(uint8_t USART_ID, uint8_t Cmd)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	460a      	mov	r2, r1
 800080a:	71fb      	strb	r3, [r7, #7]
 800080c:	4613      	mov	r3, r2
 800080e:	71bb      	strb	r3, [r7, #6]
	/*********NEW_BY_GHADA**************/
	USART_RegDef_t *pUSARTx = USART_Arr[USART_ID] ;
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	4a0c      	ldr	r2, [pc, #48]	; (8000844 <USART_PeripheralControl+0x44>)
 8000814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000818:	60fb      	str	r3, [r7, #12]

	pUSARTx->USART_CR1 = (pUSARTx->USART_CR1 & ~(One_bit_mask << USART_CR1_UE))
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	899b      	ldrh	r3, [r3, #12]
 800081e:	b29b      	uxth	r3, r3
 8000820:	b21b      	sxth	r3, r3
 8000822:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000826:	b21a      	sxth	r2, r3
									|(Cmd << USART_CR1_UE);
 8000828:	79bb      	ldrb	r3, [r7, #6]
 800082a:	035b      	lsls	r3, r3, #13
 800082c:	b21b      	sxth	r3, r3
 800082e:	4313      	orrs	r3, r2
 8000830:	b21b      	sxth	r3, r3
 8000832:	b29a      	uxth	r2, r3
	pUSARTx->USART_CR1 = (pUSARTx->USART_CR1 & ~(One_bit_mask << USART_CR1_UE))
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	819a      	strh	r2, [r3, #12]
	/**********************************/

}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	20000050 	.word	0x20000050

08000848 <USART_PeriClockControl>:


static void USART_PeriClockControl(uint8_t USART_ID, uint8_t EnorDi)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	460a      	mov	r2, r1
 8000852:	71fb      	strb	r3, [r7, #7]
 8000854:	4613      	mov	r3, r2
 8000856:	71bb      	strb	r3, [r7, #6]
	switch(USART_ID)
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <USART_PeriClockControl+0x1c>
 800085e:	2b05      	cmp	r3, #5
 8000860:	d012      	beq.n	8000888 <USART_PeriClockControl+0x40>
 8000862:	e021      	b.n	80008a8 <USART_PeriClockControl+0x60>
	{
	case USART1_ :
		USART_PCLK_1_6_EN = (USART_PCLK_1_6_EN & ~(One_bit_mask << (USART_ID+USART_1_APB2ENR_REG_OFFEST)))
 8000864:	481c      	ldr	r0, [pc, #112]	; (80008d8 <USART_PeriClockControl+0x90>)
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <USART_PeriClockControl+0x90>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	79fa      	ldrb	r2, [r7, #7]
 800086c:	3204      	adds	r2, #4
 800086e:	2101      	movs	r1, #1
 8000870:	fa01 f202 	lsl.w	r2, r1, r2
 8000874:	43d2      	mvns	r2, r2
 8000876:	4013      	ands	r3, r2
		|(EnorDi <<(USART_ID+USART_1_APB2ENR_REG_OFFEST));
 8000878:	79b9      	ldrb	r1, [r7, #6]
 800087a:	79fa      	ldrb	r2, [r7, #7]
 800087c:	3204      	adds	r2, #4
 800087e:	fa01 f202 	lsl.w	r2, r1, r2
 8000882:	4313      	orrs	r3, r2
		USART_PCLK_1_6_EN = (USART_PCLK_1_6_EN & ~(One_bit_mask << (USART_ID+USART_1_APB2ENR_REG_OFFEST)))
 8000884:	6443      	str	r3, [r0, #68]	; 0x44
		break;
 8000886:	e020      	b.n	80008ca <USART_PeriClockControl+0x82>
	case USART6_:
		USART_PCLK_1_6_EN =(USART_PCLK_1_6_EN & ~(One_bit_mask << USART_ID))
 8000888:	4813      	ldr	r0, [pc, #76]	; (80008d8 <USART_PeriClockControl+0x90>)
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <USART_PeriClockControl+0x90>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	79fa      	ldrb	r2, [r7, #7]
 8000890:	2101      	movs	r1, #1
 8000892:	fa01 f202 	lsl.w	r2, r1, r2
 8000896:	43d2      	mvns	r2, r2
 8000898:	4013      	ands	r3, r2
		|(EnorDi <<USART_ID);
 800089a:	79b9      	ldrb	r1, [r7, #6]
 800089c:	79fa      	ldrb	r2, [r7, #7]
 800089e:	fa01 f202 	lsl.w	r2, r1, r2
 80008a2:	4313      	orrs	r3, r2
		USART_PCLK_1_6_EN =(USART_PCLK_1_6_EN & ~(One_bit_mask << USART_ID))
 80008a4:	6443      	str	r3, [r0, #68]	; 0x44
		break;
 80008a6:	e010      	b.n	80008ca <USART_PeriClockControl+0x82>
	default:
		USART_PCLK_2_TO_5_EN =(USART_PCLK_2_TO_5_EN & ~(One_bit_mask << (USART_ID+USART_2_TO_5_APB1ENR_REG_OFFEST-1)))
 80008a8:	480b      	ldr	r0, [pc, #44]	; (80008d8 <USART_PeriClockControl+0x90>)
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <USART_PeriClockControl+0x90>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	79fa      	ldrb	r2, [r7, #7]
 80008b0:	3210      	adds	r2, #16
 80008b2:	2101      	movs	r1, #1
 80008b4:	fa01 f202 	lsl.w	r2, r1, r2
 80008b8:	43d2      	mvns	r2, r2
 80008ba:	4013      	ands	r3, r2
		|(EnorDi << (USART_ID+USART_2_TO_5_APB1ENR_REG_OFFEST-1));
 80008bc:	79b9      	ldrb	r1, [r7, #6]
 80008be:	79fa      	ldrb	r2, [r7, #7]
 80008c0:	3210      	adds	r2, #16
 80008c2:	fa01 f202 	lsl.w	r2, r1, r2
 80008c6:	4313      	orrs	r3, r2
		USART_PCLK_2_TO_5_EN =(USART_PCLK_2_TO_5_EN & ~(One_bit_mask << (USART_ID+USART_2_TO_5_APB1ENR_REG_OFFEST-1)))
 80008c8:	6403      	str	r3, [r0, #64]	; 0x40
	}
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <USART_GetFlagStatus>:

/*Get flag status function */

static FLAG_STATUS USART_GetFlagStatus(uint8_t USART_ID , uint32_t FlagName)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	6039      	str	r1, [r7, #0]
 80008e6:	71fb      	strb	r3, [r7, #7]
	/* one shift left with bitNum_FlagName_
	00000000
	00001000
	 */
	USART_RegDef_t *pUSARTx = USART_Arr[USART_ID] ;
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	4a0c      	ldr	r2, [pc, #48]	; (800091c <USART_GetFlagStatus+0x40>)
 80008ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f0:	60fb      	str	r3, [r7, #12]

	return ((pUSARTx->USART_SR & (One_bit_shift << FlagName)) >> FlagName );
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	4619      	mov	r1, r3
 80008fa:	2201      	movs	r2, #1
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	ea01 0203 	and.w	r2, r1, r3
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	fa42 f303 	asr.w	r3, r2, r3
 800090c:	b2db      	uxtb	r3, r3

}
 800090e:	4618      	mov	r0, r3
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20000050 	.word	0x20000050

08000920 <USART_SetBaudRate>:

void USART_SetBaudRate(uint8_t USART_ID, uint32_t BaudRate)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	71fb      	strb	r3, [r7, #7]
	USART_RegDef_t *pUSARTx = USART_Arr[USART_ID] ;
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	4a35      	ldr	r2, [pc, #212]	; (8000a04 <USART_SetBaudRate+0xe4>)
 8000930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000934:	613b      	str	r3, [r7, #16]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

	uint32_t tempreg=0;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]

	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6)
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	4a32      	ldr	r2, [pc, #200]	; (8000a08 <USART_SetBaudRate+0xe8>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d003      	beq.n	800094a <USART_SetBaudRate+0x2a>
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	4a31      	ldr	r2, [pc, #196]	; (8000a0c <USART_SetBaudRate+0xec>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d103      	bne.n	8000952 <USART_SetBaudRate+0x32>
	{
		//USART1 and USART6 are hanging on APB2 bus
		PCLKx = RCC_GetPCLK2Value();   // return APB2 bus frequency
 800094a:	f7ff febb 	bl	80006c4 <RCC_GetPCLK2Value>
 800094e:	61f8      	str	r0, [r7, #28]
 8000950:	e002      	b.n	8000958 <USART_SetBaudRate+0x38>
	}else
	{
		PCLKx = RCC_GetPCLK1Value();   // return APB1 bus frequency
 8000952:	f7ff fe5f 	bl	8000614 <RCC_GetPCLK1Value>
 8000956:	61f8      	str	r0, [r7, #28]
	}

	//Check for OVER8 configuration bit
	if(pUSARTx->USART_CR1 & (One_bit_shift << USART_CR1_OVER8))
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	899b      	ldrh	r3, [r3, #12]
 800095c:	b29b      	uxth	r3, r3
 800095e:	b21b      	sxth	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	da0b      	bge.n	800097c <USART_SetBaudRate+0x5c>
	{
		//OVER8 = 1 , over sampling by 8
		usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000964:	69fa      	ldr	r2, [r7, #28]
 8000966:	4613      	mov	r3, r2
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4413      	add	r3, r2
 800096c:	009a      	lsls	r2, r3, #2
 800096e:	441a      	add	r2, r3
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	fbb2 f3f3 	udiv	r3, r2, r3
 8000978:	61bb      	str	r3, [r7, #24]
 800097a:	e00a      	b.n	8000992 <USART_SetBaudRate+0x72>
	}else
	{
		//over sampling by 16
		usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 800097c:	69fa      	ldr	r2, [r7, #28]
 800097e:	4613      	mov	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4413      	add	r3, r2
 8000984:	009a      	lsls	r2, r3, #2
 8000986:	441a      	add	r2, r3
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000990:	61bb      	str	r3, [r7, #24]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	4a1e      	ldr	r2, [pc, #120]	; (8000a10 <USART_SetBaudRate+0xf0>)
 8000996:	fba2 2303 	umull	r2, r3, r2, r3
 800099a:	095b      	lsrs	r3, r3, #5
 800099c:	60bb      	str	r3, [r7, #8]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	011b      	lsls	r3, r3, #4
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	60fb      	str	r3, [r7, #12]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	2264      	movs	r2, #100	; 0x64
 80009ac:	fb02 f303 	mul.w	r3, r2, r3
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	if(pUSARTx->USART_CR1 & ( One_bit_shift << USART_CR1_OVER8))
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	899b      	ldrh	r3, [r3, #12]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	b21b      	sxth	r3, r3
 80009be:	2b00      	cmp	r3, #0
 80009c0:	da0a      	bge.n	80009d8 <USART_SetBaudRate+0xb8>
	{
		//OVER8 = 1 , over sampling by 8
		F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	3332      	adds	r3, #50	; 0x32
 80009c8:	4a11      	ldr	r2, [pc, #68]	; (8000a10 <USART_SetBaudRate+0xf0>)
 80009ca:	fba2 2303 	umull	r2, r3, r2, r3
 80009ce:	095b      	lsrs	r3, r3, #5
 80009d0:	f003 0307 	and.w	r3, r3, #7
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	e009      	b.n	80009ec <USART_SetBaudRate+0xcc>

	}else
	{
		//over sampling by 16
		F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	011b      	lsls	r3, r3, #4
 80009dc:	3332      	adds	r3, #50	; 0x32
 80009de:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <USART_SetBaudRate+0xf0>)
 80009e0:	fba2 2303 	umull	r2, r3, r2, r3
 80009e4:	095b      	lsrs	r3, r3, #5
 80009e6:	f003 030f 	and.w	r3, r3, #15
 80009ea:	617b      	str	r3, [r7, #20]

	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]

	//copy the value of tempreg in to BRR register
	pUSARTx->USART_BRR = tempreg;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	811a      	strh	r2, [r3, #8]
}
 80009fc:	bf00      	nop
 80009fe:	3720      	adds	r7, #32
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000050 	.word	0x20000050
 8000a08:	40011000 	.word	0x40011000
 8000a0c:	40011400 	.word	0x40011400
 8000a10:	51eb851f 	.word	0x51eb851f

08000a14 <USART_Init>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0

	//Temporary variable
	uint32_t TempReg=0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
	uint8_t counter=0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	72fb      	strb	r3, [r7, #11]
	USART_RegDef_t *pUSARTx;


	for(;counter<NUMBER_OF_CONFIGURED_UART;counter++)
 8000a22:	e0e1      	b.n	8000be8 <USART_Init+0x1d4>
	{
		/******************************** Configuration of CR1******************************************/
		pUSARTx = USART_Arr[UART_ConfigArray[counter].USART_ID] ;
 8000a24:	7afa      	ldrb	r2, [r7, #11]
 8000a26:	4974      	ldr	r1, [pc, #464]	; (8000bf8 <USART_Init+0x1e4>)
 8000a28:	4613      	mov	r3, r2
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	4413      	add	r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	440b      	add	r3, r1
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b71      	ldr	r3, [pc, #452]	; (8000bfc <USART_Init+0x1e8>)
 8000a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a3c:	607b      	str	r3, [r7, #4]


		//Implement the code to enable the Clock for given USART peripheral
		USART_PeriClockControl(UART_ConfigArray[counter].USART_ID, ENABLE);
 8000a3e:	7afa      	ldrb	r2, [r7, #11]
 8000a40:	496d      	ldr	r1, [pc, #436]	; (8000bf8 <USART_Init+0x1e4>)
 8000a42:	4613      	mov	r3, r2
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	4413      	add	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2101      	movs	r1, #1
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fef9 	bl	8000848 <USART_PeriClockControl>


		//Enable USART Tx and Rx engines according to the USART_Mode configuration item
		switch(UART_ConfigArray[counter].USART_Mode)
 8000a56:	7afa      	ldrb	r2, [r7, #11]
 8000a58:	4967      	ldr	r1, [pc, #412]	; (8000bf8 <USART_Init+0x1e4>)
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	4413      	add	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	440b      	add	r3, r1
 8000a64:	3301      	adds	r3, #1
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d004      	beq.n	8000a76 <USART_Init+0x62>
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d00c      	beq.n	8000a8a <USART_Init+0x76>
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d005      	beq.n	8000a80 <USART_Init+0x6c>
 8000a74:	e00e      	b.n	8000a94 <USART_Init+0x80>
		{
		case USART_MODE_ONLY_RX :
			//Implement the code to enable the Receiver bit field
			TempReg |= (One_bit_shift << USART_CR1_RE);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	60fb      	str	r3, [r7, #12]

			break;
 8000a7e:	e009      	b.n	8000a94 <USART_Init+0x80>

		case USART_MODE_ONLY_TX :
			//Implement the code to enable the Transmitter bit field
			TempReg |= ( One_bit_shift << USART_CR1_TE);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f043 0308 	orr.w	r3, r3, #8
 8000a86:	60fb      	str	r3, [r7, #12]
			break;
 8000a88:	e004      	b.n	8000a94 <USART_Init+0x80>

		case USART_MODE_TXRX :
			//Implement the code to enable the both Transmitter and Receiver bit fields
			TempReg |= ( ( One_bit_shift << USART_CR1_TE) | ( One_bit_shift << USART_CR1_RE) );
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	f043 030c 	orr.w	r3, r3, #12
 8000a90:	60fb      	str	r3, [r7, #12]
			break;
 8000a92:	bf00      	nop
		}
		//Implement the code to configure the Word length configuration item
		TempReg |= UART_ConfigArray[counter].USART_WordLength << USART_CR1_M ;
 8000a94:	7afa      	ldrb	r2, [r7, #11]
 8000a96:	4958      	ldr	r1, [pc, #352]	; (8000bf8 <USART_Init+0x1e4>)
 8000a98:	4613      	mov	r3, r2
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	4413      	add	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	3309      	adds	r3, #9
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	031b      	lsls	r3, r3, #12
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]


		//Configuration of parity control bit fields
		switch(UART_ConfigArray[counter].USART_ParityControl)
 8000ab0:	7afa      	ldrb	r2, [r7, #11]
 8000ab2:	4951      	ldr	r1, [pc, #324]	; (8000bf8 <USART_Init+0x1e4>)
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	4413      	add	r3, r2
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	440b      	add	r3, r1
 8000abe:	330a      	adds	r3, #10
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d002      	beq.n	8000acc <USART_Init+0xb8>
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d005      	beq.n	8000ad6 <USART_Init+0xc2>
 8000aca:	e00d      	b.n	8000ae8 <USART_Init+0xd4>
		{
		case USART_PARITY_EN_EVEN:
			//Implement the code to enable the parity control
			//
			TempReg |= ( 1 << USART_CR1_PCE);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad2:	60fb      	str	r3, [r7, #12]
			break;
 8000ad4:	e008      	b.n	8000ae8 <USART_Init+0xd4>

		case USART_PARITY_EN_ODD:
			//Implement the code to enable the parity control
			TempReg |= ( 1 << USART_CR1_PCE);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000adc:	60fb      	str	r3, [r7, #12]
			//Implement the code to enable ODD parity
			TempReg |= ( 1 << USART_CR1_PS);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae4:	60fb      	str	r3, [r7, #12]

			break;
 8000ae6:	bf00      	nop
		}

		//Program the CR1 register
		USART_Arr[UART_ConfigArray[counter].USART_ID]->USART_CR1 = TempReg;
 8000ae8:	7afa      	ldrb	r2, [r7, #11]
 8000aea:	4943      	ldr	r1, [pc, #268]	; (8000bf8 <USART_Init+0x1e4>)
 8000aec:	4613      	mov	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	440b      	add	r3, r1
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b40      	ldr	r3, [pc, #256]	; (8000bfc <USART_Init+0x1e8>)
 8000afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	b292      	uxth	r2, r2
 8000b04:	819a      	strh	r2, [r3, #12]


		USART_PeripheralControl(UART_ConfigArray[counter].USART_ID, ENABLE);
 8000b06:	7afa      	ldrb	r2, [r7, #11]
 8000b08:	493b      	ldr	r1, [pc, #236]	; (8000bf8 <USART_Init+0x1e4>)
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	4413      	add	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	440b      	add	r3, r1
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2101      	movs	r1, #1
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fe71 	bl	8000800 <USART_PeripheralControl>

		/******************************** Configuration of CR2******************************************/

		TempReg=0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]

		//Implement the code to configure the number of stop bits inserted during USART frame transmission
		TempReg |= UART_ConfigArray[counter].USART_NoOfStopBits << USART_CR2_STOP;
 8000b22:	7afa      	ldrb	r2, [r7, #11]
 8000b24:	4934      	ldr	r1, [pc, #208]	; (8000bf8 <USART_Init+0x1e4>)
 8000b26:	4613      	mov	r3, r2
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	4413      	add	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	440b      	add	r3, r1
 8000b30:	3308      	adds	r3, #8
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	031b      	lsls	r3, r3, #12
 8000b36:	461a      	mov	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]

		//Program the CR2 register
		USART_Arr[UART_ConfigArray[counter].USART_ID]->USART_CR2 = TempReg;
 8000b3e:	7afa      	ldrb	r2, [r7, #11]
 8000b40:	492d      	ldr	r1, [pc, #180]	; (8000bf8 <USART_Init+0x1e4>)
 8000b42:	4613      	mov	r3, r2
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	4413      	add	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <USART_Init+0x1e8>)
 8000b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	b292      	uxth	r2, r2
 8000b5a:	821a      	strh	r2, [r3, #16]


		/******************************** Configuration of CR3******************************************/

		TempReg=0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]

		//Configuration of USART hardware flow control
		switch (UART_ConfigArray[counter].USART_HWFlowControl)
 8000b60:	7afa      	ldrb	r2, [r7, #11]
 8000b62:	4925      	ldr	r1, [pc, #148]	; (8000bf8 <USART_Init+0x1e4>)
 8000b64:	4613      	mov	r3, r2
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	4413      	add	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	330b      	adds	r3, #11
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d008      	beq.n	8000b88 <USART_Init+0x174>
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	d00b      	beq.n	8000b92 <USART_Init+0x17e>
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d10e      	bne.n	8000b9c <USART_Init+0x188>
		{
		case USART_HW_FLOW_CTRL_CTS:
			//Implement the code to enable CTS flow control
			TempReg |= ( 1 << USART_CR3_CTSE);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b84:	60fb      	str	r3, [r7, #12]
			break;
 8000b86:	e009      	b.n	8000b9c <USART_Init+0x188>

		case USART_HW_FLOW_CTRL_RTS:
			//Implement the code to enable RTS flow control
			TempReg |= (1 << USART_CR3_RTSE);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8e:	60fb      	str	r3, [r7, #12]
			break;
 8000b90:	e004      	b.n	8000b9c <USART_Init+0x188>

		case USART_HW_FLOW_CTRL_CTS_RTS:
			//Implement the code to enable both CTS and RTS Flow control
			TempReg |= ( ( 1 << USART_CR3_CTSE) | ( 1 << USART_CR3_RTSE) );
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000b98:	60fb      	str	r3, [r7, #12]
			break;
 8000b9a:	bf00      	nop
		}


		USART_Arr[UART_ConfigArray[counter].USART_ID]->USART_CR3 = TempReg;
 8000b9c:	7afa      	ldrb	r2, [r7, #11]
 8000b9e:	4916      	ldr	r1, [pc, #88]	; (8000bf8 <USART_Init+0x1e4>)
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	440b      	add	r3, r1
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <USART_Init+0x1e8>)
 8000bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	b292      	uxth	r2, r2
 8000bb8:	829a      	strh	r2, [r3, #20]

		/******************************** Configuration of BRR(Baudrate register)******************************************/

		USART_SetBaudRate(UART_ConfigArray[counter].USART_ID ,UART_ConfigArray[counter].USART_Baud);
 8000bba:	7afa      	ldrb	r2, [r7, #11]
 8000bbc:	490e      	ldr	r1, [pc, #56]	; (8000bf8 <USART_Init+0x1e4>)
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	4413      	add	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	7818      	ldrb	r0, [r3, #0]
 8000bca:	7afa      	ldrb	r2, [r7, #11]
 8000bcc:	490a      	ldr	r1, [pc, #40]	; (8000bf8 <USART_Init+0x1e4>)
 8000bce:	4613      	mov	r3, r2
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	4413      	add	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	3304      	adds	r3, #4
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f7ff fe9f 	bl	8000920 <USART_SetBaudRate>
	for(;counter<NUMBER_OF_CONFIGURED_UART;counter++)
 8000be2:	7afb      	ldrb	r3, [r7, #11]
 8000be4:	3301      	adds	r3, #1
 8000be6:	72fb      	strb	r3, [r7, #11]
 8000be8:	7afb      	ldrb	r3, [r7, #11]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f43f af1a 	beq.w	8000a24 <USART_Init+0x10>

		//USART2->USART_BRR = 0x1117;

	}
}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000068 	.word	0x20000068
 8000bfc:	20000050 	.word	0x20000050

08000c00 <Uart_IntControl>:



// not finished
void Uart_IntControl(uint8_t USART_ID , uint8_t IntSource , uint8_t State)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	71bb      	strb	r3, [r7, #6]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	717b      	strb	r3, [r7, #5]
	USART_RegDef_t *pUSARTx = USART_Arr[USART_ID];
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <Uart_IntControl+0x74>)
 8000c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1a:	60fb      	str	r3, [r7, #12]

	switch(State)
 8000c1c:	797b      	ldrb	r3, [r7, #5]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d011      	beq.n	8000c46 <Uart_IntControl+0x46>
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d000      	beq.n	8000c28 <Uart_IntControl+0x28>
		//Implement the code to disable interrupt for IntSource
		pUSARTx->USART_CR1 &= ~( One_bit_shift << IntSource);
		break;
	}

}
 8000c26:	e01f      	b.n	8000c68 <Uart_IntControl+0x68>
		pUSARTx->USART_CR1 |= ( One_bit_shift << IntSource);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	899b      	ldrh	r3, [r3, #12]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	79bb      	ldrb	r3, [r7, #6]
 8000c32:	2101      	movs	r1, #1
 8000c34:	fa01 f303 	lsl.w	r3, r1, r3
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	b21b      	sxth	r3, r3
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	819a      	strh	r2, [r3, #12]
		break;
 8000c44:	e010      	b.n	8000c68 <Uart_IntControl+0x68>
		pUSARTx->USART_CR1 &= ~( One_bit_shift << IntSource);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	899b      	ldrh	r3, [r3, #12]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	79bb      	ldrb	r3, [r7, #6]
 8000c50:	2101      	movs	r1, #1
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	819a      	strh	r2, [r3, #12]
		break;
 8000c66:	bf00      	nop
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	20000050 	.word	0x20000050

08000c78 <UART_IRQConfig>:


void UART_IRQConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	460a      	mov	r2, r1
 8000c82:	71fb      	strb	r3, [r7, #7]
 8000c84:	4613      	mov	r3, r2
 8000c86:	71bb      	strb	r3, [r7, #6]

	uint8_t ISER_Num=0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	73fb      	strb	r3, [r7, #15]
	uint8_t IRQActualNumber=0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73bb      	strb	r3, [r7, #14]


	ISER_Num = IRQNumber / 32;
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	73fb      	strb	r3, [r7, #15]
	IRQActualNumber = IRQNumber % 32;
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 031f 	and.w	r3, r3, #31
 8000c9c:	73bb      	strb	r3, [r7, #14]


	switch(EnorDi)
 8000c9e:	79bb      	ldrb	r3, [r7, #6]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d00e      	beq.n	8000cc2 <UART_IRQConfig+0x4a>
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d000      	beq.n	8000caa <UART_IRQConfig+0x32>
		break;
	case DISABLE:
		NVIC_ICER_Base_Addr[ISER_Num] = 1<< IRQActualNumber;
		break;
	}
}
 8000ca8:	e015      	b.n	8000cd6 <UART_IRQConfig+0x5e>
		NVIC_ISER_Base_Addr[ISER_Num] = 1<< IRQActualNumber;
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000cb2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000cb6:	7bba      	ldrb	r2, [r7, #14]
 8000cb8:	2101      	movs	r1, #1
 8000cba:	fa01 f202 	lsl.w	r2, r1, r2
 8000cbe:	601a      	str	r2, [r3, #0]
		break;
 8000cc0:	e009      	b.n	8000cd6 <UART_IRQConfig+0x5e>
		NVIC_ICER_Base_Addr[ISER_Num] = 1<< IRQActualNumber;
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	009a      	lsls	r2, r3, #2
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <UART_IRQConfig+0x6c>)
 8000cc8:	4413      	add	r3, r2
 8000cca:	7bba      	ldrb	r2, [r7, #14]
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd2:	601a      	str	r2, [r3, #0]
		break;
 8000cd4:	bf00      	nop
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000e180 	.word	0xe000e180

08000ce8 <USART2_IRQHandler>:

/*************************** USART1 IRQ handler *****************************/


void USART2_IRQHandler(void)
{
 8000ce8:	b598      	push	{r3, r4, r7, lr}
 8000cea:	af00      	add	r7, sp, #0
//	volatile uint8_t Local_SR=0;
//	Local_SR=USART_Arr[USART2_]->USART_SR;

	GPIO_WriteOutputPin((uint8_t)61 , GPIO_PIN_SET);   // check if whether the code jump to ISR or not
 8000cec:	2101      	movs	r1, #1
 8000cee:	203d      	movs	r0, #61	; 0x3d
 8000cf0:	f7ff fc58 	bl	80005a4 <GPIO_WriteOutputPin>

	/* Handling RX */
	if ( USART_GetFlagStatus(USART2_,USART_FLAG_RXNE))
 8000cf4:	2105      	movs	r1, #5
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f7ff fdf0 	bl	80008dc <USART_GetFlagStatus>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d03b      	beq.n	8000d7a <USART2_IRQHandler+0x92>
	{
		/*receive data in the current empty position*/
		Uart_IntRxDetails[0].Data[Uart_IntRxDetails[0].InsertIndex]=USART_Arr[USART2_]->USART_DR;
 8000d02:	4b32      	ldr	r3, [pc, #200]	; (8000dcc <USART2_IRQHandler+0xe4>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4b31      	ldr	r3, [pc, #196]	; (8000dd0 <USART2_IRQHandler+0xe8>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	889b      	ldrh	r3, [r3, #4]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <USART2_IRQHandler+0xe4>)
 8000d16:	440b      	add	r3, r1
 8000d18:	709a      	strb	r2, [r3, #2]

		if(Uart_IntRxDetails[0].CurrentSize!=UART_RX_BUFFER_SIZE)
 8000d1a:	4b2c      	ldr	r3, [pc, #176]	; (8000dcc <USART2_IRQHandler+0xe4>)
 8000d1c:	7b1b      	ldrb	r3, [r3, #12]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b0a      	cmp	r3, #10
 8000d22:	d007      	beq.n	8000d34 <USART2_IRQHandler+0x4c>
		{
			++Uart_IntRxDetails[0].CurrentSize;
 8000d24:	4b29      	ldr	r3, [pc, #164]	; (8000dcc <USART2_IRQHandler+0xe4>)
 8000d26:	7b1b      	ldrb	r3, [r3, #12]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <USART2_IRQHandler+0xe4>)
 8000d30:	731a      	strb	r2, [r3, #12]
 8000d32:	e010      	b.n	8000d56 <USART2_IRQHandler+0x6e>
		}
		else
		{
			/*if the current element overwritten then take the next element*/
			Uart_IntRxDetails[0].CurrentIndex=(Uart_IntRxDetails[0].CurrentIndex+1)%(UART_RX_BUFFER_SIZE-1);
 8000d34:	4b25      	ldr	r3, [pc, #148]	; (8000dcc <USART2_IRQHandler+0xe4>)
 8000d36:	785b      	ldrb	r3, [r3, #1]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <USART2_IRQHandler+0xec>)
 8000d3e:	fb83 1302 	smull	r1, r3, r3, r2
 8000d42:	1059      	asrs	r1, r3, #1
 8000d44:	17d3      	asrs	r3, r2, #31
 8000d46:	1ac9      	subs	r1, r1, r3
 8000d48:	460b      	mov	r3, r1
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	440b      	add	r3, r1
 8000d4e:	1ad1      	subs	r1, r2, r3
 8000d50:	b2ca      	uxtb	r2, r1
 8000d52:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <USART2_IRQHandler+0xe4>)
 8000d54:	705a      	strb	r2, [r3, #1]
		}
		/*update the insert index*/
		Uart_IntRxDetails[0].InsertIndex=(Uart_IntRxDetails[0].InsertIndex+1)%(UART_RX_BUFFER_SIZE-1);
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <USART2_IRQHandler+0xe4>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	1c5a      	adds	r2, r3, #1
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <USART2_IRQHandler+0xec>)
 8000d60:	fb83 1302 	smull	r1, r3, r3, r2
 8000d64:	1059      	asrs	r1, r3, #1
 8000d66:	17d3      	asrs	r3, r2, #31
 8000d68:	1ac9      	subs	r1, r1, r3
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	440b      	add	r3, r1
 8000d70:	1ad1      	subs	r1, r2, r3
 8000d72:	b2ca      	uxtb	r2, r1
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <USART2_IRQHandler+0xe4>)
 8000d76:	701a      	strb	r2, [r3, #0]
		}




}
 8000d78:	e026      	b.n	8000dc8 <USART2_IRQHandler+0xe0>
	else if(USART_GetFlagStatus(USART2_,USART_FLAG_TXE))
 8000d7a:	2107      	movs	r1, #7
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f7ff fdad 	bl	80008dc <USART_GetFlagStatus>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d01f      	beq.n	8000dc8 <USART2_IRQHandler+0xe0>
			if(Uart_IntTxeDetails[0].CurrentIndex<Uart_IntTxeDetails[0].DataSizeCounter)
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <USART2_IRQHandler+0xf0>)
 8000d8a:	891b      	ldrh	r3, [r3, #8]
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <USART2_IRQHandler+0xf0>)
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d20f      	bcs.n	8000db8 <USART2_IRQHandler+0xd0>
				USART_Arr[USART2_]->USART_DR=Uart_IntTxeDetails[0].Data[Uart_IntTxeDetails[0].CurrentIndex++];
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <USART2_IRQHandler+0xe8>)
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <USART2_IRQHandler+0xf0>)
 8000d9e:	6859      	ldr	r1, [r3, #4]
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <USART2_IRQHandler+0xf0>)
 8000da2:	891b      	ldrh	r3, [r3, #8]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	1c58      	adds	r0, r3, #1
 8000da8:	b284      	uxth	r4, r0
 8000daa:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <USART2_IRQHandler+0xf0>)
 8000dac:	8104      	strh	r4, [r0, #8]
 8000dae:	440b      	add	r3, r1
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	8093      	strh	r3, [r2, #4]
}
 8000db6:	e007      	b.n	8000dc8 <USART2_IRQHandler+0xe0>
				Uart_IntControl(USART2_ , UART_INT_TXE , DISABLE);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2107      	movs	r1, #7
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f7ff ff1f 	bl	8000c00 <Uart_IntControl>
				Uart_IntTxeDetails[0].Flag = UART_TXE_NOT_BUSY;
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <USART2_IRQHandler+0xf0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	729a      	strb	r2, [r3, #10]
}
 8000dc8:	bf00      	nop
 8000dca:	bd98      	pop	{r3, r4, r7, pc}
 8000dcc:	2000009c 	.word	0x2000009c
 8000dd0:	20000050 	.word	0x20000050
 8000dd4:	38e38e39 	.word	0x38e38e39
 8000dd8:	20000090 	.word	0x20000090

08000ddc <main>:

char RX_Buffer[20];
char TX_Buffer[30] = "SENDING WITH INTERRUPT";

int main(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	//int i = 0;

		GPIO_Init();
 8000de0:	f7ff fa12 	bl	8000208 <GPIO_Init>

		USART_Init();
 8000de4:	f7ff fe16 	bl	8000a14 <USART_Init>

		Uart_IntControl(USART2_, UART_INT_RXNE, ENABLE);
 8000de8:	2201      	movs	r2, #1
 8000dea:	2105      	movs	r1, #5
 8000dec:	2001      	movs	r0, #1
 8000dee:	f7ff ff07 	bl	8000c00 <Uart_IntControl>
		UART_IRQConfig(38, ENABLE);  // 38 for USART2_IRQ enable uart2 interrupt in NVIC
 8000df2:	2101      	movs	r1, #1
 8000df4:	2026      	movs	r0, #38	; 0x26
 8000df6:	f7ff ff3f 	bl	8000c78 <UART_IRQConfig>


	while (1)
 8000dfa:	e7fe      	b.n	8000dfa <main+0x1e>

08000dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e02:	e003      	b.n	8000e0c <LoopCopyDataInit>

08000e04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e0a:	3104      	adds	r1, #4

08000e0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e0c:	480b      	ldr	r0, [pc, #44]	; (8000e3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e14:	d3f6      	bcc.n	8000e04 <CopyDataInit>
  ldr  r2, =_sbss
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e18:	e002      	b.n	8000e20 <LoopFillZerobss>

08000e1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e1c:	f842 3b04 	str.w	r3, [r2], #4

08000e20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e24:	d3f9      	bcc.n	8000e1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e26:	f000 f841 	bl	8000eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f000 f8f1 	bl	8001010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2e:	f7ff ffd5 	bl	8000ddc <main>
  bx  lr    
 8000e32:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e34:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e38:	08001078 	.word	0x08001078
  ldr  r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e40:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000e44:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000e48:	200000ac 	.word	0x200000ac

08000e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC_IRQHandler>

08000e4e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <HardFault_Handler+0x4>

08000e62 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <MemManage_Handler+0x4>

08000e68 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <BusFault_Handler+0x4>

08000e6e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <UsageFault_Handler+0x4>

08000e74 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb0:	4a16      	ldr	r2, [pc, #88]	; (8000f0c <SystemInit+0x60>)
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <SystemInit+0x60>)
 8000eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ec0:	4a13      	ldr	r2, [pc, #76]	; (8000f10 <SystemInit+0x64>)
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <SystemInit+0x64>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <SystemInit+0x64>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ed2:	4a0f      	ldr	r2, [pc, #60]	; (8000f10 <SystemInit+0x64>)
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <SystemInit+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ee0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <SystemInit+0x64>)
 8000ee4:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <SystemInit+0x68>)
 8000ee6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ee8:	4a09      	ldr	r2, [pc, #36]	; (8000f10 <SystemInit+0x64>)
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <SystemInit+0x64>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <SystemInit+0x64>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000efa:	f000 f80d 	bl	8000f18 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000efe:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <SystemInit+0x60>)
 8000f00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f04:	609a      	str	r2, [r3, #8]
#endif
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000ed00 	.word	0xe000ed00
 8000f10:	40023800 	.word	0x40023800
 8000f14:	24003010 	.word	0x24003010

08000f18 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	2300      	movs	r3, #0
 8000f24:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000f26:	4a36      	ldr	r2, [pc, #216]	; (8001000 <SetSysClock+0xe8>)
 8000f28:	4b35      	ldr	r3, [pc, #212]	; (8001000 <SetSysClock+0xe8>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f30:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000f32:	4b33      	ldr	r3, [pc, #204]	; (8001000 <SetSysClock+0xe8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d103      	bne.n	8000f50 <SetSysClock+0x38>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000f4e:	d1f0      	bne.n	8000f32 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000f50:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <SetSysClock+0xe8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d002      	beq.n	8000f62 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	e001      	b.n	8000f66 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d142      	bne.n	8000ff2 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000f6c:	4a24      	ldr	r2, [pc, #144]	; (8001000 <SetSysClock+0xe8>)
 8000f6e:	4b24      	ldr	r3, [pc, #144]	; (8001000 <SetSysClock+0xe8>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f76:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;
 8000f78:	4a22      	ldr	r2, [pc, #136]	; (8001004 <SetSysClock+0xec>)
 8000f7a:	4b22      	ldr	r3, [pc, #136]	; (8001004 <SetSysClock+0xec>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f82:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000f84:	4a1e      	ldr	r2, [pc, #120]	; (8001000 <SetSysClock+0xe8>)
 8000f86:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <SetSysClock+0xe8>)
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000f8c:	4a1c      	ldr	r2, [pc, #112]	; (8001000 <SetSysClock+0xe8>)
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <SetSysClock+0xe8>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f96:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000f98:	4a19      	ldr	r2, [pc, #100]	; (8001000 <SetSysClock+0xe8>)
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <SetSysClock+0xe8>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000fa2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <SetSysClock+0xe8>)
 8000fa6:	4a18      	ldr	r2, [pc, #96]	; (8001008 <SetSysClock+0xf0>)
 8000fa8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000faa:	4a15      	ldr	r2, [pc, #84]	; (8001000 <SetSysClock+0xe8>)
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <SetSysClock+0xe8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fb4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000fb6:	bf00      	nop
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <SetSysClock+0xe8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0f9      	beq.n	8000fb8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <SetSysClock+0xf4>)
 8000fc6:	f240 6205 	movw	r2, #1541	; 0x605
 8000fca:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000fcc:	4a0c      	ldr	r2, [pc, #48]	; (8001000 <SetSysClock+0xe8>)
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <SetSysClock+0xe8>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f023 0303 	bic.w	r3, r3, #3
 8000fd6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000fd8:	4a09      	ldr	r2, [pc, #36]	; (8001000 <SetSysClock+0xe8>)
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <SetSysClock+0xe8>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000fe4:	bf00      	nop
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <SetSysClock+0xe8>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 030c 	and.w	r3, r3, #12
 8000fee:	2b08      	cmp	r3, #8
 8000ff0:	d1f9      	bne.n	8000fe6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40007000 	.word	0x40007000
 8001008:	07405408 	.word	0x07405408
 800100c:	40023c00 	.word	0x40023c00

08001010 <__libc_init_array>:
 8001010:	b570      	push	{r4, r5, r6, lr}
 8001012:	4e0d      	ldr	r6, [pc, #52]	; (8001048 <__libc_init_array+0x38>)
 8001014:	4c0d      	ldr	r4, [pc, #52]	; (800104c <__libc_init_array+0x3c>)
 8001016:	1ba4      	subs	r4, r4, r6
 8001018:	10a4      	asrs	r4, r4, #2
 800101a:	2500      	movs	r5, #0
 800101c:	42a5      	cmp	r5, r4
 800101e:	d109      	bne.n	8001034 <__libc_init_array+0x24>
 8001020:	4e0b      	ldr	r6, [pc, #44]	; (8001050 <__libc_init_array+0x40>)
 8001022:	4c0c      	ldr	r4, [pc, #48]	; (8001054 <__libc_init_array+0x44>)
 8001024:	f000 f818 	bl	8001058 <_init>
 8001028:	1ba4      	subs	r4, r4, r6
 800102a:	10a4      	asrs	r4, r4, #2
 800102c:	2500      	movs	r5, #0
 800102e:	42a5      	cmp	r5, r4
 8001030:	d105      	bne.n	800103e <__libc_init_array+0x2e>
 8001032:	bd70      	pop	{r4, r5, r6, pc}
 8001034:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001038:	4798      	blx	r3
 800103a:	3501      	adds	r5, #1
 800103c:	e7ee      	b.n	800101c <__libc_init_array+0xc>
 800103e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001042:	4798      	blx	r3
 8001044:	3501      	adds	r5, #1
 8001046:	e7f2      	b.n	800102e <__libc_init_array+0x1e>
 8001048:	08001070 	.word	0x08001070
 800104c:	08001070 	.word	0x08001070
 8001050:	08001070 	.word	0x08001070
 8001054:	08001074 	.word	0x08001074

08001058 <_init>:
 8001058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105a:	bf00      	nop
 800105c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800105e:	bc08      	pop	{r3}
 8001060:	469e      	mov	lr, r3
 8001062:	4770      	bx	lr

08001064 <_fini>:
 8001064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001066:	bf00      	nop
 8001068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800106a:	bc08      	pop	{r3}
 800106c:	469e      	mov	lr, r3
 800106e:	4770      	bx	lr
