
GP_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004584  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08004710  08004710  00014710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004940  08004940  00014940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004944  08004944  00014944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000320  20000000  08004948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020320  2**0
                  CONTENTS
  7 .bss          000001b8  20000320  20000320  00020320  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200004d8  200004d8  00020320  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020320  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007ecf  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001916  00000000  00000000  0002821f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005a0  00000000  00000000  00029b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000478  00000000  00000000  0002a0d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002a9a  00000000  00000000  0002a550  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001ea4  00000000  00000000  0002cfea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002ee8e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001af8  00000000  00000000  0002ef0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000320 	.word	0x20000320
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046f4 	.word	0x080046f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000324 	.word	0x20000324
 80001c4:	080046f4 	.word	0x080046f4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <CAN1_TX_IRQHandler>:


/*----------------------------------------------------------------------------
CAN transmit interrupt handler
*----------------------------------------------------------------------------*/
void CAN1_TX_IRQHandler (void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

	if (CAN1->TSR & (CAN_TSR_RQCP0)) 						  // request completed mbx 0
 8000afc:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <CAN1_TX_IRQHandler+0x90>)
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d00e      	beq.n	8000b26 <CAN1_TX_IRQHandler+0x2e>
	{
		CAN1->TSR |= (CAN_TSR_RQCP0);                    // reset request complete mbx 0
 8000b08:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <CAN1_TX_IRQHandler+0x90>)
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <CAN1_TX_IRQHandler+0x90>)
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6093      	str	r3, [r2, #8]
		CAN1->IER &= ~(CAN_IER_TMEIE);                   // disable  TME interrupt
 8000b14:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <CAN1_TX_IRQHandler+0x90>)
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <CAN1_TX_IRQHandler+0x90>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	f023 0301 	bic.w	r3, r3, #1
 8000b1e:	6153      	str	r3, [r2, #20]
		CAN_TxRdy[0] = 1;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <CAN1_TX_IRQHandler+0x94>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
	}
	if (CAN1->TSR & (CAN_TSR_RQCP1)) 						// request completed mbx 1
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <CAN1_TX_IRQHandler+0x90>)
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d00e      	beq.n	8000b50 <CAN1_TX_IRQHandler+0x58>
	{
		CAN1->TSR |= (CAN_TSR_RQCP1);                    // reset request complete mbx 1
 8000b32:	4a15      	ldr	r2, [pc, #84]	; (8000b88 <CAN1_TX_IRQHandler+0x90>)
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <CAN1_TX_IRQHandler+0x90>)
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3c:	6093      	str	r3, [r2, #8]
		CAN1->IER &= ~(CAN_IER_TMEIE);                   // disable  TME interrupt
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <CAN1_TX_IRQHandler+0x90>)
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <CAN1_TX_IRQHandler+0x90>)
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	f023 0301 	bic.w	r3, r3, #1
 8000b48:	6153      	str	r3, [r2, #20]
		CAN_TxRdy[1] = 1;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <CAN1_TX_IRQHandler+0x94>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	705a      	strb	r2, [r3, #1]

	}


	if (CAN1->TSR & (CAN_TSR_RQCP2)) 					 // request completed mbx 2
 8000b50:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <CAN1_TX_IRQHandler+0x90>)
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d00e      	beq.n	8000b7a <CAN1_TX_IRQHandler+0x82>
	{
		CAN1->TSR |= (CAN_TSR_RQCP2);                    // reset request complete mbx 2
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <CAN1_TX_IRQHandler+0x90>)
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <CAN1_TX_IRQHandler+0x90>)
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b66:	6093      	str	r3, [r2, #8]
		CAN1->IER &= ~(CAN_IER_TMEIE);                   // disable  TME interrupt
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <CAN1_TX_IRQHandler+0x90>)
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <CAN1_TX_IRQHandler+0x90>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	f023 0301 	bic.w	r3, r3, #1
 8000b72:	6153      	str	r3, [r2, #20]
		CAN_TxRdy[2] = 1;
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <CAN1_TX_IRQHandler+0x94>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	709a      	strb	r2, [r3, #2]

	}
	GPIO_WriteOutputPin(BLUE_LED,1);
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	203f      	movs	r0, #63	; 0x3f
 8000b7e:	f000 fb0b 	bl	8001198 <GPIO_WriteOutputPin>

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40006400 	.word	0x40006400
 8000b8c:	2000033c 	.word	0x2000033c

08000b90 <CAN1_RX0_IRQHandler>:

/*----------------------------------------------------------------------------
  CAN receive interrupt handler
 *----------------------------------------------------------------------------*/
void CAN1_RX0_IRQHandler (void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0

	if (CAN1->RF0R & CAN__Msg_Pending)
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <CAN1_RX0_IRQHandler+0x1c>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	f003 0303 	and.w	r3, r3, #3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d002      	beq.n	8000ba6 <CAN1_RX0_IRQHandler+0x16>
		                     // read the message
		//CAN_RxMsg.u8ActiveFlag = 1;
		//CAN_RxRdy = 1;                                // set receive flag

	//	GPIO_WriteOutputPin(BLUE_LED,1);
		RX_ptr();
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <CAN1_RX0_IRQHandler+0x20>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4798      	blx	r3
		//while(1);


	}
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40006400 	.word	0x40006400
 8000bb0:	200004a4 	.word	0x200004a4

08000bb4 <CAN_RX_Callback>:
	//GPIO_WriteOutputPin(BLUE_LED,1);

	GPIO_WriteOutputPin(GREEN_LED,1);
}
void CAN_RX_Callback(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
	int i;
	uint8_t first_byte;
	//GPIO_WriteOutputPin(BLUE_LED,1);
	switch (RXbuffer[0])
 8000bba:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <CAN_RX_Callback+0x94>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	d028      	beq.n	8000c14 <CAN_RX_Callback+0x60>
 8000bc2:	2b05      	cmp	r3, #5
 8000bc4:	d02e      	beq.n	8000c24 <CAN_RX_Callback+0x70>
 8000bc6:	2b03      	cmp	r3, #3
 8000bc8:	d000      	beq.n	8000bcc <CAN_RX_Callback+0x18>
		first_byte = RXbuffer[1];
		Set_Temp(first_byte);
		break;

	default:
		break;
 8000bca:	e033      	b.n	8000c34 <CAN_RX_Callback+0x80>
		for (i = 0; i < 4; i++)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	e00b      	b.n	8000bea <CAN_RX_Callback+0x36>
			Seat_reading[i] = RXbuffer[i+1];
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <CAN_RX_Callback+0x94>)
 8000bd8:	5cd1      	ldrb	r1, [r2, r3]
 8000bda:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <CAN_RX_Callback+0x98>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4413      	add	r3, r2
 8000be0:	460a      	mov	r2, r1
 8000be2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 4; i++)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3301      	adds	r3, #1
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	ddf0      	ble.n	8000bd2 <CAN_RX_Callback+0x1e>
		for (i = 4; i < 8; i++)
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	e007      	b.n	8000c06 <CAN_RX_Callback+0x52>
		Seat_reading[i] = 0;
 8000bf6:	4a15      	ldr	r2, [pc, #84]	; (8000c4c <CAN_RX_Callback+0x98>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
		for (i = 4; i < 8; i++)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3301      	adds	r3, #1
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b07      	cmp	r3, #7
 8000c0a:	ddf4      	ble.n	8000bf6 <CAN_RX_Callback+0x42>
		Set_Seat_Sate(Seat_reading);
 8000c0c:	480f      	ldr	r0, [pc, #60]	; (8000c4c <CAN_RX_Callback+0x98>)
 8000c0e:	f000 fb5b 	bl	80012c8 <Set_Seat_Sate>
		break;
 8000c12:	e00f      	b.n	8000c34 <CAN_RX_Callback+0x80>
		first_byte = RXbuffer[1];
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <CAN_RX_Callback+0x94>)
 8000c16:	785b      	ldrb	r3, [r3, #1]
 8000c18:	70fb      	strb	r3, [r7, #3]
		Set_Ignition_Sate(first_byte);
 8000c1a:	78fb      	ldrb	r3, [r7, #3]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 fb71 	bl	8001304 <Set_Ignition_Sate>
		break;
 8000c22:	e007      	b.n	8000c34 <CAN_RX_Callback+0x80>
		first_byte = RXbuffer[1];
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <CAN_RX_Callback+0x94>)
 8000c26:	785b      	ldrb	r3, [r3, #1]
 8000c28:	70fb      	strb	r3, [r7, #3]
		Set_Temp(first_byte);
 8000c2a:	78fb      	ldrb	r3, [r7, #3]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 fb3b 	bl	80012a8 <Set_Temp>
		break;
 8000c32:	bf00      	nop
	}
	Uart_ReceiveDataASync(USART4_, RXbuffer, STM_packet_size);
 8000c34:	2208      	movs	r2, #8
 8000c36:	4904      	ldr	r1, [pc, #16]	; (8000c48 <CAN_RX_Callback+0x94>)
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f001 fa27 	bl	800208c <Uart_ReceiveDataASync>

	//GPIO_WriteOutputPin(BLUE_LED,1);

}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000488 	.word	0x20000488
 8000c4c:	20000490 	.word	0x20000490

08000c50 <CanWriteBuzzer>:
#include "UART_Driver.h"
#include "UART_Cfg.h"
#include "UART_Lcfg.h"

void CanWriteBuzzer(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
	uint8_t TXbuffer[8]={0};
 8000c56:	463b      	mov	r3, r7
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
	TXbuffer[0] = Buzzer_ID;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	703b      	strb	r3, [r7, #0]
	Uart_SendDataAsync(USART4_, TXbuffer, 8);
 8000c62:	463b      	mov	r3, r7
 8000c64:	2208      	movs	r2, #8
 8000c66:	4619      	mov	r1, r3
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f001 f9c1 	bl	8001ff0 <Uart_SendDataAsync>

};
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <Communication_Manager_RX_Notification>:
#define LENGTH               12
#define One_Byte               1


void Communication_Manager_RX_Notification(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	switch (RX_Buffer[0])
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <Communication_Manager_RX_Notification+0x44>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d00a      	beq.n	8000c9a <Communication_Manager_RX_Notification+0x22>
 8000c84:	2b03      	cmp	r3, #3
 8000c86:	d00e      	beq.n	8000ca6 <Communication_Manager_RX_Notification+0x2e>
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d000      	beq.n	8000c8e <Communication_Manager_RX_Notification+0x16>
		Jetson_Set_API_State (&RX_Buffer[1]);

		break;

	default:
		break;
 8000c8c:	e00f      	b.n	8000cae <Communication_Manager_RX_Notification+0x36>
		CAM_SetMaskState (RX_Buffer[1]);
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <Communication_Manager_RX_Notification+0x44>)
 8000c90:	785b      	ldrb	r3, [r3, #1]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fab8 	bl	8001208 <CAM_SetMaskState>
		break;
 8000c98:	e009      	b.n	8000cae <Communication_Manager_RX_Notification+0x36>
		Jetson_Set_COVID_State (RX_Buffer[1]);
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <Communication_Manager_RX_Notification+0x44>)
 8000c9c:	785b      	ldrb	r3, [r3, #1]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 fac8 	bl	8001234 <Jetson_Set_COVID_State>
		break;
 8000ca4:	e003      	b.n	8000cae <Communication_Manager_RX_Notification+0x36>
		Jetson_Set_API_State (&RX_Buffer[1]);
 8000ca6:	4806      	ldr	r0, [pc, #24]	; (8000cc0 <Communication_Manager_RX_Notification+0x48>)
 8000ca8:	f000 fada 	bl	8001260 <Jetson_Set_API_State>
		break;
 8000cac:	bf00      	nop
	}
	Uart_ReceiveDataASync(USART2_, RX_Buffer, JETSON_PACKET_LENGTH);
 8000cae:	2208      	movs	r2, #8
 8000cb0:	4902      	ldr	r1, [pc, #8]	; (8000cbc <Communication_Manager_RX_Notification+0x44>)
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f001 f9ea 	bl	800208c <Uart_ReceiveDataASync>
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000474 	.word	0x20000474
 8000cc0:	20000475 	.word	0x20000475

08000cc4 <Communication_Handling>:

void Communication_Handling(uint8_t GPIO_ID_SIGNAL)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
	static uint8_t GPIO_Counter[3];
	switch (GPIO_STATE[GPIO_ID_SIGNAL])
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	4a1e      	ldr	r2, [pc, #120]	; (8000d4c <Communication_Handling+0x88>)
 8000cd2:	5cd3      	ldrb	r3, [r2, r3]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d017      	beq.n	8000d08 <Communication_Handling+0x44>
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d000      	beq.n	8000cde <Communication_Handling+0x1a>


	break;

	default:
		break;
 8000cdc:	e032      	b.n	8000d44 <Communication_Handling+0x80>
		GPIO_WriteOutputPin(GPIO_PIN_CONFIG[GPIO_ID_SIGNAL],0);
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	; (8000d50 <Communication_Handling+0x8c>)
 8000ce2:	5cd3      	ldrb	r3, [r2, r3]
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 fa56 	bl	8001198 <GPIO_WriteOutputPin>
		if( Request_State[GPIO_ID_SIGNAL] == Request_DONE)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	4a19      	ldr	r2, [pc, #100]	; (8000d54 <Communication_Handling+0x90>)
 8000cf0:	5cd3      	ldrb	r3, [r2, r3]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d125      	bne.n	8000d42 <Communication_Handling+0x7e>
			Request_State[GPIO_ID_SIGNAL] =  Request_NOT_DONE;
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	4a16      	ldr	r2, [pc, #88]	; (8000d54 <Communication_Handling+0x90>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	54d1      	strb	r1, [r2, r3]
			GPIO_STATE[GPIO_ID_SIGNAL] = HIGH;
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <Communication_Handling+0x88>)
 8000d02:	2100      	movs	r1, #0
 8000d04:	54d1      	strb	r1, [r2, r3]
		break;
 8000d06:	e01c      	b.n	8000d42 <Communication_Handling+0x7e>
		GPIO_WriteOutputPin(GPIO_PIN_CONFIG[GPIO_ID_SIGNAL],1);
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	4a11      	ldr	r2, [pc, #68]	; (8000d50 <Communication_Handling+0x8c>)
 8000d0c:	5cd3      	ldrb	r3, [r2, r3]
 8000d0e:	2101      	movs	r1, #1
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 fa41 	bl	8001198 <GPIO_WriteOutputPin>
		if (GPIO_Counter[GPIO_ID_SIGNAL] < MAX_COUNT){
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	4a0f      	ldr	r2, [pc, #60]	; (8000d58 <Communication_Handling+0x94>)
 8000d1a:	5cd3      	ldrb	r3, [r2, r3]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d807      	bhi.n	8000d30 <Communication_Handling+0x6c>
			GPIO_Counter[GPIO_ID_SIGNAL]++;
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <Communication_Handling+0x94>)
 8000d24:	5cd2      	ldrb	r2, [r2, r3]
 8000d26:	3201      	adds	r2, #1
 8000d28:	b2d1      	uxtb	r1, r2
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <Communication_Handling+0x94>)
 8000d2c:	54d1      	strb	r1, [r2, r3]
	break;
 8000d2e:	e009      	b.n	8000d44 <Communication_Handling+0x80>
			GPIO_Counter[GPIO_ID_SIGNAL] = 0;
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <Communication_Handling+0x94>)
 8000d34:	2100      	movs	r1, #0
 8000d36:	54d1      	strb	r1, [r2, r3]
			GPIO_STATE[GPIO_ID_SIGNAL] = LOW;
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <Communication_Handling+0x88>)
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	54d1      	strb	r1, [r2, r3]
	break;
 8000d40:	e000      	b.n	8000d44 <Communication_Handling+0x80>
		break;
 8000d42:	bf00      	nop
}
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	2000049c 	.word	0x2000049c
 8000d50:	08004710 	.word	0x08004710
 8000d54:	20000498 	.word	0x20000498
 8000d58:	20000340 	.word	0x20000340

08000d5c <Jetson_Req_Mask_Detection>:

void Jetson_Req_Mask_Detection (void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
	Request_State[0] = Request_DONE;
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <Jetson_Req_Mask_Detection+0x14>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	701a      	strb	r2, [r3, #0]
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	20000498 	.word	0x20000498

08000d74 <Jetson_Req_COVID_Detection>:

void Jetson_Req_COVID_Detection (void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
	Request_State[1] = Request_DONE;
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <Jetson_Req_COVID_Detection+0x14>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	705a      	strb	r2, [r3, #1]
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	20000498 	.word	0x20000498

08000d8c <Jetson_Req_API_Detection>:

void Jetson_Req_API_Detection (void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
	Request_State[2] = Request_DONE;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <Jetson_Req_API_Detection+0x14>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	709a      	strb	r2, [r3, #2]
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	20000498 	.word	0x20000498

08000da4 <Communication_Manage>:

void Communication_Manage(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	Communication_Handling(0);
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff ff8b 	bl	8000cc4 <Communication_Handling>
	Communication_Handling(1);
 8000dae:	2001      	movs	r0, #1
 8000db0:	f7ff ff88 	bl	8000cc4 <Communication_Handling>
	Communication_Handling(2);
 8000db4:	2002      	movs	r0, #2
 8000db6:	f7ff ff85 	bl	8000cc4 <Communication_Handling>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <GPIO_PeriClockControl>:

static void GPIO_PeriClockControl(uint8_t PORT_num,uint8_t EnorDi);

//void GPIO_PeriClockControl(GPIO_regdef_t *pGPIOx,uint8_t EnorDi)
static void GPIO_PeriClockControl(uint8_t PORT_num,uint8_t EnCLK)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	460a      	mov	r2, r1
 8000dca:	71fb      	strb	r3, [r7, #7]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	71bb      	strb	r3, [r7, #6]
	//	GPIO_PCLK_EN &=~ (One_bit_shift << PORT_num);
	//	GPIO_PCLK_EN |= (EnCLK << PORT_num);

	GPIO_PCLK_EN =(GPIO_PCLK_EN & ~(One_bit_shift << PORT_num))
 8000dd0:	480a      	ldr	r0, [pc, #40]	; (8000dfc <GPIO_PeriClockControl+0x3c>)
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <GPIO_PeriClockControl+0x3c>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	79fa      	ldrb	r2, [r7, #7]
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fa01 f202 	lsl.w	r2, r1, r2
 8000dde:	43d2      	mvns	r2, r2
 8000de0:	4013      	ands	r3, r2
			|(EnCLK << PORT_num);
 8000de2:	79b9      	ldrb	r1, [r7, #6]
 8000de4:	79fa      	ldrb	r2, [r7, #7]
 8000de6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dea:	4313      	orrs	r3, r2
	GPIO_PCLK_EN =(GPIO_PCLK_EN & ~(One_bit_shift << PORT_num))
 8000dec:	6303      	str	r3, [r0, #48]	; 0x30
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800

08000e00 <GPIO_Init>:
return     -
Note       =
 */

void GPIO_Init(void)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0

	uint8_t counter=0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	73fb      	strb	r3, [r7, #15]
	uint8_t PortNumber=0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73bb      	strb	r3, [r7, #14]
	uint8_t PinActualNumber=0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	737b      	strb	r3, [r7, #13]


	for( counter=0; counter<NUMBER_OF_CONFIGURED_PINS; counter++ )
 8000e12:	2300      	movs	r3, #0
 8000e14:	73fb      	strb	r3, [r7, #15]
 8000e16:	e1af      	b.n	8001178 <GPIO_Init+0x378>
	{
		PortNumber = ( GPIO_PinConfigArray[counter].GPIO_PinNumber) / PORT_NUMBER_OF_BITS_IN_REG;
 8000e18:	7bfa      	ldrb	r2, [r7, #15]
 8000e1a:	496f      	ldr	r1, [pc, #444]	; (8000fd8 <GPIO_Init+0x1d8>)
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	4413      	add	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	440b      	add	r3, r1
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	091b      	lsrs	r3, r3, #4
 8000e2a:	73bb      	strb	r3, [r7, #14]
		PinActualNumber = (GPIO_PinConfigArray[counter].GPIO_PinNumber) % PORT_NUMBER_OF_BITS_IN_REG;
 8000e2c:	7bfa      	ldrb	r2, [r7, #15]
 8000e2e:	496a      	ldr	r1, [pc, #424]	; (8000fd8 <GPIO_Init+0x1d8>)
 8000e30:	4613      	mov	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4413      	add	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	440b      	add	r3, r1
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	f003 030f 	and.w	r3, r3, #15
 8000e40:	737b      	strb	r3, [r7, #13]
		uint32_t temp = 0;  //temp register
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
		//enable the peripheral clock
		GPIO_PeriClockControl(PortNumber, ENABLE);
 8000e46:	7bbb      	ldrb	r3, [r7, #14]
 8000e48:	2101      	movs	r1, #1
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ffb8 	bl	8000dc0 <GPIO_PeriClockControl>
		GPIO_regdef_t *pGPIOx = GPIO_Arr[PortNumber];
 8000e50:	7bbb      	ldrb	r3, [r7, #14]
 8000e52:	4a62      	ldr	r2, [pc, #392]	; (8000fdc <GPIO_Init+0x1dc>)
 8000e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e58:	607b      	str	r3, [r7, #4]
		//configure the mode of gpio pin
		if(GPIO_PinConfigArray[counter].GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000e5a:	7bfa      	ldrb	r2, [r7, #15]
 8000e5c:	495e      	ldr	r1, [pc, #376]	; (8000fd8 <GPIO_Init+0x1d8>)
 8000e5e:	4613      	mov	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4413      	add	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	440b      	add	r3, r1
 8000e68:	3301      	adds	r3, #1
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d821      	bhi.n	8000eb4 <GPIO_Init+0xb4>
		{
			//			temp = (GPIO_PinConfigArray[counter].GPIO_PinMode << (Two_bits_shift * PinActualNumber) );
			//			pGPIOx->MODER &= ~( (Two_bits_shift *Two_consecutive_bits_mask_by_HEX)<< PinActualNumber );
			//			pGPIOx->MODER |= temp;
			//			temp = 0;
			temp = pGPIOx->MODER;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	60bb      	str	r3, [r7, #8]
			temp &= ~(0x3UL << (PinActualNumber * 2u));
 8000e76:	7b7b      	ldrb	r3, [r7, #13]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
			temp |= ((GPIO_PinConfigArray[counter].GPIO_PinMode & 0x00000003U) << (PinActualNumber * 2u));
 8000e88:	7bfa      	ldrb	r2, [r7, #15]
 8000e8a:	4953      	ldr	r1, [pc, #332]	; (8000fd8 <GPIO_Init+0x1d8>)
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	440b      	add	r3, r1
 8000e96:	3301      	adds	r3, #1
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	f003 0203 	and.w	r2, r3, #3
 8000e9e:	7b7b      	ldrb	r3, [r7, #13]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
			pGPIOx->MODER = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	e0bf      	b.n	8001034 <GPIO_Init+0x234>
		}
		else
		{
			//this part for interrupt mode
			if(GPIO_PinConfigArray[counter].GPIO_PinMode == GPIO_MODE_IT_FT)
 8000eb4:	7bfa      	ldrb	r2, [r7, #15]
 8000eb6:	4948      	ldr	r1, [pc, #288]	; (8000fd8 <GPIO_Init+0x1d8>)
 8000eb8:	4613      	mov	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	440b      	add	r3, r1
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	d113      	bne.n	8000ef2 <GPIO_Init+0xf2>
			{
				//configure the FTSR
				EXTI->FTSR |= ( One_bit_shift << PinActualNumber);
 8000eca:	4945      	ldr	r1, [pc, #276]	; (8000fe0 <GPIO_Init+0x1e0>)
 8000ecc:	4b44      	ldr	r3, [pc, #272]	; (8000fe0 <GPIO_Init+0x1e0>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	7b7a      	ldrb	r2, [r7, #13]
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	60cb      	str	r3, [r1, #12]
				//clear the corresponding RTSR bit
				EXTI->RTSR &= ~(One_bit_mask << PinActualNumber);
 8000edc:	4940      	ldr	r1, [pc, #256]	; (8000fe0 <GPIO_Init+0x1e0>)
 8000ede:	4b40      	ldr	r3, [pc, #256]	; (8000fe0 <GPIO_Init+0x1e0>)
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	7b7a      	ldrb	r2, [r7, #13]
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eea:	43d2      	mvns	r2, r2
 8000eec:	4013      	ands	r3, r2
 8000eee:	608b      	str	r3, [r1, #8]
 8000ef0:	e03b      	b.n	8000f6a <GPIO_Init+0x16a>
			}
			else if(GPIO_PinConfigArray[counter].GPIO_PinMode == GPIO_MODE_IT_RT)
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	4938      	ldr	r1, [pc, #224]	; (8000fd8 <GPIO_Init+0x1d8>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	4413      	add	r3, r2
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	440b      	add	r3, r1
 8000f00:	3301      	adds	r3, #1
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b05      	cmp	r3, #5
 8000f06:	d113      	bne.n	8000f30 <GPIO_Init+0x130>
			{
				//configure the RTSR
				EXTI->RTSR |= ( One_bit_shift << PinActualNumber);
 8000f08:	4935      	ldr	r1, [pc, #212]	; (8000fe0 <GPIO_Init+0x1e0>)
 8000f0a:	4b35      	ldr	r3, [pc, #212]	; (8000fe0 <GPIO_Init+0x1e0>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	7b7a      	ldrb	r2, [r7, #13]
 8000f10:	2001      	movs	r0, #1
 8000f12:	fa00 f202 	lsl.w	r2, r0, r2
 8000f16:	4313      	orrs	r3, r2
 8000f18:	608b      	str	r3, [r1, #8]
				//clear the correspnding RISR bit
				EXTI->FTSR &= ~( One_bit_mask << PinActualNumber);
 8000f1a:	4931      	ldr	r1, [pc, #196]	; (8000fe0 <GPIO_Init+0x1e0>)
 8000f1c:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <GPIO_Init+0x1e0>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	7b7a      	ldrb	r2, [r7, #13]
 8000f22:	2001      	movs	r0, #1
 8000f24:	fa00 f202 	lsl.w	r2, r0, r2
 8000f28:	43d2      	mvns	r2, r2
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	60cb      	str	r3, [r1, #12]
 8000f2e:	e01c      	b.n	8000f6a <GPIO_Init+0x16a>
			}
			else if(GPIO_PinConfigArray[counter].GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000f30:	7bfa      	ldrb	r2, [r7, #15]
 8000f32:	4929      	ldr	r1, [pc, #164]	; (8000fd8 <GPIO_Init+0x1d8>)
 8000f34:	4613      	mov	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4413      	add	r3, r2
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3301      	adds	r3, #1
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d111      	bne.n	8000f6a <GPIO_Init+0x16a>
			{
				//configure the FTSR and RTSR
				EXTI->RTSR |= ( One_bit_shift << PinActualNumber);
 8000f46:	4926      	ldr	r1, [pc, #152]	; (8000fe0 <GPIO_Init+0x1e0>)
 8000f48:	4b25      	ldr	r3, [pc, #148]	; (8000fe0 <GPIO_Init+0x1e0>)
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	7b7a      	ldrb	r2, [r7, #13]
 8000f4e:	2001      	movs	r0, #1
 8000f50:	fa00 f202 	lsl.w	r2, r0, r2
 8000f54:	4313      	orrs	r3, r2
 8000f56:	608b      	str	r3, [r1, #8]

				EXTI->FTSR |= ( One_bit_shift << PinActualNumber);
 8000f58:	4921      	ldr	r1, [pc, #132]	; (8000fe0 <GPIO_Init+0x1e0>)
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <GPIO_Init+0x1e0>)
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	7b7a      	ldrb	r2, [r7, #13]
 8000f60:	2001      	movs	r0, #1
 8000f62:	fa00 f202 	lsl.w	r2, r0, r2
 8000f66:	4313      	orrs	r3, r2
 8000f68:	60cb      	str	r3, [r1, #12]
			}

			//configure the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = PinActualNumber / Four_Pins_for_SYSCFG_EXTICR;
 8000f6a:	7b7b      	ldrb	r3, [r7, #13]
 8000f6c:	089b      	lsrs	r3, r3, #2
 8000f6e:	70fb      	strb	r3, [r7, #3]
			uint8_t temp2 = PinActualNumber % Four_Pins_for_SYSCFG_EXTICR;
 8000f70:	7b7b      	ldrb	r3, [r7, #13]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	70bb      	strb	r3, [r7, #2]
			uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOx);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a1a      	ldr	r2, [pc, #104]	; (8000fe4 <GPIO_Init+0x1e4>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d037      	beq.n	8000ff0 <GPIO_Init+0x1f0>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <GPIO_Init+0x1e8>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d025      	beq.n	8000fd4 <GPIO_Init+0x1d4>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a18      	ldr	r2, [pc, #96]	; (8000fec <GPIO_Init+0x1ec>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d01f      	beq.n	8000fd0 <GPIO_Init+0x1d0>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <GPIO_Init+0x1e8>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d019      	beq.n	8000fcc <GPIO_Init+0x1cc>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <GPIO_Init+0x1e4>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d013      	beq.n	8000fc8 <GPIO_Init+0x1c8>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a11      	ldr	r2, [pc, #68]	; (8000fe8 <GPIO_Init+0x1e8>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d00d      	beq.n	8000fc4 <GPIO_Init+0x1c4>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <GPIO_Init+0x1e4>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d007      	beq.n	8000fc0 <GPIO_Init+0x1c0>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <GPIO_Init+0x1e8>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d101      	bne.n	8000fbc <GPIO_Init+0x1bc>
 8000fb8:	2307      	movs	r3, #7
 8000fba:	e01a      	b.n	8000ff2 <GPIO_Init+0x1f2>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e018      	b.n	8000ff2 <GPIO_Init+0x1f2>
 8000fc0:	2306      	movs	r3, #6
 8000fc2:	e016      	b.n	8000ff2 <GPIO_Init+0x1f2>
 8000fc4:	2305      	movs	r3, #5
 8000fc6:	e014      	b.n	8000ff2 <GPIO_Init+0x1f2>
 8000fc8:	2304      	movs	r3, #4
 8000fca:	e012      	b.n	8000ff2 <GPIO_Init+0x1f2>
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e010      	b.n	8000ff2 <GPIO_Init+0x1f2>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	e00e      	b.n	8000ff2 <GPIO_Init+0x1f2>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e00c      	b.n	8000ff2 <GPIO_Init+0x1f2>
 8000fd8:	20000038 	.word	0x20000038
 8000fdc:	20000014 	.word	0x20000014
 8000fe0:	40013c00 	.word	0x40013c00
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	40020400 	.word	0x40020400
 8000fec:	40020800 	.word	0x40020800
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	707b      	strb	r3, [r7, #1]
			SYSCFG->EXTICR[temp1] = portcode << (temp2 * Four_bits_shift);
 8000ff4:	4864      	ldr	r0, [pc, #400]	; (8001188 <GPIO_Init+0x388>)
 8000ff6:	78fb      	ldrb	r3, [r7, #3]
 8000ff8:	7879      	ldrb	r1, [r7, #1]
 8000ffa:	78ba      	ldrb	r2, [r7, #2]
 8000ffc:	0092      	lsls	r2, r2, #2
 8000ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8001002:	3302      	adds	r3, #2
 8001004:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			SYSCFG_PCLK_EN;
 8001008:	4a60      	ldr	r2, [pc, #384]	; (800118c <GPIO_Init+0x38c>)
 800100a:	4b60      	ldr	r3, [pc, #384]	; (800118c <GPIO_Init+0x38c>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001012:	6453      	str	r3, [r2, #68]	; 0x44
			//enable the exti interrupt delivery using IMR
			EXTI->IMR |= (One_bit_shift << GPIO_PinConfigArray[counter]	.GPIO_PinNumber);
 8001014:	485e      	ldr	r0, [pc, #376]	; (8001190 <GPIO_Init+0x390>)
 8001016:	4b5e      	ldr	r3, [pc, #376]	; (8001190 <GPIO_Init+0x390>)
 8001018:	6819      	ldr	r1, [r3, #0]
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	4c5d      	ldr	r4, [pc, #372]	; (8001194 <GPIO_Init+0x394>)
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4423      	add	r3, r4
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	2301      	movs	r3, #1
 800102e:	4093      	lsls	r3, r2
 8001030:	430b      	orrs	r3, r1
 8001032:	6003      	str	r3, [r0, #0]
		}

		temp = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]

		//configure the speed
		temp = pGPIOx->OSPEEDR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	60bb      	str	r3, [r7, #8]
		temp &= ~(0x3UL << (PinActualNumber * 2u));
 800103e:	7b7b      	ldrb	r3, [r7, #13]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
		temp |= ((GPIO_PinConfigArray[counter].GPIO_PinSpeed & 0x00000003U) << (PinActualNumber * 2u));
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	4950      	ldr	r1, [pc, #320]	; (8001194 <GPIO_Init+0x394>)
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	440b      	add	r3, r1
 800105e:	3302      	adds	r3, #2
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	f003 0203 	and.w	r2, r3, #3
 8001066:	7b7b      	ldrb	r3, [r7, #13]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	4313      	orrs	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
		pGPIOx->OSPEEDR = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	609a      	str	r2, [r3, #8]

		//configure the pupd setting
		temp = pGPIOx->PUPDR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	60bb      	str	r3, [r7, #8]
		temp &= ~(0x3UL << (PinActualNumber * 2u));
 8001080:	7b7b      	ldrb	r3, [r7, #13]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	4013      	ands	r3, r2
 8001090:	60bb      	str	r3, [r7, #8]
		temp |= ((GPIO_PinConfigArray[counter].GPIO_PinPuPdControl & 0x00000003U) << (PinActualNumber * 2u));
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	493f      	ldr	r1, [pc, #252]	; (8001194 <GPIO_Init+0x394>)
 8001096:	4613      	mov	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4413      	add	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	440b      	add	r3, r1
 80010a0:	3303      	adds	r3, #3
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	f003 0203 	and.w	r2, r3, #3
 80010a8:	7b7b      	ldrb	r3, [r7, #13]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	60bb      	str	r3, [r7, #8]
		pGPIOx->PUPDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	60da      	str	r2, [r3, #12]

		//configure the optype
		temp = pGPIOx->OTYPER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	60bb      	str	r3, [r7, #8]
		temp &= ~(0x1UL << (PinActualNumber * 1u));
 80010c2:	7b7b      	ldrb	r3, [r7, #13]
 80010c4:	2201      	movs	r2, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	4013      	ands	r3, r2
 80010d0:	60bb      	str	r3, [r7, #8]
		temp |= ((GPIO_PinConfigArray[counter].GPIO_PinOPType & 0x00000001U) << (PinActualNumber * 1u));
 80010d2:	7bfa      	ldrb	r2, [r7, #15]
 80010d4:	492f      	ldr	r1, [pc, #188]	; (8001194 <GPIO_Init+0x394>)
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	440b      	add	r3, r1
 80010e0:	3304      	adds	r3, #4
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	f003 0201 	and.w	r2, r3, #1
 80010e8:	7b7b      	ldrb	r3, [r7, #13]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
		pGPIOx->OTYPER = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	605a      	str	r2, [r3, #4]

		//configure the alternate functionality
		if(GPIO_PinConfigArray[counter].GPIO_PinMode == GPIO_MODE_ALTFN)
 80010fa:	7bfa      	ldrb	r2, [r7, #15]
 80010fc:	4925      	ldr	r1, [pc, #148]	; (8001194 <GPIO_Init+0x394>)
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	440b      	add	r3, r1
 8001108:	3301      	adds	r3, #1
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d130      	bne.n	8001172 <GPIO_Init+0x372>
		{
			//alternate function
			temp = pGPIOx->AFR[PinActualNumber >> 3u];
 8001110:	7b7b      	ldrb	r3, [r7, #13]
 8001112:	08db      	lsrs	r3, r3, #3
 8001114:	b2db      	uxtb	r3, r3
 8001116:	461a      	mov	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3208      	adds	r2, #8
 800111c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001120:	60bb      	str	r3, [r7, #8]
			temp &= ~(0xFu << ((PinActualNumber & 0x07u) * 4u));
 8001122:	7b7b      	ldrb	r3, [r7, #13]
 8001124:	f003 0307 	and.w	r3, r3, #7
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	220f      	movs	r2, #15
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
			temp |= ((GPIO_PinConfigArray[counter].GPIO_PinAltFunMode ) << ((PinActualNumber & 0x07u) * 4u));
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	4916      	ldr	r1, [pc, #88]	; (8001194 <GPIO_Init+0x394>)
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	440b      	add	r3, r1
 8001146:	3305      	adds	r3, #5
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	7b7b      	ldrb	r3, [r7, #13]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	461a      	mov	r2, r3
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	4313      	orrs	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
			pGPIOx->AFR[PinActualNumber >> 3u] = temp;
 8001160:	7b7b      	ldrb	r3, [r7, #13]
 8001162:	08db      	lsrs	r3, r3, #3
 8001164:	b2db      	uxtb	r3, r3
 8001166:	461a      	mov	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3208      	adds	r2, #8
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for( counter=0; counter<NUMBER_OF_CONFIGURED_PINS; counter++ )
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	3301      	adds	r3, #1
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	2b08      	cmp	r3, #8
 800117c:	f67f ae4c 	bls.w	8000e18 <GPIO_Init+0x18>
		}

	}
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bd90      	pop	{r4, r7, pc}
 8001188:	40013800 	.word	0x40013800
 800118c:	40023800 	.word	0x40023800
 8001190:	40013c00 	.word	0x40013c00
 8001194:	20000038 	.word	0x20000038

08001198 <GPIO_WriteOutputPin>:
Note       =
 */

//void GPIO_WriteOutputPin(GPIO_regdef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
void GPIO_WriteOutputPin(uint8_t Pin, uint8_t Value)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	460a      	mov	r2, r1
 80011a2:	71fb      	strb	r3, [r7, #7]
 80011a4:	4613      	mov	r3, r2
 80011a6:	71bb      	strb	r3, [r7, #6]

	uint8_t PortNumber=0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	73fb      	strb	r3, [r7, #15]
	uint8_t PinActualNumber=0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73bb      	strb	r3, [r7, #14]

	PortNumber = ((Pin / PORT_NUMBER_OF_BITS_IN_REG));
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	091b      	lsrs	r3, r3, #4
 80011b4:	73fb      	strb	r3, [r7, #15]
	PinActualNumber = (Pin % PORT_NUMBER_OF_BITS_IN_REG);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f003 030f 	and.w	r3, r3, #15
 80011bc:	73bb      	strb	r3, [r7, #14]

	GPIO_regdef_t *pGPIOx = GPIO_Arr[PortNumber];     // new
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	4a10      	ldr	r2, [pc, #64]	; (8001204 <GPIO_WriteOutputPin+0x6c>)
 80011c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c6:	60bb      	str	r3, [r7, #8]

	if(Value == GPIO_PIN_SET)
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d109      	bne.n	80011e2 <GPIO_WriteOutputPin+0x4a>
	{
		//write 1 to the output data register at the bit field coreesponding to the pin
		pGPIOx->ODR |= ( One_bit_shift << PinActualNumber);
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	7bba      	ldrb	r2, [r7, #14]
 80011d4:	2101      	movs	r1, #1
 80011d6:	fa01 f202 	lsl.w	r2, r1, r2
 80011da:	431a      	orrs	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	615a      	str	r2, [r3, #20]
	{
		//write 0
		pGPIOx->ODR &= ~( One_bit_mask << PinActualNumber);
	}

}
 80011e0:	e009      	b.n	80011f6 <GPIO_WriteOutputPin+0x5e>
		pGPIOx->ODR &= ~( One_bit_mask << PinActualNumber);
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	7bba      	ldrb	r2, [r7, #14]
 80011e8:	2101      	movs	r1, #1
 80011ea:	fa01 f202 	lsl.w	r2, r1, r2
 80011ee:	43d2      	mvns	r2, r2
 80011f0:	401a      	ands	r2, r3
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	615a      	str	r2, [r3, #20]
}
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000014 	.word	0x20000014

08001208 <CAM_SetMaskState>:
{
	TFT_Rx_pressed = 1;
}

void CAM_SetMaskState (uint8_t MASK_Received_)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	MASK_received = 1;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <CAM_SetMaskState+0x24>)
 8001214:	2201      	movs	r2, #1
 8001216:	701a      	strb	r2, [r3, #0]

	Mask_detection_Data = MASK_Received_;
 8001218:	4a05      	ldr	r2, [pc, #20]	; (8001230 <CAM_SetMaskState+0x28>)
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	7013      	strb	r3, [r2, #0]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	200000a2 	.word	0x200000a2
 8001230:	20000347 	.word	0x20000347

08001234 <Jetson_Set_COVID_State>:

void Jetson_Set_COVID_State (uint8_t COVID_Received_)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	COVID_received = 1;
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <Jetson_Set_COVID_State+0x24>)
 8001240:	2201      	movs	r2, #1
 8001242:	701a      	strb	r2, [r3, #0]

	COVID_detection_Data = COVID_Received_;
 8001244:	4a05      	ldr	r2, [pc, #20]	; (800125c <Jetson_Set_COVID_State+0x28>)
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	7013      	strb	r3, [r2, #0]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	200004a0 	.word	0x200004a0
 800125c:	20000346 	.word	0x20000346

08001260 <Jetson_Set_API_State>:

void Jetson_Set_API_State (uint8_t *API_Received_ptr)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

	API_received = 1;//{USART3_Tx,   GPIO_MODE_ALTFN,  GPIO_SPEED_MEDIUM,  GPIO_NO_PUPD,  GPIO_TYPE_PP, 7},
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <Jetson_Set_API_State+0x40>)
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
	//{USART3_Rx,   GPIO_MODE_ALTFN,  GPIO_SPEED_MEDIUM,  GPIO_NO_PUPD,  GPIO_TYPE_PP, 7},
	uint8_t i = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	73fb      	strb	r3, [r7, #15]
	do{
		API_Adress_txt[i]= API_Received_ptr[i];
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	440a      	add	r2, r1
 800127a:	7811      	ldrb	r1, [r2, #0]
 800127c:	4a09      	ldr	r2, [pc, #36]	; (80012a4 <Jetson_Set_API_State+0x44>)
 800127e:	54d1      	strb	r1, [r2, r3]
		i++;
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	3301      	adds	r3, #1
 8001284:	73fb      	strb	r3, [r7, #15]
	}while(API_Received_ptr[i] != '\0' );
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1ef      	bne.n	8001272 <Jetson_Set_API_State+0x12>

}
 8001292:	bf00      	nop
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	200004a1 	.word	0x200004a1
 80012a4:	20000070 	.word	0x20000070

080012a8 <Set_Temp>:

void Set_Temp(uint8_t Tempratur_Received_)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
	Set_temp_var = Tempratur_Received_;
 80012b2:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <Set_Temp+0x1c>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	7013      	strb	r3, [r2, #0]

}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	2000034c 	.word	0x2000034c

080012c8 <Set_Seat_Sate>:

void Set_Seat_Sate(uint8_t *Seat_Received_)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	int i;
	for( i=0; i<4; i++ )
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	e00b      	b.n	80012ee <Set_Seat_Sate+0x26>
	{
		Seat_[i] = Seat_Received_[i];
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	4413      	add	r3, r2
 80012dc:	7819      	ldrb	r1, [r3, #0]
 80012de:	4a08      	ldr	r2, [pc, #32]	; (8001300 <Set_Seat_Sate+0x38>)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4413      	add	r3, r2
 80012e4:	460a      	mov	r2, r1
 80012e6:	701a      	strb	r2, [r3, #0]
	for( i=0; i<4; i++ )
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3301      	adds	r3, #1
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	ddf0      	ble.n	80012d6 <Set_Seat_Sate+0xe>
	}
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	20000348 	.word	0x20000348

08001304 <Set_Ignition_Sate>:

void Set_Ignition_Sate(uint8_t Ignition_Received_)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
	Ignition_Signal = Ignition_Received_;
 800130e:	4a04      	ldr	r2, [pc, #16]	; (8001320 <Set_Ignition_Sate+0x1c>)
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	7013      	strb	r3, [r2, #0]

}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	20000345 	.word	0x20000345

08001324 <ReadSeats_State>:


static MASK_REQUEST_STATE_t ReadSeats_State(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

	if ( (Seat_[0] ==0) && (Seat_[1] ==0) && (Seat_[2] ==0) && (Seat_[3] == 0) )// check if all seats is empty
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <ReadSeats_State+0x40>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10f      	bne.n	8001350 <ReadSeats_State+0x2c>
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <ReadSeats_State+0x40>)
 8001332:	785b      	ldrb	r3, [r3, #1]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10b      	bne.n	8001350 <ReadSeats_State+0x2c>
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <ReadSeats_State+0x40>)
 800133a:	789b      	ldrb	r3, [r3, #2]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d107      	bne.n	8001350 <ReadSeats_State+0x2c>
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <ReadSeats_State+0x40>)
 8001342:	78db      	ldrb	r3, [r3, #3]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d103      	bne.n	8001350 <ReadSeats_State+0x2c>
	{
		Seat_returnValue = Mode_NOT_OK;
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <ReadSeats_State+0x44>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
 800134e:	e002      	b.n	8001356 <ReadSeats_State+0x32>
	}

	else
	{

		Seat_returnValue = Mode_OK;
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <ReadSeats_State+0x44>)
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
	}
	return Seat_returnValue;
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <ReadSeats_State+0x44>)
 8001358:	781b      	ldrb	r3, [r3, #0]
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	20000348 	.word	0x20000348
 8001368:	20000343 	.word	0x20000343

0800136c <Mode_Manager>:

void Mode_Manager(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	switch( state )
 8001370:	4b95      	ldr	r3, [pc, #596]	; (80015c8 <Mode_Manager+0x25c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b07      	cmp	r3, #7
 8001376:	f200 8124 	bhi.w	80015c2 <Mode_Manager+0x256>
 800137a:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <Mode_Manager+0x14>)
 800137c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001380:	080013a1 	.word	0x080013a1
 8001384:	080013a9 	.word	0x080013a9
 8001388:	080013df 	.word	0x080013df
 800138c:	0800144f 	.word	0x0800144f
 8001390:	080014bf 	.word	0x080014bf
 8001394:	0800150b 	.word	0x0800150b
 8001398:	08001549 	.word	0x08001549
 800139c:	0800158f 	.word	0x0800158f
	{
	case Mode_IDLE:
		//		TFT_Request_Writing( REG , 0x03 , 0x0000);
		state = Background;
 80013a0:	4b89      	ldr	r3, [pc, #548]	; (80015c8 <Mode_Manager+0x25c>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]

		break;
 80013a6:	e10c      	b.n	80015c2 <Mode_Manager+0x256>

	case Background :
		Seat_returnValue = ReadSeats_State(); // return array of 4 seats
 80013a8:	f7ff ffbc 	bl	8001324 <ReadSeats_State>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b86      	ldr	r3, [pc, #536]	; (80015cc <Mode_Manager+0x260>)
 80013b2:	701a      	strb	r2, [r3, #0]


		if (  Seat_returnValue == Mode_NOT_OK )
 80013b4:	4b85      	ldr	r3, [pc, #532]	; (80015cc <Mode_Manager+0x260>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d103      	bne.n	80013c4 <Mode_Manager+0x58>
		{
			//	TFT_Request_Writing( REG , 0x03 , 0x0000);

			state = Background;
 80013bc:	4b82      	ldr	r3, [pc, #520]	; (80015c8 <Mode_Manager+0x25c>)
 80013be:	2201      	movs	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]

			Jetson_Req_Mask_Detection ();

			state = HandlingActions;
		}
		break;
 80013c2:	e0fe      	b.n	80015c2 <Mode_Manager+0x256>
			TFT_Request_Writing( REG , 0x03 , 0x0001);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2103      	movs	r1, #3
 80013c8:	2002      	movs	r0, #2
 80013ca:	f000 fa25 	bl	8001818 <TFT_Request_Writing>
			Jetson_Req_COVID_Detection();
 80013ce:	f7ff fcd1 	bl	8000d74 <Jetson_Req_COVID_Detection>
			Jetson_Req_Mask_Detection ();
 80013d2:	f7ff fcc3 	bl	8000d5c <Jetson_Req_Mask_Detection>
			state = HandlingActions;
 80013d6:	4b7c      	ldr	r3, [pc, #496]	; (80015c8 <Mode_Manager+0x25c>)
 80013d8:	2202      	movs	r2, #2
 80013da:	701a      	strb	r2, [r3, #0]
		break;
 80013dc:	e0f1      	b.n	80015c2 <Mode_Manager+0x256>

	case HandlingActions :


		Seat_returnValue = ReadSeats_State(); // return array of 4 seats
 80013de:	f7ff ffa1 	bl	8001324 <ReadSeats_State>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b79      	ldr	r3, [pc, #484]	; (80015cc <Mode_Manager+0x260>)
 80013e8:	701a      	strb	r2, [r3, #0]

		if (  Seat_returnValue == Mode_NOT_OK )
 80013ea:	4b78      	ldr	r3, [pc, #480]	; (80015cc <Mode_Manager+0x260>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d108      	bne.n	8001404 <Mode_Manager+0x98>
		{
			TFT_Request_Writing( REG , 0x03 , 0x0000);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2103      	movs	r1, #3
 80013f6:	2002      	movs	r0, #2
 80013f8:	f000 fa0e 	bl	8001818 <TFT_Request_Writing>

			state = Background;
 80013fc:	4b72      	ldr	r3, [pc, #456]	; (80015c8 <Mode_Manager+0x25c>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
			}

		}


		break;
 8001402:	e0d7      	b.n	80015b4 <Mode_Manager+0x248>
			if (Mask_detection_Data == 0)
 8001404:	4b72      	ldr	r3, [pc, #456]	; (80015d0 <Mode_Manager+0x264>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d10b      	bne.n	8001424 <Mode_Manager+0xb8>
				TFT_Request_Writing( REG , 0x03 , 0x0002);
 800140c:	2202      	movs	r2, #2
 800140e:	2103      	movs	r1, #3
 8001410:	2002      	movs	r0, #2
 8001412:	f000 fa01 	bl	8001818 <TFT_Request_Writing>
				if( Ignition_Signal == 1)
 8001416:	4b6f      	ldr	r3, [pc, #444]	; (80015d4 <Mode_Manager+0x268>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d107      	bne.n	800142e <Mode_Manager+0xc2>
					CanWriteBuzzer();
 800141e:	f7ff fc17 	bl	8000c50 <CanWriteBuzzer>
 8001422:	e004      	b.n	800142e <Mode_Manager+0xc2>
				TFT_Request_Writing( REG , 0x03 , 0x0000);
 8001424:	2200      	movs	r2, #0
 8001426:	2103      	movs	r1, #3
 8001428:	2002      	movs	r0, #2
 800142a:	f000 f9f5 	bl	8001818 <TFT_Request_Writing>
			state = HandlingState;
 800142e:	4b66      	ldr	r3, [pc, #408]	; (80015c8 <Mode_Manager+0x25c>)
 8001430:	2203      	movs	r2, #3
 8001432:	701a      	strb	r2, [r3, #0]
			if( ( Ignition_Signal == 1 ) && (Mask_detection_Data == 0))
 8001434:	4b67      	ldr	r3, [pc, #412]	; (80015d4 <Mode_Manager+0x268>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	f040 80bb 	bne.w	80015b4 <Mode_Manager+0x248>
 800143e:	4b64      	ldr	r3, [pc, #400]	; (80015d0 <Mode_Manager+0x264>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f040 80b6 	bne.w	80015b4 <Mode_Manager+0x248>
				CanWriteBuzzer();
 8001448:	f7ff fc02 	bl	8000c50 <CanWriteBuzzer>
		break;
 800144c:	e0b2      	b.n	80015b4 <Mode_Manager+0x248>

	case HandlingState :

		Seat_returnValue = ReadSeats_State(); // return array of 4 seats
 800144e:	f7ff ff69 	bl	8001324 <ReadSeats_State>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	4b5d      	ldr	r3, [pc, #372]	; (80015cc <Mode_Manager+0x260>)
 8001458:	701a      	strb	r2, [r3, #0]


		if (  Seat_returnValue == Mode_NOT_OK )
 800145a:	4b5c      	ldr	r3, [pc, #368]	; (80015cc <Mode_Manager+0x260>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d108      	bne.n	8001474 <Mode_Manager+0x108>
		{
			TFT_Request_Writing( REG , 0x03 , 0x0000);
 8001462:	2200      	movs	r2, #0
 8001464:	2103      	movs	r1, #3
 8001466:	2002      	movs	r0, #2
 8001468:	f000 f9d6 	bl	8001818 <TFT_Request_Writing>

			state = Background;
 800146c:	4b56      	ldr	r3, [pc, #344]	; (80015c8 <Mode_Manager+0x25c>)
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
 8001472:	e009      	b.n	8001488 <Mode_Manager+0x11c>
		}
		else

		{
			if( ( Ignition_Signal == 1 ) && (Mask_detection_Data == 0))
 8001474:	4b57      	ldr	r3, [pc, #348]	; (80015d4 <Mode_Manager+0x268>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d105      	bne.n	8001488 <Mode_Manager+0x11c>
 800147c:	4b54      	ldr	r3, [pc, #336]	; (80015d0 <Mode_Manager+0x264>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <Mode_Manager+0x11c>
			{
				CanWriteBuzzer();
 8001484:	f7ff fbe4 	bl	8000c50 <CanWriteBuzzer>
			}

		}
		if ( ( ( COVID_received == 1 ) && ( COVID_detection_Data == 1 ) ) || ( Set_temp_var > 39) )
 8001488:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <Mode_Manager+0x26c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d103      	bne.n	8001498 <Mode_Manager+0x12c>
 8001490:	4b52      	ldr	r3, [pc, #328]	; (80015dc <Mode_Manager+0x270>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d004      	beq.n	80014a2 <Mode_Manager+0x136>
 8001498:	4b51      	ldr	r3, [pc, #324]	; (80015e0 <Mode_Manager+0x274>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b27      	cmp	r3, #39	; 0x27
 800149e:	f240 808b 	bls.w	80015b8 <Mode_Manager+0x24c>
		{
			COVID_received =0;
 80014a2:	4b4d      	ldr	r3, [pc, #308]	; (80015d8 <Mode_Manager+0x26c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]

			{
				TFT_Request_Writing( REG , 0x03 , 0x0003);
 80014a8:	2203      	movs	r2, #3
 80014aa:	2103      	movs	r1, #3
 80014ac:	2002      	movs	r0, #2
 80014ae:	f000 f9b3 	bl	8001818 <TFT_Request_Writing>
				Jetson_Req_API_Detection();
 80014b2:	f7ff fc6b 	bl	8000d8c <Jetson_Req_API_Detection>
				state = HandlingCOVID;
 80014b6:	4b44      	ldr	r3, [pc, #272]	; (80015c8 <Mode_Manager+0x25c>)
 80014b8:	2204      	movs	r2, #4
 80014ba:	701a      	strb	r2, [r3, #0]
			}

		}
		break;
 80014bc:	e07c      	b.n	80015b8 <Mode_Manager+0x24c>

	case HandlingCOVID:

		Seat_returnValue = ReadSeats_State(); // return array of 4 seats
 80014be:	f7ff ff31 	bl	8001324 <ReadSeats_State>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b41      	ldr	r3, [pc, #260]	; (80015cc <Mode_Manager+0x260>)
 80014c8:	701a      	strb	r2, [r3, #0]


		if (  Seat_returnValue == Mode_NOT_OK )
 80014ca:	4b40      	ldr	r3, [pc, #256]	; (80015cc <Mode_Manager+0x260>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d108      	bne.n	80014e4 <Mode_Manager+0x178>
		{
			TFT_Request_Writing( REG , 0x03 , 0x0000);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2103      	movs	r1, #3
 80014d6:	2002      	movs	r0, #2
 80014d8:	f000 f99e 	bl	8001818 <TFT_Request_Writing>

			state = Background;
 80014dc:	4b3a      	ldr	r3, [pc, #232]	; (80015c8 <Mode_Manager+0x25c>)
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
				state = HandlingAdress;


			}
		}
		break;
 80014e2:	e06b      	b.n	80015bc <Mode_Manager+0x250>
			API_received = 1;
 80014e4:	4b3f      	ldr	r3, [pc, #252]	; (80015e4 <Mode_Manager+0x278>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]
			if (API_received == 1)
 80014ea:	4b3e      	ldr	r3, [pc, #248]	; (80015e4 <Mode_Manager+0x278>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d164      	bne.n	80015bc <Mode_Manager+0x250>
				API_received = 0;
 80014f2:	4b3c      	ldr	r3, [pc, #240]	; (80015e4 <Mode_Manager+0x278>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
				TFT_Request_Writing( REG , 0x03 , 0x0006); //API Screean
 80014f8:	2206      	movs	r2, #6
 80014fa:	2103      	movs	r1, #3
 80014fc:	2002      	movs	r0, #2
 80014fe:	f000 f98b 	bl	8001818 <TFT_Request_Writing>
				state = HandlingAdress;
 8001502:	4b31      	ldr	r3, [pc, #196]	; (80015c8 <Mode_Manager+0x25c>)
 8001504:	2205      	movs	r2, #5
 8001506:	701a      	strb	r2, [r3, #0]
		break;
 8001508:	e058      	b.n	80015bc <Mode_Manager+0x250>
	case HandlingAdress:

		Seat_returnValue = ReadSeats_State(); // return array of 4 seats
 800150a:	f7ff ff0b 	bl	8001324 <ReadSeats_State>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	4b2e      	ldr	r3, [pc, #184]	; (80015cc <Mode_Manager+0x260>)
 8001514:	701a      	strb	r2, [r3, #0]


		if (  Seat_returnValue == Mode_NOT_OK )
 8001516:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <Mode_Manager+0x260>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d108      	bne.n	8001530 <Mode_Manager+0x1c4>
		{
			TFT_Request_Writing( REG , 0x03 , 0x0000);
 800151e:	2200      	movs	r2, #0
 8001520:	2103      	movs	r1, #3
 8001522:	2002      	movs	r0, #2
 8001524:	f000 f978 	bl	8001818 <TFT_Request_Writing>

			state = Background;
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <Mode_Manager+0x25c>)
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
			TFT_Request_Reading();

			state = Waiting_Press;
		}

		break;
 800152e:	e048      	b.n	80015c2 <Mode_Manager+0x256>
			TFT_Display_Text_Req(API_Adress_txt , 0x0111 , txt_length);
 8001530:	2232      	movs	r2, #50	; 0x32
 8001532:	f240 1111 	movw	r1, #273	; 0x111
 8001536:	482c      	ldr	r0, [pc, #176]	; (80015e8 <Mode_Manager+0x27c>)
 8001538:	f000 f9d0 	bl	80018dc <TFT_Display_Text_Req>
			TFT_Request_Reading();
 800153c:	f000 f9c2 	bl	80018c4 <TFT_Request_Reading>
			state = Waiting_Press;
 8001540:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <Mode_Manager+0x25c>)
 8001542:	2206      	movs	r2, #6
 8001544:	701a      	strb	r2, [r3, #0]
		break;
 8001546:	e03c      	b.n	80015c2 <Mode_Manager+0x256>
	case Waiting_Press:

		Seat_returnValue = ReadSeats_State(); // return array of 4 seats
 8001548:	f7ff feec 	bl	8001324 <ReadSeats_State>
 800154c:	4603      	mov	r3, r0
 800154e:	461a      	mov	r2, r3
 8001550:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <Mode_Manager+0x260>)
 8001552:	701a      	strb	r2, [r3, #0]


		if (  Seat_returnValue == Mode_NOT_OK )
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <Mode_Manager+0x260>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d108      	bne.n	800156e <Mode_Manager+0x202>
		{
			TFT_Request_Writing( REG , 0x03 , 0x0000);
 800155c:	2200      	movs	r2, #0
 800155e:	2103      	movs	r1, #3
 8001560:	2002      	movs	r0, #2
 8001562:	f000 f959 	bl	8001818 <TFT_Request_Writing>

			state = Background;
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <Mode_Manager+0x25c>)
 8001568:	2201      	movs	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
				state = Background_COVID;


			}
		}
		break;
 800156c:	e028      	b.n	80015c0 <Mode_Manager+0x254>
			if (TFT_Rx_pressed == 1)
 800156e:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <Mode_Manager+0x280>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d124      	bne.n	80015c0 <Mode_Manager+0x254>
				TFT_Rx_pressed =0;
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <Mode_Manager+0x280>)
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
				TFT_Request_Writing( REG , 0x03 , 0x0006);
 800157c:	2206      	movs	r2, #6
 800157e:	2103      	movs	r1, #3
 8001580:	2002      	movs	r0, #2
 8001582:	f000 f949 	bl	8001818 <TFT_Request_Writing>
				state = Background_COVID;
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <Mode_Manager+0x25c>)
 8001588:	2207      	movs	r2, #7
 800158a:	701a      	strb	r2, [r3, #0]
		break;
 800158c:	e018      	b.n	80015c0 <Mode_Manager+0x254>

	case Background_COVID:
		Seat_returnValue = ReadSeats_State(); // return array of 4 seats
 800158e:	f7ff fec9 	bl	8001324 <ReadSeats_State>
 8001592:	4603      	mov	r3, r0
 8001594:	461a      	mov	r2, r3
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <Mode_Manager+0x260>)
 8001598:	701a      	strb	r2, [r3, #0]


		if (  Seat_returnValue == Mode_NOT_OK )
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <Mode_Manager+0x260>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10f      	bne.n	80015c2 <Mode_Manager+0x256>
		{
			TFT_Request_Writing( REG , 0x03 , 0x0000);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2103      	movs	r1, #3
 80015a6:	2002      	movs	r0, #2
 80015a8:	f000 f936 	bl	8001818 <TFT_Request_Writing>

			state = Background;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <Mode_Manager+0x25c>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
		}


	}
}
 80015b2:	e006      	b.n	80015c2 <Mode_Manager+0x256>
		break;
 80015b4:	bf00      	nop
 80015b6:	e004      	b.n	80015c2 <Mode_Manager+0x256>
		break;
 80015b8:	bf00      	nop
 80015ba:	e002      	b.n	80015c2 <Mode_Manager+0x256>
		break;
 80015bc:	bf00      	nop
 80015be:	e000      	b.n	80015c2 <Mode_Manager+0x256>
		break;
 80015c0:	bf00      	nop
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000344 	.word	0x20000344
 80015cc:	20000343 	.word	0x20000343
 80015d0:	20000347 	.word	0x20000347
 80015d4:	20000345 	.word	0x20000345
 80015d8:	200004a0 	.word	0x200004a0
 80015dc:	20000346 	.word	0x20000346
 80015e0:	2000034c 	.word	0x2000034c
 80015e4:	200004a1 	.word	0x200004a1
 80015e8:	20000070 	.word	0x20000070
 80015ec:	2000034d 	.word	0x2000034d

080015f0 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80015f6:	4b25      	ldr	r3, [pc, #148]	; (800168c <RCC_GetPCLK1Value+0x9c>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8001604:	7a7b      	ldrb	r3, [r7, #9]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <RCC_GetPCLK1Value+0xa0>)
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	e00b      	b.n	8001628 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8001610:	7a7b      	ldrb	r3, [r7, #9]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d102      	bne.n	800161c <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8001616:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <RCC_GetPCLK1Value+0xa4>)
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	e005      	b.n	8001628 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 800161c:	7a7b      	ldrb	r3, [r7, #9]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d102      	bne.n	8001628 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8001622:	f000 f88d 	bl	8001740 <RCC_GetPLLOutputClock>
 8001626:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8001628:	4b18      	ldr	r3, [pc, #96]	; (800168c <RCC_GetPCLK1Value+0x9c>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8001636:	7a3b      	ldrb	r3, [r7, #8]
 8001638:	2b07      	cmp	r3, #7
 800163a:	d802      	bhi.n	8001642 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 800163c:	2301      	movs	r3, #1
 800163e:	72fb      	strb	r3, [r7, #11]
 8001640:	e005      	b.n	800164e <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8001642:	7a3b      	ldrb	r3, [r7, #8]
 8001644:	3b08      	subs	r3, #8
 8001646:	4a14      	ldr	r2, [pc, #80]	; (8001698 <RCC_GetPCLK1Value+0xa8>)
 8001648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800164c:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <RCC_GetPCLK1Value+0x9c>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	0a9b      	lsrs	r3, r3, #10
 8001654:	b2db      	uxtb	r3, r3
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 800165c:	7a3b      	ldrb	r3, [r7, #8]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d802      	bhi.n	8001668 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8001662:	2301      	movs	r3, #1
 8001664:	72bb      	strb	r3, [r7, #10]
 8001666:	e004      	b.n	8001672 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8001668:	7a3b      	ldrb	r3, [r7, #8]
 800166a:	3b04      	subs	r3, #4
 800166c:	4a0b      	ldr	r2, [pc, #44]	; (800169c <RCC_GetPCLK1Value+0xac>)
 800166e:	5cd3      	ldrb	r3, [r2, r3]
 8001670:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8001672:	7afb      	ldrb	r3, [r7, #11]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	fbb2 f2f3 	udiv	r2, r2, r3
 800167a:	7abb      	ldrb	r3, [r7, #10]
 800167c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001680:	607b      	str	r3, [r7, #4]

	return pclk1;
 8001682:	687b      	ldr	r3, [r7, #4]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40023800 	.word	0x40023800
 8001690:	00f42400 	.word	0x00f42400
 8001694:	007a1200 	.word	0x007a1200
 8001698:	200000a4 	.word	0x200000a4
 800169c:	200000b4 	.word	0x200000b4

080016a0 <RCC_GetPCLK2Value>:
 * @return            -
 *
 * @Note              -
 */
uint32_t RCC_GetPCLK2Value(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <RCC_GetPCLK2Value+0x8c>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 80016b8:	7a7b      	ldrb	r3, [r7, #9]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d102      	bne.n	80016c4 <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <RCC_GetPCLK2Value+0x90>)
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	e001      	b.n	80016c8 <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <RCC_GetPCLK2Value+0x94>)
 80016c6:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <RCC_GetPCLK2Value+0x8c>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	091b      	lsrs	r3, r3, #4
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b07      	cmp	r3, #7
 80016d8:	d802      	bhi.n	80016e0 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 80016da:	2301      	movs	r3, #1
 80016dc:	72fb      	strb	r3, [r7, #11]
 80016de:	e005      	b.n	80016ec <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b08      	subs	r3, #8
 80016e4:	4a14      	ldr	r2, [pc, #80]	; (8001738 <RCC_GetPCLK2Value+0x98>)
 80016e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016ea:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <RCC_GetPCLK2Value+0x8c>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	0b5b      	lsrs	r3, r3, #13
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d802      	bhi.n	8001704 <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 80016fe:	2301      	movs	r3, #1
 8001700:	72bb      	strb	r3, [r7, #10]
 8001702:	e004      	b.n	800170e <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b04      	subs	r3, #4
 8001708:	4a0c      	ldr	r2, [pc, #48]	; (800173c <RCC_GetPCLK2Value+0x9c>)
 800170a:	5cd3      	ldrb	r3, [r2, r3]
 800170c:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 800170e:	7afb      	ldrb	r3, [r7, #11]
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	fbb2 f2f3 	udiv	r2, r2, r3
 8001716:	7abb      	ldrb	r3, [r7, #10]
 8001718:	fbb2 f3f3 	udiv	r3, r2, r3
 800171c:	603b      	str	r3, [r7, #0]

	return pclk2;
 800171e:	683b      	ldr	r3, [r7, #0]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40023800 	.word	0x40023800
 8001730:	00f42400 	.word	0x00f42400
 8001734:	007a1200 	.word	0x007a1200
 8001738:	200000a4 	.word	0x200000a4
 800173c:	200000b4 	.word	0x200000b4

08001740 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8001740:	b480      	push	{r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0

	uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	2302      	movs	r3, #2
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	2302      	movs	r3, #2
 800175c:	603b      	str	r3, [r7, #0]


	 /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
	         SYSCLK = PLL_VCO / PLLP
	         */
	      pllsource = (RCC->PLLCFGR & ((uint32_t)0x00400000)) >> 22;
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <RCC_GetPLLOutputClock+0x90>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	0d9b      	lsrs	r3, r3, #22
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	607b      	str	r3, [r7, #4]
	      pllm = RCC->PLLCFGR & ((uint32_t)0x0000003F);
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <RCC_GetPLLOutputClock+0x90>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001772:	603b      	str	r3, [r7, #0]

	      if (pllsource != 0)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00c      	beq.n	8001794 <RCC_GetPLLOutputClock+0x54>
	      {
	        /* HSE used as PLL clock source */
	        pllvco = (((uint32_t)8000000) / pllm) * ((RCC->PLLCFGR & ((uint32_t)0x00007FC0)) >> 6);
 800177a:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <RCC_GetPLLOutputClock+0x94>)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001782:	4a13      	ldr	r2, [pc, #76]	; (80017d0 <RCC_GetPLLOutputClock+0x90>)
 8001784:	6852      	ldr	r2, [r2, #4]
 8001786:	0992      	lsrs	r2, r2, #6
 8001788:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800178c:	fb02 f303 	mul.w	r3, r2, r3
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	e00b      	b.n	80017ac <RCC_GetPLLOutputClock+0x6c>
	      }
	      else
	      {
	        /* HSI used as PLL clock source */
	        pllvco = (((uint32_t)16000000) / pllm) * ((RCC->PLLCFGR & ((uint32_t)0x00007FC0)) >> 6);
 8001794:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <RCC_GetPLLOutputClock+0x98>)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	fbb2 f3f3 	udiv	r3, r2, r3
 800179c:	4a0c      	ldr	r2, [pc, #48]	; (80017d0 <RCC_GetPLLOutputClock+0x90>)
 800179e:	6852      	ldr	r2, [r2, #4]
 80017a0:	0992      	lsrs	r2, r2, #6
 80017a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017a6:	fb02 f303 	mul.w	r3, r2, r3
 80017aa:	617b      	str	r3, [r7, #20]
	      }

	      pllp = (((RCC->PLLCFGR & ((uint32_t)0x00030000)) >>16) + 1 ) *2;
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <RCC_GetPLLOutputClock+0x90>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	0c1b      	lsrs	r3, r3, #16
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	3301      	adds	r3, #1
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	60bb      	str	r3, [r7, #8]

          return  pllvco/pllp;
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	fbb2 f3f3 	udiv	r3, r2, r3

	//return 0;
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	371c      	adds	r7, #28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	40023800 	.word	0x40023800
 80017d4:	007a1200 	.word	0x007a1200
 80017d8:	00f42400 	.word	0x00f42400

080017dc <TFT_Writing_Complete_CallBack>:

TFT_CURRENT_STATE_t TFT_current_state = NULLl;


void TFT_Writing_Complete_CallBack(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
	TFT_Tx_notification = TFT_TRUE;
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <TFT_Writing_Complete_CallBack+0x14>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	2000034e 	.word	0x2000034e

080017f4 <TFT_Reading_Complete_CallBack>:

void TFT_Reading_Complete_CallBack(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
	TFT_RxBuffer = FULL;
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <TFT_Reading_Complete_CallBack+0x1c>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
	TFT_Rx_notification = TFT_TRUE;
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <TFT_Reading_Complete_CallBack+0x20>)
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	200003e2 	.word	0x200003e2
 8001814:	2000034f 	.word	0x2000034f

08001818 <TFT_Request_Writing>:

TFT_REQUEST_STATE_t TFT_Request_Writing(TFT_DATA_TYPE_t data_type , uint16_t address , uint16_t data )
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
 8001822:	460b      	mov	r3, r1
 8001824:	80bb      	strh	r3, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	807b      	strh	r3, [r7, #2]

	TFT_REQUEST_STATE_t return_value = TFT_E_OK;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]

	if( TFT_Status == TFT_NOT_BUSY )
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <TFT_Request_Writing+0x90>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d12f      	bne.n	8001896 <TFT_Request_Writing+0x7e>
	{
		switch( data_type )
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d00d      	beq.n	8001858 <TFT_Request_Writing+0x40>
 800183c:	2b02      	cmp	r3, #2
 800183e:	d015      	beq.n	800186c <TFT_Request_Writing+0x54>
 8001840:	2b00      	cmp	r3, #0
 8001842:	d11e      	bne.n	8001882 <TFT_Request_Writing+0x6a>
		{
		case VARIABLE:

			TFT_Variable_Addrss = address;
 8001844:	4a19      	ldr	r2, [pc, #100]	; (80018ac <TFT_Request_Writing+0x94>)
 8001846:	88bb      	ldrh	r3, [r7, #4]
 8001848:	8013      	strh	r3, [r2, #0]
			TFT_Data = data;
 800184a:	4a19      	ldr	r2, [pc, #100]	; (80018b0 <TFT_Request_Writing+0x98>)
 800184c:	887b      	ldrh	r3, [r7, #2]
 800184e:	8013      	strh	r3, [r2, #0]
			tft_data_type = VARIABLE;
 8001850:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <TFT_Request_Writing+0x9c>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
			break;
 8001856:	e014      	b.n	8001882 <TFT_Request_Writing+0x6a>
		case TEXT:
			TFT_Variable_Addrss = address;
 8001858:	4a14      	ldr	r2, [pc, #80]	; (80018ac <TFT_Request_Writing+0x94>)
 800185a:	88bb      	ldrh	r3, [r7, #4]
 800185c:	8013      	strh	r3, [r2, #0]
			TFT_Data = data;
 800185e:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <TFT_Request_Writing+0x98>)
 8001860:	887b      	ldrh	r3, [r7, #2]
 8001862:	8013      	strh	r3, [r2, #0]
			tft_data_type = TEXT;
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <TFT_Request_Writing+0x9c>)
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
			break;
 800186a:	e00a      	b.n	8001882 <TFT_Request_Writing+0x6a>
		case REG:

			TFT_Reg_Address = (uint8_t)address;
 800186c:	88bb      	ldrh	r3, [r7, #4]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <TFT_Request_Writing+0xa0>)
 8001872:	701a      	strb	r2, [r3, #0]
			TFT_Data = data;
 8001874:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <TFT_Request_Writing+0x98>)
 8001876:	887b      	ldrh	r3, [r7, #2]
 8001878:	8013      	strh	r3, [r2, #0]
			tft_data_type = REG;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <TFT_Request_Writing+0x9c>)
 800187c:	2202      	movs	r2, #2
 800187e:	701a      	strb	r2, [r3, #0]
			break;
 8001880:	bf00      	nop

		}

		TFT_New_Request = TFT_TRUE;
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <TFT_Request_Writing+0xa4>)
 8001884:	2201      	movs	r2, #1
 8001886:	701a      	strb	r2, [r3, #0]
		TFT_Status = TFT_BUSY;
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <TFT_Request_Writing+0x90>)
 800188a:	2201      	movs	r2, #1
 800188c:	701a      	strb	r2, [r3, #0]
		TFT_current_state = WRITING;
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <TFT_Request_Writing+0xa8>)
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	e001      	b.n	800189a <TFT_Request_Writing+0x82>
	}
	else
	{
		return_value = TFT_E_NOT_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	73fb      	strb	r3, [r7, #15]
	}

	return return_value;
 800189a:	7bfb      	ldrb	r3, [r7, #15]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	20000350 	.word	0x20000350
 80018ac:	20000352 	.word	0x20000352
 80018b0:	20000354 	.word	0x20000354
 80018b4:	20000356 	.word	0x20000356
 80018b8:	20000351 	.word	0x20000351
 80018bc:	20000358 	.word	0x20000358
 80018c0:	200003e3 	.word	0x200003e3

080018c4 <TFT_Request_Reading>:

TFT_REQUEST_STATE_t TFT_Request_Reading(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	Uart_ReceiveDataASync(USART3_,TFT_ReadDataArr,sizeof(TFT_ReadDataArr));
 80018c8:	2209      	movs	r2, #9
 80018ca:	4903      	ldr	r1, [pc, #12]	; (80018d8 <TFT_Request_Reading+0x14>)
 80018cc:	2002      	movs	r0, #2
 80018ce:	f000 fbdd 	bl	800208c <Uart_ReceiveDataASync>
	return TFT_E_OK;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200003d8 	.word	0x200003d8

080018dc <TFT_Display_Text_Req>:


/**************************************************************/

void TFT_Display_Text_Req(uint8_t *ptr , uint16_t address , uint8_t text_length)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
 80018e8:	4613      	mov	r3, r2
 80018ea:	707b      	strb	r3, [r7, #1]

	if( TFT_Status == TFT_NOT_BUSY )
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <TFT_Display_Text_Req+0x50>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d115      	bne.n	8001920 <TFT_Display_Text_Req+0x44>
	{
		TFT_Variable_Addrss = address;
 80018f4:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <TFT_Display_Text_Req+0x54>)
 80018f6:	887b      	ldrh	r3, [r7, #2]
 80018f8:	8013      	strh	r3, [r2, #0]
		text_ptr = ptr;
 80018fa:	4a0e      	ldr	r2, [pc, #56]	; (8001934 <TFT_Display_Text_Req+0x58>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6013      	str	r3, [r2, #0]
		TFT_Txt_Length = text_length;
 8001900:	787b      	ldrb	r3, [r7, #1]
 8001902:	b29a      	uxth	r2, r3
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <TFT_Display_Text_Req+0x5c>)
 8001906:	801a      	strh	r2, [r3, #0]
		tft_data_type = TEXT;
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <TFT_Display_Text_Req+0x60>)
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]


		TFT_New_Request = TFT_TRUE;
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <TFT_Display_Text_Req+0x64>)
 8001910:	2201      	movs	r2, #1
 8001912:	701a      	strb	r2, [r3, #0]
		TFT_Status = TFT_BUSY;
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <TFT_Display_Text_Req+0x50>)
 8001916:	2201      	movs	r2, #1
 8001918:	701a      	strb	r2, [r3, #0]
		TFT_current_state = WRITING;
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <TFT_Display_Text_Req+0x68>)
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
	}
	else
	{
	}

}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	20000350 	.word	0x20000350
 8001930:	20000352 	.word	0x20000352
 8001934:	200003d4 	.word	0x200003d4
 8001938:	2000036c 	.word	0x2000036c
 800193c:	20000356 	.word	0x20000356
 8001940:	20000358 	.word	0x20000358
 8001944:	200003e3 	.word	0x200003e3

08001948 <TFT_Tx_Manage>:

/**************************************************************/

void TFT_Tx_Manage(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
	unsigned char i;
	switch( TFT_State )
 800194e:	4b64      	ldr	r3, [pc, #400]	; (8001ae0 <TFT_Tx_Manage+0x198>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d016      	beq.n	8001984 <TFT_Tx_Manage+0x3c>
 8001956:	2b03      	cmp	r3, #3
 8001958:	f000 80ad 	beq.w	8001ab6 <TFT_Tx_Manage+0x16e>
 800195c:	2b00      	cmp	r3, #0
 800195e:	d000      	beq.n	8001962 <TFT_Tx_Manage+0x1a>
				TFT_State = TFT_IDLE;
			}

			break;
	}
}
 8001960:	e0ba      	b.n	8001ad8 <TFT_Tx_Manage+0x190>
		if( TFT_New_Request == TFT_TRUE )
 8001962:	4b60      	ldr	r3, [pc, #384]	; (8001ae4 <TFT_Tx_Manage+0x19c>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b01      	cmp	r3, #1
 8001968:	f040 80b3 	bne.w	8001ad2 <TFT_Tx_Manage+0x18a>
			TFT_New_Request = TFT_FALSE;
 800196c:	4b5d      	ldr	r3, [pc, #372]	; (8001ae4 <TFT_Tx_Manage+0x19c>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
			if (TFT_current_state == WRITING)
 8001972:	4b5d      	ldr	r3, [pc, #372]	; (8001ae8 <TFT_Tx_Manage+0x1a0>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b01      	cmp	r3, #1
 8001978:	f040 80ab 	bne.w	8001ad2 <TFT_Tx_Manage+0x18a>
				TFT_State = TFT_WRITING;
 800197c:	4b58      	ldr	r3, [pc, #352]	; (8001ae0 <TFT_Tx_Manage+0x198>)
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
		break;
 8001982:	e0a6      	b.n	8001ad2 <TFT_Tx_Manage+0x18a>
		switch( tft_data_type )
 8001984:	4b59      	ldr	r3, [pc, #356]	; (8001aec <TFT_Tx_Manage+0x1a4>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d02e      	beq.n	80019ea <TFT_Tx_Manage+0xa2>
 800198c:	2b02      	cmp	r3, #2
 800198e:	d06c      	beq.n	8001a6a <TFT_Tx_Manage+0x122>
 8001990:	2b00      	cmp	r3, #0
 8001992:	f040 808c 	bne.w	8001aae <TFT_Tx_Manage+0x166>
			write_var_arr[0] = TFT_FRAM_HEADER1;
 8001996:	4b56      	ldr	r3, [pc, #344]	; (8001af0 <TFT_Tx_Manage+0x1a8>)
 8001998:	225a      	movs	r2, #90	; 0x5a
 800199a:	701a      	strb	r2, [r3, #0]
			write_var_arr[1] = TFT_FRAM_HEADER2;
 800199c:	4b54      	ldr	r3, [pc, #336]	; (8001af0 <TFT_Tx_Manage+0x1a8>)
 800199e:	22a5      	movs	r2, #165	; 0xa5
 80019a0:	705a      	strb	r2, [r3, #1]
			write_var_arr[2] = 5;   // data length
 80019a2:	4b53      	ldr	r3, [pc, #332]	; (8001af0 <TFT_Tx_Manage+0x1a8>)
 80019a4:	2205      	movs	r2, #5
 80019a6:	709a      	strb	r2, [r3, #2]
			write_var_arr[3] = TFT_VAR_WRITE_CMD;    // variable writing command
 80019a8:	4b51      	ldr	r3, [pc, #324]	; (8001af0 <TFT_Tx_Manage+0x1a8>)
 80019aa:	2282      	movs	r2, #130	; 0x82
 80019ac:	70da      	strb	r2, [r3, #3]
			write_var_arr[4] = (uint8_t)( TFT_Variable_Addrss >> 8 );
 80019ae:	4b51      	ldr	r3, [pc, #324]	; (8001af4 <TFT_Tx_Manage+0x1ac>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	0a1b      	lsrs	r3, r3, #8
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	4b4d      	ldr	r3, [pc, #308]	; (8001af0 <TFT_Tx_Manage+0x1a8>)
 80019ba:	711a      	strb	r2, [r3, #4]
			write_var_arr[5] = (uint8_t)( TFT_Variable_Addrss & 0x00FF );
 80019bc:	4b4d      	ldr	r3, [pc, #308]	; (8001af4 <TFT_Tx_Manage+0x1ac>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4b4b      	ldr	r3, [pc, #300]	; (8001af0 <TFT_Tx_Manage+0x1a8>)
 80019c4:	715a      	strb	r2, [r3, #5]
			write_var_arr[6] = (uint8_t)( TFT_Data >> 8 );
 80019c6:	4b4c      	ldr	r3, [pc, #304]	; (8001af8 <TFT_Tx_Manage+0x1b0>)
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	0a1b      	lsrs	r3, r3, #8
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <TFT_Tx_Manage+0x1a8>)
 80019d2:	719a      	strb	r2, [r3, #6]
			write_var_arr[7] = (uint8_t)( TFT_Data & 0x00FF );
 80019d4:	4b48      	ldr	r3, [pc, #288]	; (8001af8 <TFT_Tx_Manage+0x1b0>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4b45      	ldr	r3, [pc, #276]	; (8001af0 <TFT_Tx_Manage+0x1a8>)
 80019dc:	71da      	strb	r2, [r3, #7]
			Uart_SendDataAsync(USART3_,write_var_arr,sizeof(write_var_arr));
 80019de:	2208      	movs	r2, #8
 80019e0:	4943      	ldr	r1, [pc, #268]	; (8001af0 <TFT_Tx_Manage+0x1a8>)
 80019e2:	2002      	movs	r0, #2
 80019e4:	f000 fb04 	bl	8001ff0 <Uart_SendDataAsync>
			break;
 80019e8:	e061      	b.n	8001aae <TFT_Tx_Manage+0x166>
			write_text_arr[0] = TFT_FRAM_HEADER1;
 80019ea:	4b44      	ldr	r3, [pc, #272]	; (8001afc <TFT_Tx_Manage+0x1b4>)
 80019ec:	225a      	movs	r2, #90	; 0x5a
 80019ee:	701a      	strb	r2, [r3, #0]
			write_text_arr[1] = TFT_FRAM_HEADER2;
 80019f0:	4b42      	ldr	r3, [pc, #264]	; (8001afc <TFT_Tx_Manage+0x1b4>)
 80019f2:	22a5      	movs	r2, #165	; 0xa5
 80019f4:	705a      	strb	r2, [r3, #1]
			write_text_arr[2] = (uint8_t)( 3 + TFT_Txt_Length );   // 3( 1 byte for command + 2 byte for address ) + text length
 80019f6:	4b42      	ldr	r3, [pc, #264]	; (8001b00 <TFT_Tx_Manage+0x1b8>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	3303      	adds	r3, #3
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	4b3e      	ldr	r3, [pc, #248]	; (8001afc <TFT_Tx_Manage+0x1b4>)
 8001a02:	709a      	strb	r2, [r3, #2]
			write_text_arr[3] = TFT_VAR_WRITE_CMD;    // variable writing command
 8001a04:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <TFT_Tx_Manage+0x1b4>)
 8001a06:	2282      	movs	r2, #130	; 0x82
 8001a08:	70da      	strb	r2, [r3, #3]
			write_text_arr[4] = (uint8_t)( TFT_Variable_Addrss >> 8 );
 8001a0a:	4b3a      	ldr	r3, [pc, #232]	; (8001af4 <TFT_Tx_Manage+0x1ac>)
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	0a1b      	lsrs	r3, r3, #8
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	4b39      	ldr	r3, [pc, #228]	; (8001afc <TFT_Tx_Manage+0x1b4>)
 8001a16:	711a      	strb	r2, [r3, #4]
			write_text_arr[5] = (uint8_t)( TFT_Variable_Addrss & 0x00FF );
 8001a18:	4b36      	ldr	r3, [pc, #216]	; (8001af4 <TFT_Tx_Manage+0x1ac>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4b37      	ldr	r3, [pc, #220]	; (8001afc <TFT_Tx_Manage+0x1b4>)
 8001a20:	715a      	strb	r2, [r3, #5]
			for( i=0; i<TFT_Txt_Length; i++ )
 8001a22:	2300      	movs	r3, #0
 8001a24:	71fb      	strb	r3, [r7, #7]
 8001a26:	e00b      	b.n	8001a40 <TFT_Tx_Manage+0xf8>
				write_text_arr[i+6] = text_ptr[i];    // fill the buffer with the text data starting from index 6
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	3306      	adds	r3, #6
 8001a2c:	4a35      	ldr	r2, [pc, #212]	; (8001b04 <TFT_Tx_Manage+0x1bc>)
 8001a2e:	6811      	ldr	r1, [r2, #0]
 8001a30:	79fa      	ldrb	r2, [r7, #7]
 8001a32:	440a      	add	r2, r1
 8001a34:	7811      	ldrb	r1, [r2, #0]
 8001a36:	4a31      	ldr	r2, [pc, #196]	; (8001afc <TFT_Tx_Manage+0x1b4>)
 8001a38:	54d1      	strb	r1, [r2, r3]
			for( i=0; i<TFT_Txt_Length; i++ )
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	71fb      	strb	r3, [r7, #7]
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	4b2e      	ldr	r3, [pc, #184]	; (8001b00 <TFT_Tx_Manage+0x1b8>)
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d3ed      	bcc.n	8001a28 <TFT_Tx_Manage+0xe0>
			Uart_SendDataAsync( USART3_, write_text_arr, TFT_Txt_Length + 6 );  // 6 is the length of basic data to be sent to TFT
 8001a4c:	4b2c      	ldr	r3, [pc, #176]	; (8001b00 <TFT_Tx_Manage+0x1b8>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	3306      	adds	r3, #6
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	4929      	ldr	r1, [pc, #164]	; (8001afc <TFT_Tx_Manage+0x1b4>)
 8001a58:	2002      	movs	r0, #2
 8001a5a:	f000 fac9 	bl	8001ff0 <Uart_SendDataAsync>
			TFT_Request_Writing( REG , 0x03 , 0x0003);
 8001a5e:	2203      	movs	r2, #3
 8001a60:	2103      	movs	r1, #3
 8001a62:	2002      	movs	r0, #2
 8001a64:	f7ff fed8 	bl	8001818 <TFT_Request_Writing>
			break;
 8001a68:	e021      	b.n	8001aae <TFT_Tx_Manage+0x166>
			write_reg_arr[0] = TFT_FRAM_HEADER1;
 8001a6a:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <TFT_Tx_Manage+0x1c0>)
 8001a6c:	225a      	movs	r2, #90	; 0x5a
 8001a6e:	701a      	strb	r2, [r3, #0]
			write_reg_arr[1] = TFT_FRAM_HEADER2;
 8001a70:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <TFT_Tx_Manage+0x1c0>)
 8001a72:	22a5      	movs	r2, #165	; 0xa5
 8001a74:	705a      	strb	r2, [r3, #1]
			write_reg_arr[2] = 4;   // data length
 8001a76:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <TFT_Tx_Manage+0x1c0>)
 8001a78:	2204      	movs	r2, #4
 8001a7a:	709a      	strb	r2, [r3, #2]
			write_reg_arr[3] = TFT_REG_WRITE_CMD;    // variable writing command
 8001a7c:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <TFT_Tx_Manage+0x1c0>)
 8001a7e:	2280      	movs	r2, #128	; 0x80
 8001a80:	70da      	strb	r2, [r3, #3]
			write_reg_arr[4] = (uint8_t)( TFT_Reg_Address);
 8001a82:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <TFT_Tx_Manage+0x1c4>)
 8001a84:	781a      	ldrb	r2, [r3, #0]
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <TFT_Tx_Manage+0x1c0>)
 8001a88:	711a      	strb	r2, [r3, #4]
			write_reg_arr[5] = (uint8_t)( TFT_Data >> 8 );
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <TFT_Tx_Manage+0x1b0>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <TFT_Tx_Manage+0x1c0>)
 8001a96:	715a      	strb	r2, [r3, #5]
			write_reg_arr[6] = (uint8_t)( TFT_Data & 0x00FF );
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <TFT_Tx_Manage+0x1b0>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <TFT_Tx_Manage+0x1c0>)
 8001aa0:	719a      	strb	r2, [r3, #6]
			Uart_SendDataAsync(USART3_, write_reg_arr, sizeof(write_reg_arr));
 8001aa2:	2207      	movs	r2, #7
 8001aa4:	4918      	ldr	r1, [pc, #96]	; (8001b08 <TFT_Tx_Manage+0x1c0>)
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	f000 faa2 	bl	8001ff0 <Uart_SendDataAsync>
			break;
 8001aac:	bf00      	nop
		TFT_State = TFT_Tx_WAITING;
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <TFT_Tx_Manage+0x198>)
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	701a      	strb	r2, [r3, #0]
		break;
 8001ab4:	e010      	b.n	8001ad8 <TFT_Tx_Manage+0x190>
			if (TFT_Tx_notification == TFT_TRUE)
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <TFT_Tx_Manage+0x1c8>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d10b      	bne.n	8001ad6 <TFT_Tx_Manage+0x18e>
				TFT_Tx_notification = TFT_FALSE;
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <TFT_Tx_Manage+0x1c8>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
				TFT_Status = TFT_NOT_BUSY;
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <TFT_Tx_Manage+0x1cc>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
				TFT_State = TFT_IDLE;
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <TFT_Tx_Manage+0x198>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
			break;
 8001ad0:	e001      	b.n	8001ad6 <TFT_Tx_Manage+0x18e>
		break;
 8001ad2:	bf00      	nop
 8001ad4:	e000      	b.n	8001ad8 <TFT_Tx_Manage+0x190>
			break;
 8001ad6:	bf00      	nop
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000357 	.word	0x20000357
 8001ae4:	20000358 	.word	0x20000358
 8001ae8:	200003e3 	.word	0x200003e3
 8001aec:	20000356 	.word	0x20000356
 8001af0:	2000035c 	.word	0x2000035c
 8001af4:	20000352 	.word	0x20000352
 8001af8:	20000354 	.word	0x20000354
 8001afc:	20000370 	.word	0x20000370
 8001b00:	2000036c 	.word	0x2000036c
 8001b04:	200003d4 	.word	0x200003d4
 8001b08:	20000364 	.word	0x20000364
 8001b0c:	20000351 	.word	0x20000351
 8001b10:	2000034e 	.word	0x2000034e
 8001b14:	20000350 	.word	0x20000350

08001b18 <TFT_Rx_Manage>:

void TFT_Rx_Manage(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
	unsigned char i;
	switch( TFT_RxState )
 8001b1e:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <TFT_Rx_Manage+0xa0>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d014      	beq.n	8001b50 <TFT_Rx_Manage+0x38>
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d034      	beq.n	8001b94 <TFT_Rx_Manage+0x7c>
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d000      	beq.n	8001b30 <TFT_Rx_Manage+0x18>


		break;

	}
}
 8001b2e:	e03f      	b.n	8001bb0 <TFT_Rx_Manage+0x98>
		if( TFT_RxBuffer != EMPTY )
 8001b30:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <TFT_Rx_Manage+0xa4>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d038      	beq.n	8001baa <TFT_Rx_Manage+0x92>
			if( TFT_ReadDataArr[0] == 0x5A && TFT_ReadDataArr[0] == 0xA5 )
 8001b38:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <TFT_Rx_Manage+0xa8>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b5a      	cmp	r3, #90	; 0x5a
 8001b3e:	d134      	bne.n	8001baa <TFT_Rx_Manage+0x92>
 8001b40:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <TFT_Rx_Manage+0xa8>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2ba5      	cmp	r3, #165	; 0xa5
 8001b46:	d130      	bne.n	8001baa <TFT_Rx_Manage+0x92>
				TFT_RxState = TFT_READING;
 8001b48:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <TFT_Rx_Manage+0xa0>)
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	701a      	strb	r2, [r3, #0]
		break;
 8001b4e:	e02c      	b.n	8001baa <TFT_Rx_Manage+0x92>
		TFT_State =TFT_Tx_WAITING;
 8001b50:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <TFT_Rx_Manage+0xac>)
 8001b52:	2203      	movs	r2, #3
 8001b54:	701a      	strb	r2, [r3, #0]
		Data = ( ( (uint16_t)TFT_ReadDataArr[4] << 8 ) | TFT_ReadDataArr[5] );
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <TFT_Rx_Manage+0xa8>)
 8001b58:	791b      	ldrb	r3, [r3, #4]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	b21a      	sxth	r2, r3
 8001b5e:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <TFT_Rx_Manage+0xa8>)
 8001b60:	795b      	ldrb	r3, [r3, #5]
 8001b62:	b21b      	sxth	r3, r3
 8001b64:	4313      	orrs	r3, r2
 8001b66:	b21b      	sxth	r3, r3
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <TFT_Rx_Manage+0xb0>)
 8001b6c:	801a      	strh	r2, [r3, #0]
		for(i=0; i<9; i++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	71fb      	strb	r3, [r7, #7]
 8001b72:	e006      	b.n	8001b82 <TFT_Rx_Manage+0x6a>
			TFT_ReadDataArr[i] = 0;    // clear the buffer
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <TFT_Rx_Manage+0xa8>)
 8001b78:	2100      	movs	r1, #0
 8001b7a:	54d1      	strb	r1, [r2, r3]
		for(i=0; i<9; i++)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	71fb      	strb	r3, [r7, #7]
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d9f5      	bls.n	8001b74 <TFT_Rx_Manage+0x5c>
		TFT_RxBuffer = EMPTY;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <TFT_Rx_Manage+0xa4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
		TFT_Request_Reading();
 8001b8e:	f7ff fe99 	bl	80018c4 <TFT_Request_Reading>
		break;
 8001b92:	e00d      	b.n	8001bb0 <TFT_Rx_Manage+0x98>
		if (TFT_Rx_notification == TFT_TRUE)
 8001b94:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <TFT_Rx_Manage+0xb4>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d108      	bne.n	8001bae <TFT_Rx_Manage+0x96>
			TFT_Rx_notification = TFT_FALSE;
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <TFT_Rx_Manage+0xb4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
			TFT_State = TFT_IDLE;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <TFT_Rx_Manage+0xac>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
		break;
 8001ba8:	e001      	b.n	8001bae <TFT_Rx_Manage+0x96>
		break;
 8001baa:	bf00      	nop
 8001bac:	e000      	b.n	8001bb0 <TFT_Rx_Manage+0x98>
		break;
 8001bae:	bf00      	nop
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	200003e1 	.word	0x200003e1
 8001bbc:	200003e2 	.word	0x200003e2
 8001bc0:	200003d8 	.word	0x200003d8
 8001bc4:	20000357 	.word	0x20000357
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	2000034f 	.word	0x2000034f

08001bd0 <USART_PeripheralControl>:
static FLAG_STATUS USART_GetFlagStatus(uint8_t USART_ID , uint32_t FlagName);
static void USART_PeripheralControl(uint8_t USART_ID, uint8_t Cmd);


static void USART_PeripheralControl(uint8_t USART_ID, uint8_t Cmd)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460a      	mov	r2, r1
 8001bda:	71fb      	strb	r3, [r7, #7]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	71bb      	strb	r3, [r7, #6]
	/*********NEW_BY_GHADA**************/
	USART_RegDef_t *pUSARTx = USART_Arr[USART_ID] ;
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	4a09      	ldr	r2, [pc, #36]	; (8001c08 <USART_PeripheralControl+0x38>)
 8001be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be8:	60fb      	str	r3, [r7, #12]

	pUSARTx->USART_CR1 = (pUSARTx->USART_CR1 & ~(One_bit_mask << USART_CR1_UE))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
														|(Cmd << USART_CR1_UE);
 8001bf2:	79ba      	ldrb	r2, [r7, #6]
 8001bf4:	0352      	lsls	r2, r2, #13
 8001bf6:	431a      	orrs	r2, r3
	pUSARTx->USART_CR1 = (pUSARTx->USART_CR1 & ~(One_bit_mask << USART_CR1_UE))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	60da      	str	r2, [r3, #12]
	/**********************************/

}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	200000b8 	.word	0x200000b8

08001c0c <USART_PeriClockControl>:


static void USART_PeriClockControl(uint8_t USART_ID, uint8_t EnorDi)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	460a      	mov	r2, r1
 8001c16:	71fb      	strb	r3, [r7, #7]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	71bb      	strb	r3, [r7, #6]
	switch(USART_ID)
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <USART_PeriClockControl+0x1c>
 8001c22:	2b05      	cmp	r3, #5
 8001c24:	d012      	beq.n	8001c4c <USART_PeriClockControl+0x40>
 8001c26:	e021      	b.n	8001c6c <USART_PeriClockControl+0x60>
	{
	case USART1_ :
		USART_PCLK_1_6_EN = (USART_PCLK_1_6_EN & ~(One_bit_mask << (USART_ID+USART_1_APB2ENR_REG_OFFEST)))
 8001c28:	481c      	ldr	r0, [pc, #112]	; (8001c9c <USART_PeriClockControl+0x90>)
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <USART_PeriClockControl+0x90>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	79fa      	ldrb	r2, [r7, #7]
 8001c30:	3204      	adds	r2, #4
 8001c32:	2101      	movs	r1, #1
 8001c34:	fa01 f202 	lsl.w	r2, r1, r2
 8001c38:	43d2      	mvns	r2, r2
 8001c3a:	4013      	ands	r3, r2
		|(EnorDi <<(USART_ID+USART_1_APB2ENR_REG_OFFEST));
 8001c3c:	79b9      	ldrb	r1, [r7, #6]
 8001c3e:	79fa      	ldrb	r2, [r7, #7]
 8001c40:	3204      	adds	r2, #4
 8001c42:	fa01 f202 	lsl.w	r2, r1, r2
 8001c46:	4313      	orrs	r3, r2
		USART_PCLK_1_6_EN = (USART_PCLK_1_6_EN & ~(One_bit_mask << (USART_ID+USART_1_APB2ENR_REG_OFFEST)))
 8001c48:	6443      	str	r3, [r0, #68]	; 0x44
		break;
 8001c4a:	e020      	b.n	8001c8e <USART_PeriClockControl+0x82>
	case USART6_:
		USART_PCLK_1_6_EN =(USART_PCLK_1_6_EN & ~(One_bit_mask << USART_ID))
 8001c4c:	4813      	ldr	r0, [pc, #76]	; (8001c9c <USART_PeriClockControl+0x90>)
 8001c4e:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <USART_PeriClockControl+0x90>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	79fa      	ldrb	r2, [r7, #7]
 8001c54:	2101      	movs	r1, #1
 8001c56:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5a:	43d2      	mvns	r2, r2
 8001c5c:	4013      	ands	r3, r2
		|(EnorDi <<USART_ID);
 8001c5e:	79b9      	ldrb	r1, [r7, #6]
 8001c60:	79fa      	ldrb	r2, [r7, #7]
 8001c62:	fa01 f202 	lsl.w	r2, r1, r2
 8001c66:	4313      	orrs	r3, r2
		USART_PCLK_1_6_EN =(USART_PCLK_1_6_EN & ~(One_bit_mask << USART_ID))
 8001c68:	6443      	str	r3, [r0, #68]	; 0x44
		break;
 8001c6a:	e010      	b.n	8001c8e <USART_PeriClockControl+0x82>
	default:
		USART_PCLK_2_TO_5_EN =(USART_PCLK_2_TO_5_EN & ~(One_bit_mask << (USART_ID+USART_2_TO_5_APB1ENR_REG_OFFEST-1)))
 8001c6c:	480b      	ldr	r0, [pc, #44]	; (8001c9c <USART_PeriClockControl+0x90>)
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <USART_PeriClockControl+0x90>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	79fa      	ldrb	r2, [r7, #7]
 8001c74:	3210      	adds	r2, #16
 8001c76:	2101      	movs	r1, #1
 8001c78:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7c:	43d2      	mvns	r2, r2
 8001c7e:	4013      	ands	r3, r2
		|(EnorDi << (USART_ID+USART_2_TO_5_APB1ENR_REG_OFFEST-1));
 8001c80:	79b9      	ldrb	r1, [r7, #6]
 8001c82:	79fa      	ldrb	r2, [r7, #7]
 8001c84:	3210      	adds	r2, #16
 8001c86:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8a:	4313      	orrs	r3, r2
		USART_PCLK_2_TO_5_EN =(USART_PCLK_2_TO_5_EN & ~(One_bit_mask << (USART_ID+USART_2_TO_5_APB1ENR_REG_OFFEST-1)))
 8001c8c:	6403      	str	r3, [r0, #64]	; 0x40
	}
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800

08001ca0 <USART_GetFlagStatus>:

/*Get flag status function */

static FLAG_STATUS USART_GetFlagStatus(uint8_t USART_ID , uint32_t FlagName)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	6039      	str	r1, [r7, #0]
 8001caa:	71fb      	strb	r3, [r7, #7]
	/* one shift left with bitNum_FlagName_
		00000000
		00001000
	 */
	USART_RegDef_t *pUSARTx = USART_Arr[USART_ID] ;
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <USART_GetFlagStatus+0x38>)
 8001cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb4:	60fb      	str	r3, [r7, #12]

	return ((pUSARTx->USART_SR & (One_bit_shift << FlagName)));
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	b2db      	uxtb	r3, r3

}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	200000b8 	.word	0x200000b8

08001cdc <USART_SetBaudRate>:

void USART_SetBaudRate(uint8_t USART_ID, uint32_t BaudRate)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
	USART_RegDef_t *pUSARTx = USART_Arr[USART_ID] ;
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	4a36      	ldr	r2, [pc, #216]	; (8001dc4 <USART_SetBaudRate+0xe8>)
 8001cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf0:	613b      	str	r3, [r7, #16]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

	uint32_t tempreg=0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]

	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4a33      	ldr	r2, [pc, #204]	; (8001dc8 <USART_SetBaudRate+0xec>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d003      	beq.n	8001d06 <USART_SetBaudRate+0x2a>
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4a32      	ldr	r2, [pc, #200]	; (8001dcc <USART_SetBaudRate+0xf0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d104      	bne.n	8001d10 <USART_SetBaudRate+0x34>
	{
		//USART1 and USART6 are hanging on APB2 bus
		PCLKx = RCC_GetPCLK2Value();   // return APB2 bus frequency
 8001d06:	f7ff fccb 	bl	80016a0 <RCC_GetPCLK2Value>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	61fb      	str	r3, [r7, #28]
	{
 8001d0e:	e003      	b.n	8001d18 <USART_SetBaudRate+0x3c>
	}else
	{
		PCLKx = RCC_GetPCLK1Value();   // return APB1 bus frequency
 8001d10:	f7ff fc6e 	bl	80015f0 <RCC_GetPCLK1Value>
 8001d14:	4603      	mov	r3, r0
 8001d16:	61fb      	str	r3, [r7, #28]
	}

	//Check for OVER8 configuration bit
	if(pUSARTx->USART_CR1 & (One_bit_shift << USART_CR1_OVER8))
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00b      	beq.n	8001d3c <USART_SetBaudRate+0x60>
	{
		//OVER8 = 1 , over sampling by 8
		usartdiv = ((UART_FRACTION_GET_MUL_SUB * PCLKx) / (UART_NUMBER_OF_SAMPLES_SUB_FOR_OVER8 *BaudRate));
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009a      	lsls	r2, r3, #2
 8001d2e:	441a      	add	r2, r3
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	e00a      	b.n	8001d52 <USART_SetBaudRate+0x76>
	}else
	{
		//over sampling by 16
		usartdiv = ((UART_FRACTION_GET_MUL_SUB * PCLKx) / (UART_NUMBER_OF_SAMPLES_SUB_FOR_OVER16 *BaudRate));
 8001d3c:	69fa      	ldr	r2, [r7, #28]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	009a      	lsls	r2, r3, #2
 8001d46:	441a      	add	r2, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d50:	61bb      	str	r3, [r7, #24]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/UART_FRACTION_GET_DIV;
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	4a1e      	ldr	r2, [pc, #120]	; (8001dd0 <USART_SetBaudRate+0xf4>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	60bb      	str	r3, [r7, #8]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << UART_BAUDRATE_INT_OFFSET;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * UART_FRACTION_GET_MUL));
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2264      	movs	r2, #100	; 0x64
 8001d6c:	fb02 f303 	mul.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	if(pUSARTx->USART_CR1 & ( One_bit_shift << USART_CR1_OVER8))
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00a      	beq.n	8001d98 <USART_SetBaudRate+0xbc>
	{
		//OVER8 = 1 , over sampling by 8
		F_part = ((( F_part * UART_BAUDRATE_FRACTION_MUL_FOR_OVER8)+ UART_BAUDRATE_ROUND_VALUE) / UART_FRACTION_GET_DIV)& (UART_SET_BAUDRATE_FOR_OVER8);
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	3332      	adds	r3, #50	; 0x32
 8001d88:	4a11      	ldr	r2, [pc, #68]	; (8001dd0 <USART_SetBaudRate+0xf4>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	e009      	b.n	8001dac <USART_SetBaudRate+0xd0>

	}else
	{
		//over sampling by 16
		F_part = ((( F_part * UART_BAUDRATE_FRACTION_MUL_FOR_OVER16)+ UART_BAUDRATE_ROUND_VALUE) / UART_FRACTION_GET_DIV) & (UART_SET_BAUDRATE_FOR_OVER16);
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	3332      	adds	r3, #50	; 0x32
 8001d9e:	4a0c      	ldr	r2, [pc, #48]	; (8001dd0 <USART_SetBaudRate+0xf4>)
 8001da0:	fba2 2303 	umull	r2, r3, r2, r3
 8001da4:	095b      	lsrs	r3, r3, #5
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	617b      	str	r3, [r7, #20]

	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]

	//copy the value of tempreg in to BRR register
	pUSARTx->USART_BRR = tempreg;
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	609a      	str	r2, [r3, #8]
}
 8001dba:	bf00      	nop
 8001dbc:	3720      	adds	r7, #32
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200000b8 	.word	0x200000b8
 8001dc8:	40011000 	.word	0x40011000
 8001dcc:	40011400 	.word	0x40011400
 8001dd0:	51eb851f 	.word	0x51eb851f

08001dd4 <USART_Init>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0

	//Temporary variable
	uint32_t TempReg=0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
	uint8_t counter ;
	USART_RegDef_t *pUSARTx;
	pUSARTx = USART_Arr[UART_ConfigArray[counter].USART_ID];
 8001dde:	7afa      	ldrb	r2, [r7, #11]
 8001de0:	497f      	ldr	r1, [pc, #508]	; (8001fe0 <USART_Init+0x20c>)
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	4b7c      	ldr	r3, [pc, #496]	; (8001fe4 <USART_Init+0x210>)
 8001df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df6:	607b      	str	r3, [r7, #4]

	for(counter = 0 ; counter<NUMBER_OF_CONFIGURED_UART;counter++)
 8001df8:	2300      	movs	r3, #0
 8001dfa:	72fb      	strb	r3, [r7, #11]
 8001dfc:	e0e7      	b.n	8001fce <USART_Init+0x1fa>
	{
		/******************************** Configuration of CR1******************************************/
				pUSARTx = USART_Arr[UART_ConfigArray[counter].USART_ID] ;
 8001dfe:	7afa      	ldrb	r2, [r7, #11]
 8001e00:	4977      	ldr	r1, [pc, #476]	; (8001fe0 <USART_Init+0x20c>)
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4b74      	ldr	r3, [pc, #464]	; (8001fe4 <USART_Init+0x210>)
 8001e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e16:	607b      	str	r3, [r7, #4]


		//Implement the code to enable the Clock for given USART peripheral
		USART_PeriClockControl(UART_ConfigArray[counter].USART_ID, 1);
 8001e18:	7afa      	ldrb	r2, [r7, #11]
 8001e1a:	4971      	ldr	r1, [pc, #452]	; (8001fe0 <USART_Init+0x20c>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2101      	movs	r1, #1
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff feee 	bl	8001c0c <USART_PeriClockControl>

		//TempReg=pUSARTx->USART_CR1;
		//Enable USART Tx and Rx engines according to the USART_Mode configuration item
		switch(UART_ConfigArray[counter].USART_Mode)
 8001e30:	7afa      	ldrb	r2, [r7, #11]
 8001e32:	496b      	ldr	r1, [pc, #428]	; (8001fe0 <USART_Init+0x20c>)
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	3301      	adds	r3, #1
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d004      	beq.n	8001e50 <USART_Init+0x7c>
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d00c      	beq.n	8001e64 <USART_Init+0x90>
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <USART_Init+0x86>
 8001e4e:	e00e      	b.n	8001e6e <USART_Init+0x9a>
		{
		case USART_MODE_ONLY_RX :
			//Implement the code to enable the Receiver bit field
			TempReg |= (One_bit_shift << USART_CR1_RE);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f043 0304 	orr.w	r3, r3, #4
 8001e56:	60fb      	str	r3, [r7, #12]

			break;
 8001e58:	e009      	b.n	8001e6e <USART_Init+0x9a>

		case USART_MODE_ONLY_TX :
			//Implement the code to enable the Transmitter bit field
			TempReg |= ( One_bit_shift << USART_CR1_TE);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f043 0308 	orr.w	r3, r3, #8
 8001e60:	60fb      	str	r3, [r7, #12]
			break;
 8001e62:	e004      	b.n	8001e6e <USART_Init+0x9a>

		case USART_MODE_TXRX :
			//Implement the code to enable the both Transmitter and Receiver bit fields
			TempReg |= ( ( One_bit_shift << USART_CR1_TE) | ( One_bit_shift << USART_CR1_RE) );
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f043 030c 	orr.w	r3, r3, #12
 8001e6a:	60fb      	str	r3, [r7, #12]
			break;
 8001e6c:	bf00      	nop
		}
		//Implement the code to configure the Word length configuration item
		TempReg |= UART_ConfigArray[counter].USART_WordLength << USART_CR1_M ;
 8001e6e:	7afa      	ldrb	r2, [r7, #11]
 8001e70:	495b      	ldr	r1, [pc, #364]	; (8001fe0 <USART_Init+0x20c>)
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	3309      	adds	r3, #9
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	031b      	lsls	r3, r3, #12
 8001e82:	461a      	mov	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]


		//Configuration of parity control bit fields
		switch(UART_ConfigArray[counter].USART_ParityControl)
 8001e8a:	7afa      	ldrb	r2, [r7, #11]
 8001e8c:	4954      	ldr	r1, [pc, #336]	; (8001fe0 <USART_Init+0x20c>)
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	330a      	adds	r3, #10
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d002      	beq.n	8001ea6 <USART_Init+0xd2>
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d005      	beq.n	8001eb0 <USART_Init+0xdc>
 8001ea4:	e00d      	b.n	8001ec2 <USART_Init+0xee>
		{
		case USART_PARITY_EN_EVEN:
			//Implement the code to enable the parity control
			//
			TempReg |= ( 1 << USART_CR1_PCE);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eac:	60fb      	str	r3, [r7, #12]
			break;
 8001eae:	e008      	b.n	8001ec2 <USART_Init+0xee>

		case USART_PARITY_EN_ODD:
			//Implement the code to enable the parity control
			TempReg |= ( 1 << USART_CR1_PCE);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eb6:	60fb      	str	r3, [r7, #12]
			//Implement the code to enable ODD parity
			TempReg |= ( 1 << USART_CR1_PS);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ebe:	60fb      	str	r3, [r7, #12]

			break;
 8001ec0:	bf00      	nop
		}

		//Program the CR1 register
		pUSARTx->USART_CR1 = TempReg;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	60da      	str	r2, [r3, #12]


		USART_PeripheralControl(UART_ConfigArray[counter].USART_ID, 1);
 8001ec8:	7afa      	ldrb	r2, [r7, #11]
 8001eca:	4945      	ldr	r1, [pc, #276]	; (8001fe0 <USART_Init+0x20c>)
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2101      	movs	r1, #1
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fe78 	bl	8001bd0 <USART_PeripheralControl>

		/******************************** Configuration of CR2******************************************/
		//TempReg=pUSARTx->USART_CR2;
		TempReg=0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]

		//Implement the code to configure the number of stop bits inserted during USART frame transmission
		TempReg |= UART_ConfigArray[counter].USART_NoOfStopBits << USART_CR2_STOP;
 8001ee4:	7afa      	ldrb	r2, [r7, #11]
 8001ee6:	493e      	ldr	r1, [pc, #248]	; (8001fe0 <USART_Init+0x20c>)
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3308      	adds	r3, #8
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	031b      	lsls	r3, r3, #12
 8001ef8:	461a      	mov	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]

		//Program the CR2 register
		pUSARTx->USART_CR2 = TempReg;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	611a      	str	r2, [r3, #16]


		/******************************** Configuration of CR3******************************************/
		//TempReg=pUSARTx->USART_CR3;
		TempReg=0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]

		//Configuration of USART hardware flow control
		switch (UART_ConfigArray[counter].USART_HWFlowControl)
 8001f0a:	7afa      	ldrb	r2, [r7, #11]
 8001f0c:	4934      	ldr	r1, [pc, #208]	; (8001fe0 <USART_Init+0x20c>)
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	330b      	adds	r3, #11
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d008      	beq.n	8001f32 <USART_Init+0x15e>
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d00b      	beq.n	8001f3c <USART_Init+0x168>
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d10e      	bne.n	8001f46 <USART_Init+0x172>
		{
		case USART_HW_FLOW_CTRL_CTS:
			//Implement the code to enable CTS flow control
			TempReg |= ( 1 << USART_CR3_CTSE);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2e:	60fb      	str	r3, [r7, #12]
			break;
 8001f30:	e009      	b.n	8001f46 <USART_Init+0x172>

		case USART_HW_FLOW_CTRL_RTS:
			//Implement the code to enable RTS flow control
			TempReg |= (1 << USART_CR3_RTSE);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f38:	60fb      	str	r3, [r7, #12]
			break;
 8001f3a:	e004      	b.n	8001f46 <USART_Init+0x172>

		case USART_HW_FLOW_CTRL_CTS_RTS:
			//Implement the code to enable both CTS and RTS Flow control
			TempReg |= ( ( 1 << USART_CR3_CTSE) | ( 1 << USART_CR3_RTSE) );
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001f42:	60fb      	str	r3, [r7, #12]
			break;
 8001f44:	bf00      	nop
		}


		pUSARTx->USART_CR3 = TempReg;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	615a      	str	r2, [r3, #20]

		/******************************** Configuration of BRR(Baudrate register)******************************************/

		USART_SetBaudRate(UART_ConfigArray[counter].USART_ID ,UART_ConfigArray[counter].USART_Baud);
 8001f4c:	7afa      	ldrb	r2, [r7, #11]
 8001f4e:	4924      	ldr	r1, [pc, #144]	; (8001fe0 <USART_Init+0x20c>)
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	7818      	ldrb	r0, [r3, #0]
 8001f5c:	7afa      	ldrb	r2, [r7, #11]
 8001f5e:	4920      	ldr	r1, [pc, #128]	; (8001fe0 <USART_Init+0x20c>)
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f7ff feb4 	bl	8001cdc <USART_SetBaudRate>


		// callback functions initialization
		TX_ptr[UART_ConfigArray[counter].USART_ID] = UART_ConfigArray[counter].TX_CompleteFunptr;
 8001f74:	7afa      	ldrb	r2, [r7, #11]
 8001f76:	491a      	ldr	r1, [pc, #104]	; (8001fe0 <USART_Init+0x20c>)
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	7afa      	ldrb	r2, [r7, #11]
 8001f88:	4915      	ldr	r1, [pc, #84]	; (8001fe0 <USART_Init+0x20c>)
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	330c      	adds	r3, #12
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <USART_Init+0x214>)
 8001f9a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
		RX_ptr[UART_ConfigArray[counter].USART_ID] = UART_ConfigArray[counter].RX_CompleteFunptr;
 8001f9e:	7afa      	ldrb	r2, [r7, #11]
 8001fa0:	490f      	ldr	r1, [pc, #60]	; (8001fe0 <USART_Init+0x20c>)
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	7afa      	ldrb	r2, [r7, #11]
 8001fb2:	490b      	ldr	r1, [pc, #44]	; (8001fe0 <USART_Init+0x20c>)
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3310      	adds	r3, #16
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <USART_Init+0x218>)
 8001fc4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	for(counter = 0 ; counter<NUMBER_OF_CONFIGURED_UART;counter++)
 8001fc8:	7afb      	ldrb	r3, [r7, #11]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	72fb      	strb	r3, [r7, #11]
 8001fce:	7afb      	ldrb	r3, [r7, #11]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	f67f af14 	bls.w	8001dfe <USART_Init+0x2a>
	}
}
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200000d0 	.word	0x200000d0
 8001fe4:	200000b8 	.word	0x200000b8
 8001fe8:	200004bc 	.word	0x200004bc
 8001fec:	200004a4 	.word	0x200004a4

08001ff0 <Uart_SendDataAsync>:

/*************************** New with interrupt **************************/


uint8_t Uart_SendDataAsync(uint8_t Id , uint8_t* Data , uint16_t DataSize)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	6039      	str	r1, [r7, #0]
 8001ffa:	71fb      	strb	r3, [r7, #7]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	80bb      	strh	r3, [r7, #4]
	uint8_t returnValue=UART_E_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	73fb      	strb	r3, [r7, #15]

	if(Uart_IntTxeDetails[Id].Flag==UART_TXE_NOT_BUSY)
 8002004:	79fa      	ldrb	r2, [r7, #7]
 8002006:	4920      	ldr	r1, [pc, #128]	; (8002088 <Uart_SendDataAsync+0x98>)
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	330a      	adds	r3, #10
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d12d      	bne.n	8002078 <Uart_SendDataAsync+0x88>
	{
		/*set values for tx */
		Uart_IntTxeDetails[Id].Data = Data;
 800201c:	79fa      	ldrb	r2, [r7, #7]
 800201e:	491a      	ldr	r1, [pc, #104]	; (8002088 <Uart_SendDataAsync+0x98>)
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	3304      	adds	r3, #4
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	601a      	str	r2, [r3, #0]
		Uart_IntTxeDetails[Id].DataSizeCounter = DataSize;
 8002030:	79fa      	ldrb	r2, [r7, #7]
 8002032:	4915      	ldr	r1, [pc, #84]	; (8002088 <Uart_SendDataAsync+0x98>)
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	88ba      	ldrh	r2, [r7, #4]
 8002040:	801a      	strh	r2, [r3, #0]
		Uart_IntTxeDetails[Id].CurrentIndex = 0;
 8002042:	79fa      	ldrb	r2, [r7, #7]
 8002044:	4910      	ldr	r1, [pc, #64]	; (8002088 <Uart_SendDataAsync+0x98>)
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	3308      	adds	r3, #8
 8002052:	2200      	movs	r2, #0
 8002054:	801a      	strh	r2, [r3, #0]
		Uart_IntTxeDetails[Id].Flag = UART_TXE_BUSY;
 8002056:	79fa      	ldrb	r2, [r7, #7]
 8002058:	490b      	ldr	r1, [pc, #44]	; (8002088 <Uart_SendDataAsync+0x98>)
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	330a      	adds	r3, #10
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]

		/*enable interrupt*/
		Uart_IntControl(Id , UART_INT_TXE , 1);
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	2201      	movs	r2, #1
 800206e:	2107      	movs	r1, #7
 8002070:	4618      	mov	r0, r3
 8002072:	f000 f861 	bl	8002138 <Uart_IntControl>
 8002076:	e001      	b.n	800207c <Uart_SendDataAsync+0x8c>
		 * after enabling the interrupt it will jump automatically to
		 * the ISR as DR is empty (Architecture do this)*/
	}
	else
	{
		returnValue=UART_E_NOT_OK;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
	}

	return returnValue;
 800207c:	7bfb      	ldrb	r3, [r7, #15]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200003e4 	.word	0x200003e4

0800208c <Uart_ReceiveDataASync>:




uint8_t Uart_ReceiveDataASync(uint8_t Id , uint8_t* Data, uint16_t DataSize)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	6039      	str	r1, [r7, #0]
 8002096:	71fb      	strb	r3, [r7, #7]
 8002098:	4613      	mov	r3, r2
 800209a:	80bb      	strh	r3, [r7, #4]
	USART_RegDef_t *pUSARTx = USART_Arr[Id] ;
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	4a24      	ldr	r2, [pc, #144]	; (8002130 <Uart_ReceiveDataASync+0xa4>)
 80020a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a4:	60bb      	str	r3, [r7, #8]
	pUSARTx->USART_CR1 |=(1<< 2);
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f043 0204 	orr.w	r2, r3, #4
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	60da      	str	r2, [r3, #12]
	uint8_t returnValue = UART_E_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	73fb      	strb	r3, [r7, #15]
	if(Uart_IntRxDetails[Id].Flag == UART_RXE_NOT_BUSY)
 80020b6:	79fa      	ldrb	r2, [r7, #7]
 80020b8:	491e      	ldr	r1, [pc, #120]	; (8002134 <Uart_ReceiveDataASync+0xa8>)
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	330a      	adds	r3, #10
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d127      	bne.n	800211e <Uart_ReceiveDataASync+0x92>
	{
		/*set values for tx */
		Uart_IntRxDetails[Id].Data = Data;
 80020ce:	79fa      	ldrb	r2, [r7, #7]
 80020d0:	4918      	ldr	r1, [pc, #96]	; (8002134 <Uart_ReceiveDataASync+0xa8>)
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	3304      	adds	r3, #4
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	601a      	str	r2, [r3, #0]
		Uart_IntRxDetails[Id].DataSizeCounter = DataSize;
 80020e2:	79fa      	ldrb	r2, [r7, #7]
 80020e4:	4913      	ldr	r1, [pc, #76]	; (8002134 <Uart_ReceiveDataASync+0xa8>)
 80020e6:	4613      	mov	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	88ba      	ldrh	r2, [r7, #4]
 80020f2:	801a      	strh	r2, [r3, #0]
		Uart_IntRxDetails[Id].CurrentIndex = 0;
 80020f4:	79fa      	ldrb	r2, [r7, #7]
 80020f6:	490f      	ldr	r1, [pc, #60]	; (8002134 <Uart_ReceiveDataASync+0xa8>)
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	3308      	adds	r3, #8
 8002104:	2200      	movs	r2, #0
 8002106:	801a      	strh	r2, [r3, #0]
		Uart_IntRxDetails[Id].Flag = UART_RXE_BUSY;
 8002108:	79fa      	ldrb	r2, [r7, #7]
 800210a:	490a      	ldr	r1, [pc, #40]	; (8002134 <Uart_ReceiveDataASync+0xa8>)
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	330a      	adds	r3, #10
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	e001      	b.n	8002122 <Uart_ReceiveDataASync+0x96>
	}
	else
	{
		returnValue=UART_E_NOT_OK;
 800211e:	2301      	movs	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
	}

	return returnValue;
 8002122:	7bfb      	ldrb	r3, [r7, #15]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	200000b8 	.word	0x200000b8
 8002134:	2000042c 	.word	0x2000042c

08002138 <Uart_IntControl>:

/*******************************   END   *********************************/


void Uart_IntControl(uint8_t USART_ID , uint8_t IntSource , uint8_t State)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
 8002142:	460b      	mov	r3, r1
 8002144:	71bb      	strb	r3, [r7, #6]
 8002146:	4613      	mov	r3, r2
 8002148:	717b      	strb	r3, [r7, #5]
	USART_RegDef_t *pUSARTx = USART_Arr[USART_ID];
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	4a12      	ldr	r2, [pc, #72]	; (8002198 <Uart_IntControl+0x60>)
 800214e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002152:	60fb      	str	r3, [r7, #12]

	switch(State)
 8002154:	797b      	ldrb	r3, [r7, #5]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00c      	beq.n	8002174 <Uart_IntControl+0x3c>
 800215a:	2b01      	cmp	r3, #1
 800215c:	d000      	beq.n	8002160 <Uart_IntControl+0x28>
		//Implement the code to disable interrupt for IntSource
		pUSARTx->USART_CR1 &= ~( One_bit_shift << IntSource);
		break;
	}

}
 800215e:	e014      	b.n	800218a <Uart_IntControl+0x52>
		pUSARTx->USART_CR1 |= ( One_bit_shift << IntSource);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	79ba      	ldrb	r2, [r7, #6]
 8002166:	2101      	movs	r1, #1
 8002168:	fa01 f202 	lsl.w	r2, r1, r2
 800216c:	431a      	orrs	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	60da      	str	r2, [r3, #12]
		break;
 8002172:	e00a      	b.n	800218a <Uart_IntControl+0x52>
		pUSARTx->USART_CR1 &= ~( One_bit_shift << IntSource);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	79ba      	ldrb	r2, [r7, #6]
 800217a:	2101      	movs	r1, #1
 800217c:	fa01 f202 	lsl.w	r2, r1, r2
 8002180:	43d2      	mvns	r2, r2
 8002182:	401a      	ands	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	60da      	str	r2, [r3, #12]
		break;
 8002188:	bf00      	nop
}
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	200000b8 	.word	0x200000b8

0800219c <UART_IRQConfig>:


void UART_IRQConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	460a      	mov	r2, r1
 80021a6:	71fb      	strb	r3, [r7, #7]
 80021a8:	4613      	mov	r3, r2
 80021aa:	71bb      	strb	r3, [r7, #6]

	uint8_t ISER_Num=0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	73fb      	strb	r3, [r7, #15]
	uint8_t IRQActualNumber=0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	73bb      	strb	r3, [r7, #14]


	ISER_Num = IRQNumber / 32;
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	73fb      	strb	r3, [r7, #15]
	IRQActualNumber = IRQNumber % 32;
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	73bb      	strb	r3, [r7, #14]


	switch(EnorDi)
 80021c2:	79bb      	ldrb	r3, [r7, #6]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00e      	beq.n	80021e6 <UART_IRQConfig+0x4a>
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d000      	beq.n	80021ce <UART_IRQConfig+0x32>
		break;
	case 0:
		NVIC_ICER_Base_Addr[ISER_Num] = 1<< IRQActualNumber;
		break;
	}
}
 80021cc:	e015      	b.n	80021fa <UART_IRQConfig+0x5e>
		NVIC_ISER_Base_Addr[ISER_Num] = 1<< IRQActualNumber;
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80021d6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80021da:	7bba      	ldrb	r2, [r7, #14]
 80021dc:	2101      	movs	r1, #1
 80021de:	fa01 f202 	lsl.w	r2, r1, r2
 80021e2:	601a      	str	r2, [r3, #0]
		break;
 80021e4:	e009      	b.n	80021fa <UART_IRQConfig+0x5e>
		NVIC_ICER_Base_Addr[ISER_Num] = 1<< IRQActualNumber;
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	009a      	lsls	r2, r3, #2
 80021ea:	4b07      	ldr	r3, [pc, #28]	; (8002208 <UART_IRQConfig+0x6c>)
 80021ec:	4413      	add	r3, r2
 80021ee:	7bba      	ldrb	r2, [r7, #14]
 80021f0:	2101      	movs	r1, #1
 80021f2:	fa01 f202 	lsl.w	r2, r1, r2
 80021f6:	601a      	str	r2, [r3, #0]
		break;
 80021f8:	bf00      	nop
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000e180 	.word	0xe000e180

0800220c <USART2_IRQHandler>:

/*************************** USART1 IRQ handler *****************************/


void USART2_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
	//	volatile uint8_t Local_SR=0;
	//	Local_SR=USART_Arr[USART2_]->USART_SR;
	USART_RegDef_t *pUSARTx;
	pUSARTx = USART_Arr[UART_ConfigArray[1].USART_ID];
 8002212:	4b38      	ldr	r3, [pc, #224]	; (80022f4 <USART2_IRQHandler+0xe8>)
 8002214:	7d1b      	ldrb	r3, [r3, #20]
 8002216:	461a      	mov	r2, r3
 8002218:	4b37      	ldr	r3, [pc, #220]	; (80022f8 <USART2_IRQHandler+0xec>)
 800221a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221e:	607b      	str	r3, [r7, #4]
	/* Handling RX */
	if ( USART_GetFlagStatus(USART2_,USART_FLAG_RXNE) != 0)
 8002220:	2105      	movs	r1, #5
 8002222:	2001      	movs	r0, #1
 8002224:	f7ff fd3c 	bl	8001ca0 <USART_GetFlagStatus>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d02f      	beq.n	800228e <USART2_IRQHandler+0x82>
	{
		Uart_IntRxDetails[USART2_].Data[Uart_IntRxDetails[USART2_].CurrentIndex]=USART_Arr[USART2_]->USART_DR;
 800222e:	4b33      	ldr	r3, [pc, #204]	; (80022fc <USART2_IRQHandler+0xf0>)
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	4a32      	ldr	r2, [pc, #200]	; (80022fc <USART2_IRQHandler+0xf0>)
 8002234:	8a92      	ldrh	r2, [r2, #20]
 8002236:	b292      	uxth	r2, r2
 8002238:	4413      	add	r3, r2
 800223a:	4a2f      	ldr	r2, [pc, #188]	; (80022f8 <USART2_IRQHandler+0xec>)
 800223c:	6852      	ldr	r2, [r2, #4]
 800223e:	6852      	ldr	r2, [r2, #4]
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	701a      	strb	r2, [r3, #0]
		pUSARTx->USART_SR &=~(1<< USART_FLAG_RXNE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f023 0220 	bic.w	r2, r3, #32
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	601a      	str	r2, [r3, #0]

		Uart_IntRxDetails[USART2_].CurrentIndex ++;
 8002250:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <USART2_IRQHandler+0xf0>)
 8002252:	8a9b      	ldrh	r3, [r3, #20]
 8002254:	b29b      	uxth	r3, r3
 8002256:	3301      	adds	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	4b28      	ldr	r3, [pc, #160]	; (80022fc <USART2_IRQHandler+0xf0>)
 800225c:	829a      	strh	r2, [r3, #20]
		if(Uart_IntRxDetails[USART2_].CurrentIndex==Uart_IntRxDetails[USART2_].DataSizeCounter )
 800225e:	4b27      	ldr	r3, [pc, #156]	; (80022fc <USART2_IRQHandler+0xf0>)
 8002260:	8a9b      	ldrh	r3, [r3, #20]
 8002262:	b29a      	uxth	r2, r3
 8002264:	4b25      	ldr	r3, [pc, #148]	; (80022fc <USART2_IRQHandler+0xf0>)
 8002266:	899b      	ldrh	r3, [r3, #12]
 8002268:	b29b      	uxth	r3, r3
 800226a:	429a      	cmp	r2, r3
 800226c:	d13e      	bne.n	80022ec <USART2_IRQHandler+0xe0>
		{
			Uart_IntRxDetails[USART2_].Flag = UART_RXE_NOT_BUSY;
 800226e:	4b23      	ldr	r3, [pc, #140]	; (80022fc <USART2_IRQHandler+0xf0>)
 8002270:	2200      	movs	r2, #0
 8002272:	759a      	strb	r2, [r3, #22]

			Uart_IntRxDetails[USART2_].CurrentIndex=0;
 8002274:	4b21      	ldr	r3, [pc, #132]	; (80022fc <USART2_IRQHandler+0xf0>)
 8002276:	2200      	movs	r2, #0
 8002278:	829a      	strh	r2, [r3, #20]
			pUSARTx->USART_CR1 &=~(1<< 2);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f023 0204 	bic.w	r2, r3, #4
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	60da      	str	r2, [r3, #12]
			RX_ptr[USART2_]();     // callback function to inform the user that the reception has finished
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <USART2_IRQHandler+0xf4>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4798      	blx	r3
		}


	}

}
 800228c:	e02e      	b.n	80022ec <USART2_IRQHandler+0xe0>
	else if(USART_GetFlagStatus(USART2_,USART_FLAG_TXE) != 0)
 800228e:	2107      	movs	r1, #7
 8002290:	2001      	movs	r0, #1
 8002292:	f7ff fd05 	bl	8001ca0 <USART_GetFlagStatus>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d027      	beq.n	80022ec <USART2_IRQHandler+0xe0>
		if(Uart_IntTxeDetails[USART2_].CurrentIndex < Uart_IntTxeDetails[USART2_].DataSizeCounter)
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <USART2_IRQHandler+0xf8>)
 800229e:	8a9b      	ldrh	r3, [r3, #20]
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	4b18      	ldr	r3, [pc, #96]	; (8002304 <USART2_IRQHandler+0xf8>)
 80022a4:	899b      	ldrh	r3, [r3, #12]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d211      	bcs.n	80022d0 <USART2_IRQHandler+0xc4>
			USART_Arr[USART2_]->USART_DR = Uart_IntTxeDetails[USART2_].Data[Uart_IntTxeDetails[USART2_].CurrentIndex];
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <USART2_IRQHandler+0xec>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4a14      	ldr	r2, [pc, #80]	; (8002304 <USART2_IRQHandler+0xf8>)
 80022b2:	6912      	ldr	r2, [r2, #16]
 80022b4:	4913      	ldr	r1, [pc, #76]	; (8002304 <USART2_IRQHandler+0xf8>)
 80022b6:	8a89      	ldrh	r1, [r1, #20]
 80022b8:	b289      	uxth	r1, r1
 80022ba:	440a      	add	r2, r1
 80022bc:	7812      	ldrb	r2, [r2, #0]
 80022be:	605a      	str	r2, [r3, #4]
			Uart_IntTxeDetails[USART2_].CurrentIndex++;
 80022c0:	4b10      	ldr	r3, [pc, #64]	; (8002304 <USART2_IRQHandler+0xf8>)
 80022c2:	8a9b      	ldrh	r3, [r3, #20]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3301      	adds	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <USART2_IRQHandler+0xf8>)
 80022cc:	829a      	strh	r2, [r3, #20]
}
 80022ce:	e00d      	b.n	80022ec <USART2_IRQHandler+0xe0>
			Uart_IntControl(USART2_ , UART_INT_TXE , 0);
 80022d0:	2200      	movs	r2, #0
 80022d2:	2107      	movs	r1, #7
 80022d4:	2001      	movs	r0, #1
 80022d6:	f7ff ff2f 	bl	8002138 <Uart_IntControl>
			Uart_IntTxeDetails[USART2_].CurrentIndex=0;
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <USART2_IRQHandler+0xf8>)
 80022dc:	2200      	movs	r2, #0
 80022de:	829a      	strh	r2, [r3, #20]
			Uart_IntTxeDetails[USART2_].Flag = UART_TXE_NOT_BUSY;
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <USART2_IRQHandler+0xf8>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	759a      	strb	r2, [r3, #22]
			TX_ptr[USART2_]();   // callback function to inform the user that the transmission has finished
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <USART2_IRQHandler+0xfc>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4798      	blx	r3
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	200000d0 	.word	0x200000d0
 80022f8:	200000b8 	.word	0x200000b8
 80022fc:	2000042c 	.word	0x2000042c
 8002300:	200004a4 	.word	0x200004a4
 8002304:	200003e4 	.word	0x200003e4
 8002308:	200004bc 	.word	0x200004bc

0800230c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
	//	volatile uint8_t Local_SR=0;
	//	Local_SR=USART_Arr[USART2_]->USART_SR;

	/* Handling RX */
	if ( USART_GetFlagStatus(USART1_,USART_FLAG_RXNE) != 1)
 8002310:	2105      	movs	r1, #5
 8002312:	2000      	movs	r0, #0
 8002314:	f7ff fcc4 	bl	8001ca0 <USART_GetFlagStatus>
 8002318:	4603      	mov	r3, r0
 800231a:	2b01      	cmp	r3, #1
 800231c:	d023      	beq.n	8002366 <USART1_IRQHandler+0x5a>
	{
		Uart_IntRxDetails[USART1_].Data[Uart_IntRxDetails[USART1_].CurrentIndex]=USART_Arr[USART1_]->USART_DR;
 800231e:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <USART1_IRQHandler+0xb8>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4a28      	ldr	r2, [pc, #160]	; (80023c4 <USART1_IRQHandler+0xb8>)
 8002324:	8912      	ldrh	r2, [r2, #8]
 8002326:	b292      	uxth	r2, r2
 8002328:	4413      	add	r3, r2
 800232a:	4a27      	ldr	r2, [pc, #156]	; (80023c8 <USART1_IRQHandler+0xbc>)
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	6852      	ldr	r2, [r2, #4]
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	701a      	strb	r2, [r3, #0]


		if(Uart_IntRxDetails[USART1_].CurrentIndex<Uart_IntRxDetails[USART1_].DataSizeCounter - 1)
 8002334:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <USART1_IRQHandler+0xb8>)
 8002336:	891b      	ldrh	r3, [r3, #8]
 8002338:	b29b      	uxth	r3, r3
 800233a:	461a      	mov	r2, r3
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <USART1_IRQHandler+0xb8>)
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	b29b      	uxth	r3, r3
 8002342:	3b01      	subs	r3, #1
 8002344:	429a      	cmp	r2, r3
 8002346:	da07      	bge.n	8002358 <USART1_IRQHandler+0x4c>
		{
			Uart_IntRxDetails[USART1_].CurrentIndex ++;
 8002348:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <USART1_IRQHandler+0xb8>)
 800234a:	891b      	ldrh	r3, [r3, #8]
 800234c:	b29b      	uxth	r3, r3
 800234e:	3301      	adds	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <USART1_IRQHandler+0xb8>)
 8002354:	811a      	strh	r2, [r3, #8]

			TX_ptr[USART1_]();   // callback function to inform the user that the transmission has finished
		}
	}

}
 8002356:	e032      	b.n	80023be <USART1_IRQHandler+0xb2>
			Uart_IntRxDetails[USART1_].Flag = UART_RXE_NOT_BUSY;
 8002358:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <USART1_IRQHandler+0xb8>)
 800235a:	2200      	movs	r2, #0
 800235c:	729a      	strb	r2, [r3, #10]
			RX_ptr[USART1_]();     // callback function to inform the user that the reception has finished
 800235e:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <USART1_IRQHandler+0xc0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4798      	blx	r3
}
 8002364:	e02b      	b.n	80023be <USART1_IRQHandler+0xb2>
	else if(USART_GetFlagStatus(USART1_,USART_FLAG_TXE) != 0)
 8002366:	2107      	movs	r1, #7
 8002368:	2000      	movs	r0, #0
 800236a:	f7ff fc99 	bl	8001ca0 <USART_GetFlagStatus>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d024      	beq.n	80023be <USART1_IRQHandler+0xb2>
		if(Uart_IntTxeDetails[USART1_].CurrentIndex < Uart_IntTxeDetails[USART1_].DataSizeCounter)
 8002374:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <USART1_IRQHandler+0xc4>)
 8002376:	891b      	ldrh	r3, [r3, #8]
 8002378:	b29a      	uxth	r2, r3
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <USART1_IRQHandler+0xc4>)
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	b29b      	uxth	r3, r3
 8002380:	429a      	cmp	r2, r3
 8002382:	d211      	bcs.n	80023a8 <USART1_IRQHandler+0x9c>
			USART_Arr[USART1_]->USART_DR = Uart_IntTxeDetails[USART1_].Data[Uart_IntTxeDetails[USART1_].CurrentIndex];
 8002384:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <USART1_IRQHandler+0xbc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a11      	ldr	r2, [pc, #68]	; (80023d0 <USART1_IRQHandler+0xc4>)
 800238a:	6852      	ldr	r2, [r2, #4]
 800238c:	4910      	ldr	r1, [pc, #64]	; (80023d0 <USART1_IRQHandler+0xc4>)
 800238e:	8909      	ldrh	r1, [r1, #8]
 8002390:	b289      	uxth	r1, r1
 8002392:	440a      	add	r2, r1
 8002394:	7812      	ldrb	r2, [r2, #0]
 8002396:	605a      	str	r2, [r3, #4]
			Uart_IntTxeDetails[USART1_].CurrentIndex++;
 8002398:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <USART1_IRQHandler+0xc4>)
 800239a:	891b      	ldrh	r3, [r3, #8]
 800239c:	b29b      	uxth	r3, r3
 800239e:	3301      	adds	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <USART1_IRQHandler+0xc4>)
 80023a4:	811a      	strh	r2, [r3, #8]
}
 80023a6:	e00a      	b.n	80023be <USART1_IRQHandler+0xb2>
			Uart_IntControl(USART1_ , UART_INT_TXE , 0);
 80023a8:	2200      	movs	r2, #0
 80023aa:	2107      	movs	r1, #7
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7ff fec3 	bl	8002138 <Uart_IntControl>
			Uart_IntTxeDetails[USART1_].Flag = UART_TXE_NOT_BUSY;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <USART1_IRQHandler+0xc4>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	729a      	strb	r2, [r3, #10]
			TX_ptr[USART1_]();   // callback function to inform the user that the transmission has finished
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <USART1_IRQHandler+0xc8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4798      	blx	r3
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	2000042c 	.word	0x2000042c
 80023c8:	200000b8 	.word	0x200000b8
 80023cc:	200004a4 	.word	0x200004a4
 80023d0:	200003e4 	.word	0x200003e4
 80023d4:	200004bc 	.word	0x200004bc

080023d8 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
	//	volatile uint8_t Local_SR=0;
	//	Local_SR=USART_Arr[USART2_]->USART_SR;
	USART_RegDef_t *pUSARTx;
	pUSARTx = USART_Arr[UART_ConfigArray[USART3_].USART_ID];
 80023de:	4b3a      	ldr	r3, [pc, #232]	; (80024c8 <USART3_IRQHandler+0xf0>)
 80023e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b39      	ldr	r3, [pc, #228]	; (80024cc <USART3_IRQHandler+0xf4>)
 80023e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ec:	607b      	str	r3, [r7, #4]
	/* Handling RX */
	if ( USART_GetFlagStatus(USART3_,USART_FLAG_RXNE) != 0)
 80023ee:	2105      	movs	r1, #5
 80023f0:	2002      	movs	r0, #2
 80023f2:	f7ff fc55 	bl	8001ca0 <USART_GetFlagStatus>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d030      	beq.n	800245e <USART3_IRQHandler+0x86>
	{
		Uart_IntRxDetails[USART3_].Data[Uart_IntRxDetails[USART3_].CurrentIndex]=USART_Arr[USART3_]->USART_DR;
 80023fc:	4b34      	ldr	r3, [pc, #208]	; (80024d0 <USART3_IRQHandler+0xf8>)
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	4a33      	ldr	r2, [pc, #204]	; (80024d0 <USART3_IRQHandler+0xf8>)
 8002402:	8c12      	ldrh	r2, [r2, #32]
 8002404:	b292      	uxth	r2, r2
 8002406:	4413      	add	r3, r2
 8002408:	4a30      	ldr	r2, [pc, #192]	; (80024cc <USART3_IRQHandler+0xf4>)
 800240a:	6892      	ldr	r2, [r2, #8]
 800240c:	6852      	ldr	r2, [r2, #4]
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	701a      	strb	r2, [r3, #0]
		pUSARTx->USART_SR &=~(1<< USART_FLAG_RXNE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 0220 	bic.w	r2, r3, #32
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	601a      	str	r2, [r3, #0]

		Uart_IntRxDetails[USART3_].CurrentIndex ++;
 800241e:	4b2c      	ldr	r3, [pc, #176]	; (80024d0 <USART3_IRQHandler+0xf8>)
 8002420:	8c1b      	ldrh	r3, [r3, #32]
 8002422:	b29b      	uxth	r3, r3
 8002424:	3301      	adds	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <USART3_IRQHandler+0xf8>)
 800242a:	841a      	strh	r2, [r3, #32]
		if(Uart_IntRxDetails[USART3_].CurrentIndex==Uart_IntRxDetails[USART3_].DataSizeCounter )
 800242c:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <USART3_IRQHandler+0xf8>)
 800242e:	8c1b      	ldrh	r3, [r3, #32]
 8002430:	b29a      	uxth	r2, r3
 8002432:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <USART3_IRQHandler+0xf8>)
 8002434:	8b1b      	ldrh	r3, [r3, #24]
 8002436:	b29b      	uxth	r3, r3
 8002438:	429a      	cmp	r2, r3
 800243a:	d140      	bne.n	80024be <USART3_IRQHandler+0xe6>
		{
			Uart_IntRxDetails[USART3_].Flag = UART_RXE_NOT_BUSY;
 800243c:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <USART3_IRQHandler+0xf8>)
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			Uart_IntRxDetails[USART3_].CurrentIndex=0;
 8002444:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <USART3_IRQHandler+0xf8>)
 8002446:	2200      	movs	r2, #0
 8002448:	841a      	strh	r2, [r3, #32]
			pUSARTx->USART_CR1 &=~(1<< 2);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f023 0204 	bic.w	r2, r3, #4
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	60da      	str	r2, [r3, #12]
			RX_ptr[USART3_]();     // callback function to inform the user that the reception has finished
 8002456:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <USART3_IRQHandler+0xfc>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	4798      	blx	r3
		}


	}

}
 800245c:	e02f      	b.n	80024be <USART3_IRQHandler+0xe6>
	else if(USART_GetFlagStatus(USART3_,USART_FLAG_TXE) != 0)
 800245e:	2107      	movs	r1, #7
 8002460:	2002      	movs	r0, #2
 8002462:	f7ff fc1d 	bl	8001ca0 <USART_GetFlagStatus>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d028      	beq.n	80024be <USART3_IRQHandler+0xe6>
		if(Uart_IntTxeDetails[USART3_].CurrentIndex < Uart_IntTxeDetails[USART3_].DataSizeCounter)
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <USART3_IRQHandler+0x100>)
 800246e:	8c1b      	ldrh	r3, [r3, #32]
 8002470:	b29a      	uxth	r2, r3
 8002472:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <USART3_IRQHandler+0x100>)
 8002474:	8b1b      	ldrh	r3, [r3, #24]
 8002476:	b29b      	uxth	r3, r3
 8002478:	429a      	cmp	r2, r3
 800247a:	d211      	bcs.n	80024a0 <USART3_IRQHandler+0xc8>
			USART_Arr[USART3_]->USART_DR = Uart_IntTxeDetails[USART3_].Data[Uart_IntTxeDetails[USART3_].CurrentIndex];
 800247c:	4b13      	ldr	r3, [pc, #76]	; (80024cc <USART3_IRQHandler+0xf4>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	4a15      	ldr	r2, [pc, #84]	; (80024d8 <USART3_IRQHandler+0x100>)
 8002482:	69d2      	ldr	r2, [r2, #28]
 8002484:	4914      	ldr	r1, [pc, #80]	; (80024d8 <USART3_IRQHandler+0x100>)
 8002486:	8c09      	ldrh	r1, [r1, #32]
 8002488:	b289      	uxth	r1, r1
 800248a:	440a      	add	r2, r1
 800248c:	7812      	ldrb	r2, [r2, #0]
 800248e:	605a      	str	r2, [r3, #4]
			Uart_IntTxeDetails[USART3_].CurrentIndex++;
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <USART3_IRQHandler+0x100>)
 8002492:	8c1b      	ldrh	r3, [r3, #32]
 8002494:	b29b      	uxth	r3, r3
 8002496:	3301      	adds	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <USART3_IRQHandler+0x100>)
 800249c:	841a      	strh	r2, [r3, #32]
}
 800249e:	e00e      	b.n	80024be <USART3_IRQHandler+0xe6>
			Uart_IntControl(USART3_ , UART_INT_TXE , 0);
 80024a0:	2200      	movs	r2, #0
 80024a2:	2107      	movs	r1, #7
 80024a4:	2002      	movs	r0, #2
 80024a6:	f7ff fe47 	bl	8002138 <Uart_IntControl>
			Uart_IntTxeDetails[USART3_].CurrentIndex=0;
 80024aa:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <USART3_IRQHandler+0x100>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	841a      	strh	r2, [r3, #32]
			Uart_IntTxeDetails[USART3_].Flag = UART_TXE_NOT_BUSY;
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <USART3_IRQHandler+0x100>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			TX_ptr[USART3_]();   // callback function to inform the user that the transmission has finished
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <USART3_IRQHandler+0x104>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	4798      	blx	r3
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200000d0 	.word	0x200000d0
 80024cc:	200000b8 	.word	0x200000b8
 80024d0:	2000042c 	.word	0x2000042c
 80024d4:	200004a4 	.word	0x200004a4
 80024d8:	200003e4 	.word	0x200003e4
 80024dc:	200004bc 	.word	0x200004bc

080024e0 <UART4_IRQHandler>:


void UART4_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
	//	volatile uint8_t Local_SR=0;
	//	Local_SR=USART_Arr[USART3_]->USART_SR;
	USART_RegDef_t *pUSARTx;
	pUSARTx = USART_Arr[UART_ConfigArray[USART4_].USART_ID];
 80024e6:	4b3a      	ldr	r3, [pc, #232]	; (80025d0 <UART4_IRQHandler+0xf0>)
 80024e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b39      	ldr	r3, [pc, #228]	; (80025d4 <UART4_IRQHandler+0xf4>)
 80024f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f4:	607b      	str	r3, [r7, #4]
	/* Handling RX */
	if ( USART_GetFlagStatus(USART4_,USART_FLAG_RXNE) != 0)
 80024f6:	2105      	movs	r1, #5
 80024f8:	2003      	movs	r0, #3
 80024fa:	f7ff fbd1 	bl	8001ca0 <USART_GetFlagStatus>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d030      	beq.n	8002566 <UART4_IRQHandler+0x86>
	{
		Uart_IntRxDetails[USART4_].Data[Uart_IntRxDetails[USART4_].CurrentIndex]=USART_Arr[USART4_]->USART_DR;
 8002504:	4b34      	ldr	r3, [pc, #208]	; (80025d8 <UART4_IRQHandler+0xf8>)
 8002506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002508:	4a33      	ldr	r2, [pc, #204]	; (80025d8 <UART4_IRQHandler+0xf8>)
 800250a:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800250c:	b292      	uxth	r2, r2
 800250e:	4413      	add	r3, r2
 8002510:	4a30      	ldr	r2, [pc, #192]	; (80025d4 <UART4_IRQHandler+0xf4>)
 8002512:	68d2      	ldr	r2, [r2, #12]
 8002514:	6852      	ldr	r2, [r2, #4]
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]
		pUSARTx->USART_SR &=~(1<< USART_FLAG_RXNE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 0220 	bic.w	r2, r3, #32
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	601a      	str	r2, [r3, #0]

		Uart_IntRxDetails[USART4_].CurrentIndex ++;
 8002526:	4b2c      	ldr	r3, [pc, #176]	; (80025d8 <UART4_IRQHandler+0xf8>)
 8002528:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800252a:	b29b      	uxth	r3, r3
 800252c:	3301      	adds	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	4b29      	ldr	r3, [pc, #164]	; (80025d8 <UART4_IRQHandler+0xf8>)
 8002532:	859a      	strh	r2, [r3, #44]	; 0x2c
		if(Uart_IntRxDetails[USART4_].CurrentIndex==Uart_IntRxDetails[USART4_].DataSizeCounter )
 8002534:	4b28      	ldr	r3, [pc, #160]	; (80025d8 <UART4_IRQHandler+0xf8>)
 8002536:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002538:	b29a      	uxth	r2, r3
 800253a:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <UART4_IRQHandler+0xf8>)
 800253c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800253e:	b29b      	uxth	r3, r3
 8002540:	429a      	cmp	r2, r3
 8002542:	d140      	bne.n	80025c6 <UART4_IRQHandler+0xe6>
		{
			Uart_IntRxDetails[USART4_].Flag = UART_RXE_NOT_BUSY;
 8002544:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <UART4_IRQHandler+0xf8>)
 8002546:	2200      	movs	r2, #0
 8002548:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

			Uart_IntRxDetails[USART4_].CurrentIndex=0;
 800254c:	4b22      	ldr	r3, [pc, #136]	; (80025d8 <UART4_IRQHandler+0xf8>)
 800254e:	2200      	movs	r2, #0
 8002550:	859a      	strh	r2, [r3, #44]	; 0x2c
			pUSARTx->USART_CR1 &=~(1<< 2);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f023 0204 	bic.w	r2, r3, #4
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	60da      	str	r2, [r3, #12]
			RX_ptr[USART4_]();     // callback function to inform the user that the reception has finished
 800255e:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <UART4_IRQHandler+0xfc>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	4798      	blx	r3
		}


	}

}
 8002564:	e02f      	b.n	80025c6 <UART4_IRQHandler+0xe6>
	else if(USART_GetFlagStatus(USART4_,USART_FLAG_TXE) != 0)
 8002566:	2107      	movs	r1, #7
 8002568:	2003      	movs	r0, #3
 800256a:	f7ff fb99 	bl	8001ca0 <USART_GetFlagStatus>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d028      	beq.n	80025c6 <UART4_IRQHandler+0xe6>
		if(Uart_IntTxeDetails[USART4_].CurrentIndex < Uart_IntTxeDetails[USART4_].DataSizeCounter)
 8002574:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <UART4_IRQHandler+0x100>)
 8002576:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002578:	b29a      	uxth	r2, r3
 800257a:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <UART4_IRQHandler+0x100>)
 800257c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800257e:	b29b      	uxth	r3, r3
 8002580:	429a      	cmp	r2, r3
 8002582:	d211      	bcs.n	80025a8 <UART4_IRQHandler+0xc8>
			USART_Arr[USART4_]->USART_DR = Uart_IntTxeDetails[USART4_].Data[Uart_IntTxeDetails[USART4_].CurrentIndex];
 8002584:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <UART4_IRQHandler+0xf4>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4a15      	ldr	r2, [pc, #84]	; (80025e0 <UART4_IRQHandler+0x100>)
 800258a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800258c:	4914      	ldr	r1, [pc, #80]	; (80025e0 <UART4_IRQHandler+0x100>)
 800258e:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8002590:	b289      	uxth	r1, r1
 8002592:	440a      	add	r2, r1
 8002594:	7812      	ldrb	r2, [r2, #0]
 8002596:	605a      	str	r2, [r3, #4]
			Uart_IntTxeDetails[USART4_].CurrentIndex++;
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <UART4_IRQHandler+0x100>)
 800259a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800259c:	b29b      	uxth	r3, r3
 800259e:	3301      	adds	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <UART4_IRQHandler+0x100>)
 80025a4:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 80025a6:	e00e      	b.n	80025c6 <UART4_IRQHandler+0xe6>
			Uart_IntControl(USART4_ , UART_INT_TXE , 0);
 80025a8:	2200      	movs	r2, #0
 80025aa:	2107      	movs	r1, #7
 80025ac:	2003      	movs	r0, #3
 80025ae:	f7ff fdc3 	bl	8002138 <Uart_IntControl>
			Uart_IntTxeDetails[USART4_].CurrentIndex=0;
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <UART4_IRQHandler+0x100>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	859a      	strh	r2, [r3, #44]	; 0x2c
			Uart_IntTxeDetails[USART4_].Flag = UART_TXE_NOT_BUSY;
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <UART4_IRQHandler+0x100>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			TX_ptr[USART4_]();   // callback function to inform the user that the transmission has finished
 80025c0:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <UART4_IRQHandler+0x104>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4798      	blx	r3
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200000d0 	.word	0x200000d0
 80025d4:	200000b8 	.word	0x200000b8
 80025d8:	2000042c 	.word	0x2000042c
 80025dc:	200004a4 	.word	0x200004a4
 80025e0:	200003e4 	.word	0x200003e4
 80025e4:	200004bc 	.word	0x200004bc

080025e8 <LED1_ON2>:
{

}

void LED1_ON2(void)   // UART TX complete
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0

}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <main>:




int main(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
	GPIO_Init();
 80025fc:	f7fe fc00 	bl	8000e00 <GPIO_Init>


	USART_Init();
 8002600:	f7ff fbe8 	bl	8001dd4 <USART_Init>
	Uart_IntControl(USART2_, UART_INT_RXNE, ENABLE);   // enable interrupt when receive data through uart
 8002604:	2201      	movs	r2, #1
 8002606:	2105      	movs	r1, #5
 8002608:	2001      	movs	r0, #1
 800260a:	f7ff fd95 	bl	8002138 <Uart_IntControl>
	Uart_IntControl(USART3_, UART_INT_RXNE, ENABLE);   // enable interrupt when receive data through uart
 800260e:	2201      	movs	r2, #1
 8002610:	2105      	movs	r1, #5
 8002612:	2002      	movs	r0, #2
 8002614:	f7ff fd90 	bl	8002138 <Uart_IntControl>
	Uart_IntControl(USART4_, UART_INT_RXNE, ENABLE);
 8002618:	2201      	movs	r2, #1
 800261a:	2105      	movs	r1, #5
 800261c:	2003      	movs	r0, #3
 800261e:	f7ff fd8b 	bl	8002138 <Uart_IntControl>

	UART_IRQConfig(38, ENABLE);  // 38 for USART2_IRQ enable uart2 interrupt in NVIC
 8002622:	2101      	movs	r1, #1
 8002624:	2026      	movs	r0, #38	; 0x26
 8002626:	f7ff fdb9 	bl	800219c <UART_IRQConfig>
	UART_IRQConfig(39, ENABLE);  // 38 for USART2_IRQ enable uart2 interrupt in NVIC
 800262a:	2101      	movs	r1, #1
 800262c:	2027      	movs	r0, #39	; 0x27
 800262e:	f7ff fdb5 	bl	800219c <UART_IRQConfig>
	UART_IRQConfig(52, ENABLE);
 8002632:	2101      	movs	r1, #1
 8002634:	2034      	movs	r0, #52	; 0x34
 8002636:	f7ff fdb1 	bl	800219c <UART_IRQConfig>

	//	TFT_Tx_Manage();
	//TFT_Request_Writing( REG , 0x03 , 0x0000);


	Uart_ReceiveDataASync(USART2_, RX_Buffer, JETSON_PACKET_LENGTH);
 800263a:	2208      	movs	r2, #8
 800263c:	4915      	ldr	r1, [pc, #84]	; (8002694 <main+0x9c>)
 800263e:	2001      	movs	r0, #1
 8002640:	f7ff fd24 	bl	800208c <Uart_ReceiveDataASync>
	Uart_ReceiveDataASync(USART4_, RXbuffer, 8);
 8002644:	2208      	movs	r2, #8
 8002646:	4914      	ldr	r1, [pc, #80]	; (8002698 <main+0xa0>)
 8002648:	2003      	movs	r0, #3
 800264a:	f7ff fd1f 	bl	800208c <Uart_ReceiveDataASync>

	Uart_SendDataAsync(USART2_,TX_Buffer,4);
 800264e:	2204      	movs	r2, #4
 8002650:	4912      	ldr	r1, [pc, #72]	; (800269c <main+0xa4>)
 8002652:	2001      	movs	r0, #1
 8002654:	f7ff fccc 	bl	8001ff0 <Uart_SendDataAsync>



	Timer_Init();
 8002658:	f000 f98e 	bl	8002978 <Timer_Init>
	//			TIM_OC_Init();
	//			TIM_IRQConfig(28, ENABLE);    // 28 is the number of timer2 in the NVIC
	TIM_IRQConfig(29, ENABLE);	  // 29 is the number of timer2 in the NVIC
 800265c:	2101      	movs	r1, #1
 800265e:	201d      	movs	r0, #29
 8002660:	f000 fa62 	bl	8002b28 <TIM_IRQConfig>
	TIM_IRQConfig(30, ENABLE);	  // 29 is the number of timer2 in the NVIC
 8002664:	2101      	movs	r1, #1
 8002666:	201e      	movs	r0, #30
 8002668:	f000 fa5e 	bl	8002b28 <TIM_IRQConfig>

	//			TIM_IntControl(TIMER2_, TIM_UPDATE_EVENT_IE, ENABLE);  // enable interrupt when timer2 overflow
	TIM_IntControl(TIMER3_, TIM_UPDATE_EVENT_IE, ENABLE);  // enable interrupt when timer3 overflow
 800266c:	2201      	movs	r2, #1
 800266e:	2100      	movs	r1, #0
 8002670:	2001      	movs	r0, #1
 8002672:	f000 fa1d 	bl	8002ab0 <TIM_IntControl>
	TIM_IntControl(TIMER4_, TIM_UPDATE_EVENT_IE, ENABLE);  // enable interrupt when timer3 overflow
 8002676:	2201      	movs	r2, #1
 8002678:	2100      	movs	r1, #0
 800267a:	2002      	movs	r0, #2
 800267c:	f000 fa18 	bl	8002ab0 <TIM_IntControl>

	//			Timer_Cmd(TIMER2_, START);    // to start the timer2
	Timer_Cmd(TIMER3_, START);    // to start the timer3
 8002680:	2101      	movs	r1, #1
 8002682:	2001      	movs	r0, #1
 8002684:	f000 f9ea 	bl	8002a5c <Timer_Cmd>
	Timer_Cmd(TIMER4_, START);    // to start the timer3
 8002688:	2101      	movs	r1, #1
 800268a:	2002      	movs	r0, #2
 800268c:	f000 f9e6 	bl	8002a5c <Timer_Cmd>
	//Uart_SendDataAsync(USART3_,TX_Buffer,4);

	//TFT_Request_Reading();
	//Uart_ReceiveDataASync(USART3_, RX_Buffer, 4);

	while (1)
 8002690:	e7fe      	b.n	8002690 <main+0x98>
 8002692:	bf00      	nop
 8002694:	20000474 	.word	0x20000474
 8002698:	20000488 	.word	0x20000488
 800269c:	2000010c 	.word	0x2000010c

080026a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026a6:	e003      	b.n	80026b0 <LoopCopyDataInit>

080026a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026ae:	3104      	adds	r1, #4

080026b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026b0:	480b      	ldr	r0, [pc, #44]	; (80026e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026b2:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026b8:	d3f6      	bcc.n	80026a8 <CopyDataInit>
  ldr  r2, =_sbss
 80026ba:	4a0b      	ldr	r2, [pc, #44]	; (80026e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026bc:	e002      	b.n	80026c4 <LoopFillZerobss>

080026be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026c0:	f842 3b04 	str.w	r3, [r2], #4

080026c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026c8:	d3f9      	bcc.n	80026be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026ca:	f000 f861 	bl	8002790 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ce:	f000 faaf 	bl	8002c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026d2:	f7ff ff91 	bl	80025f8 <main>
  bx  lr    
 80026d6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80026dc:	08004948 	.word	0x08004948
  ldr  r0, =_sdata
 80026e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026e4:	20000320 	.word	0x20000320
  ldr  r2, =_sbss
 80026e8:	20000320 	.word	0x20000320
  ldr  r3, = _ebss
 80026ec:	200004d8 	.word	0x200004d8

080026f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f0:	e7fe      	b.n	80026f0 <ADC_IRQHandler>

080026f2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0
}
 80026f6:	bf00      	nop
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002704:	e7fe      	b.n	8002704 <HardFault_Handler+0x4>

08002706 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800270a:	e7fe      	b.n	800270a <MemManage_Handler+0x4>

0800270c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002710:	e7fe      	b.n	8002710 <BusFault_Handler+0x4>

08002712 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002716:	e7fe      	b.n	8002716 <UsageFault_Handler+0x4>

08002718 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0
}
 800272a:	bf00      	nop
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8002746:	bf00      	nop
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <_sbrk>:
	errno = ENOSYS;
	return -1;
}

void * _sbrk(int32_t incr)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <_sbrk+0x38>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <_sbrk+0x16>
		heap_end = & end;
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <_sbrk+0x38>)
 8002762:	4a0a      	ldr	r2, [pc, #40]	; (800278c <_sbrk+0x3c>)
 8002764:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <_sbrk+0x38>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <_sbrk+0x38>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4413      	add	r3, r2
 8002774:	4a04      	ldr	r2, [pc, #16]	; (8002788 <_sbrk+0x38>)
 8002776:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8002778:	68fb      	ldr	r3, [r7, #12]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	2000047c 	.word	0x2000047c
 800278c:	200004d8 	.word	0x200004d8

08002790 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002794:	4a16      	ldr	r2, [pc, #88]	; (80027f0 <SystemInit+0x60>)
 8002796:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <SystemInit+0x60>)
 8002798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80027a4:	4a13      	ldr	r2, [pc, #76]	; (80027f4 <SystemInit+0x64>)
 80027a6:	4b13      	ldr	r3, [pc, #76]	; (80027f4 <SystemInit+0x64>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027b0:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <SystemInit+0x64>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80027b6:	4a0f      	ldr	r2, [pc, #60]	; (80027f4 <SystemInit+0x64>)
 80027b8:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <SystemInit+0x64>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80027c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80027c6:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <SystemInit+0x64>)
 80027c8:	4a0b      	ldr	r2, [pc, #44]	; (80027f8 <SystemInit+0x68>)
 80027ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80027cc:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <SystemInit+0x64>)
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <SystemInit+0x64>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <SystemInit+0x64>)
 80027da:	2200      	movs	r2, #0
 80027dc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80027de:	f000 f80d 	bl	80027fc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027e2:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <SystemInit+0x60>)
 80027e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027e8:	609a      	str	r2, [r3, #8]
#endif
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	e000ed00 	.word	0xe000ed00
 80027f4:	40023800 	.word	0x40023800
 80027f8:	24003010 	.word	0x24003010

080027fc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	2300      	movs	r3, #0
 8002808:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800280a:	4a36      	ldr	r2, [pc, #216]	; (80028e4 <SetSysClock+0xe8>)
 800280c:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <SetSysClock+0xe8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002814:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002816:	4b33      	ldr	r3, [pc, #204]	; (80028e4 <SetSysClock+0xe8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3301      	adds	r3, #1
 8002824:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d103      	bne.n	8002834 <SetSysClock+0x38>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002832:	d1f0      	bne.n	8002816 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002834:	4b2b      	ldr	r3, [pc, #172]	; (80028e4 <SetSysClock+0xe8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002840:	2301      	movs	r3, #1
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	e001      	b.n	800284a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002846:	2300      	movs	r3, #0
 8002848:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d142      	bne.n	80028d6 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002850:	4a24      	ldr	r2, [pc, #144]	; (80028e4 <SetSysClock+0xe8>)
 8002852:	4b24      	ldr	r3, [pc, #144]	; (80028e4 <SetSysClock+0xe8>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;
 800285c:	4a22      	ldr	r2, [pc, #136]	; (80028e8 <SetSysClock+0xec>)
 800285e:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <SetSysClock+0xec>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002866:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002868:	4a1e      	ldr	r2, [pc, #120]	; (80028e4 <SetSysClock+0xe8>)
 800286a:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <SetSysClock+0xe8>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002870:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <SetSysClock+0xe8>)
 8002872:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <SetSysClock+0xe8>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800287a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800287c:	4a19      	ldr	r2, [pc, #100]	; (80028e4 <SetSysClock+0xe8>)
 800287e:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <SetSysClock+0xe8>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002886:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002888:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <SetSysClock+0xe8>)
 800288a:	4a18      	ldr	r2, [pc, #96]	; (80028ec <SetSysClock+0xf0>)
 800288c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800288e:	4a15      	ldr	r2, [pc, #84]	; (80028e4 <SetSysClock+0xe8>)
 8002890:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <SetSysClock+0xe8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002898:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800289a:	bf00      	nop
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <SetSysClock+0xe8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f9      	beq.n	800289c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <SetSysClock+0xf4>)
 80028aa:	f240 6205 	movw	r2, #1541	; 0x605
 80028ae:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80028b0:	4a0c      	ldr	r2, [pc, #48]	; (80028e4 <SetSysClock+0xe8>)
 80028b2:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <SetSysClock+0xe8>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f023 0303 	bic.w	r3, r3, #3
 80028ba:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80028bc:	4a09      	ldr	r2, [pc, #36]	; (80028e4 <SetSysClock+0xe8>)
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <SetSysClock+0xe8>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f043 0302 	orr.w	r3, r3, #2
 80028c6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80028c8:	bf00      	nop
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <SetSysClock+0xe8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d1f9      	bne.n	80028ca <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40007000 	.word	0x40007000
 80028ec:	07405408 	.word	0x07405408
 80028f0:	40023c00 	.word	0x40023c00

080028f4 <Timer_PeriClockControl>:

TIM_RegDef_t *Timer_Arr[4] = {TIMER2,TIMER3,TIMER4,TIMER5};


static void Timer_PeriClockControl(uint8_t TIM_ID,uint8_t EnCLK)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	460a      	mov	r2, r1
 80028fe:	71fb      	strb	r3, [r7, #7]
 8002900:	4613      	mov	r3, r2
 8002902:	71bb      	strb	r3, [r7, #6]
	TIM_PCLK_EN = (TIM_PCLK_EN & ~(One_bit_shift << TIM_ID)) | (EnCLK << TIM_ID);
 8002904:	480a      	ldr	r0, [pc, #40]	; (8002930 <Timer_PeriClockControl+0x3c>)
 8002906:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <Timer_PeriClockControl+0x3c>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	79fa      	ldrb	r2, [r7, #7]
 800290c:	2101      	movs	r1, #1
 800290e:	fa01 f202 	lsl.w	r2, r1, r2
 8002912:	43d2      	mvns	r2, r2
 8002914:	4013      	ands	r3, r2
 8002916:	79b9      	ldrb	r1, [r7, #6]
 8002918:	79fa      	ldrb	r2, [r7, #7]
 800291a:	fa01 f202 	lsl.w	r2, r1, r2
 800291e:	4313      	orrs	r3, r2
 8002920:	6403      	str	r3, [r0, #64]	; 0x40
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800

08002934 <TIM_GetFlagStatus>:


static char TIM_GetFlagStatus(uint8_t TIM_ID , uint32_t FlagName)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	71fb      	strb	r3, [r7, #7]
	TIM_RegDef_t *pTIMx;
	pTIMx = Timer_Arr[TIM_ID];
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <TIM_GetFlagStatus+0x40>)
 8002944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002948:	60fb      	str	r3, [r7, #12]

	return ((pTIMx->SR & (One_bit_shift << FlagName)) >> FlagName );
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8a1b      	ldrh	r3, [r3, #16]
 800294e:	b29b      	uxth	r3, r3
 8002950:	4619      	mov	r1, r3
 8002952:	2201      	movs	r2, #1
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	ea01 0203 	and.w	r2, r1, r3
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	fa42 f303 	asr.w	r3, r2, r3
 8002964:	b2db      	uxtb	r3, r3
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000110 	.word	0x20000110

08002978 <Timer_Init>:



void Timer_Init()
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
	//Temporary variable
	uint32_t TempReg=0;
 800297e:	2300      	movs	r3, #0
 8002980:	60bb      	str	r3, [r7, #8]
	uint8_t counter=0;
 8002982:	2300      	movs	r3, #0
 8002984:	73fb      	strb	r3, [r7, #15]
	TIM_RegDef_t *pTIMx;
	uint32_t temp = 0;  //temp register
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]


	for(counter = 0; counter<NUMBER_OF_CONFIGURED_TIMER; counter++)
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
 800298e:	e059      	b.n	8002a44 <Timer_Init+0xcc>
	{
		/***Implement the code to enable the Clock for given ADC peripheral***/
		Timer_PeriClockControl(TIM_ConfigArray[counter].TIMER_ID,ENABLE);     // enable TIM clock
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	4a30      	ldr	r2, [pc, #192]	; (8002a54 <Timer_Init+0xdc>)
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	4413      	add	r3, r2
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2101      	movs	r1, #1
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ffa9 	bl	80028f4 <Timer_PeriClockControl>

		pTIMx = Timer_Arr[TIM_ConfigArray[counter].TIMER_ID];
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	4a2b      	ldr	r2, [pc, #172]	; (8002a54 <Timer_Init+0xdc>)
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	4413      	add	r3, r2
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	4b2a      	ldr	r3, [pc, #168]	; (8002a58 <Timer_Init+0xe0>)
 80029b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b4:	603b      	str	r3, [r7, #0]

		/* configure prescaler */

		pTIMx->PSC = TIM_ConfigArray[counter].TIM_Prescaler;
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	4a26      	ldr	r2, [pc, #152]	; (8002a54 <Timer_Init+0xdc>)
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	4413      	add	r3, r2
 80029be:	3302      	adds	r3, #2
 80029c0:	881a      	ldrh	r2, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	851a      	strh	r2, [r3, #40]	; 0x28


		/* configure timer mode */
		temp = ( TIM_ConfigArray[counter].TIM_CounterMode << TIM_MODE_BIT_LOC_IN_REG);
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	4a22      	ldr	r2, [pc, #136]	; (8002a54 <Timer_Init+0xdc>)
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	4413      	add	r3, r2
 80029ce:	3304      	adds	r3, #4
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	607b      	str	r3, [r7, #4]
		pTIMx->CR1 &= ( TIM_MODE_BIT_MASK );
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	801a      	strh	r2, [r3, #0]
		pTIMx->CR1 |= temp;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	4313      	orrs	r3, r2
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	801a      	strh	r2, [r3, #0]

		temp = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	607b      	str	r3, [r7, #4]

		// set the time periode
		pTIMx->ARR = TIM_ConfigArray[counter].TIM_Period;
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	4a15      	ldr	r2, [pc, #84]	; (8002a54 <Timer_Init+0xdc>)
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	4413      	add	r3, r2
 8002a04:	3308      	adds	r3, #8
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	62da      	str	r2, [r3, #44]	; 0x2c

		/* configure clock division */
		temp = ( TIM_ConfigArray[counter].TIM_ClockDivision << CLK_DIV_BIT_LOC_IN_REG);
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	4a11      	ldr	r2, [pc, #68]	; (8002a54 <Timer_Init+0xdc>)
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	4413      	add	r3, r2
 8002a14:	330c      	adds	r3, #12
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	607b      	str	r3, [r7, #4]
		pTIMx->CR1 &= ( CLOK_DIV_BIT_MASK );
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	801a      	strh	r2, [r3, #0]
		pTIMx->CR1 |= temp;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	4313      	orrs	r3, r2
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	801a      	strh	r2, [r3, #0]
	for(counter = 0; counter<NUMBER_OF_CONFIGURED_TIMER; counter++)
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	3301      	adds	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d9a2      	bls.n	8002990 <Timer_Init+0x18>
		 *
		the prescaler reg initialization*/


	}
}
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000120 	.word	0x20000120
 8002a58:	20000110 	.word	0x20000110

08002a5c <Timer_Cmd>:
	/* Set the Autoreload Register value */
	pTIMx->ARR = Autoreload;
}

void Timer_Cmd(uint8_t TIM_ID, TIMER_STATE cmd)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	460a      	mov	r2, r1
 8002a66:	71fb      	strb	r3, [r7, #7]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	71bb      	strb	r3, [r7, #6]
	TIM_RegDef_t *pTIMx;
	pTIMx = Timer_Arr[TIM_ID];
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	4a0f      	ldr	r2, [pc, #60]	; (8002aac <Timer_Cmd+0x50>)
 8002a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a74:	60fb      	str	r3, [r7, #12]

	if (cmd == START)
 8002a76:	79bb      	ldrb	r3, [r7, #6]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d108      	bne.n	8002a8e <Timer_Cmd+0x32>
	{
		/* Enable the TIM Counter */
		pTIMx->CR1 |= (One_bit_shift << TIM_ENABLE_BIT_LOC_IN_REG);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	801a      	strh	r2, [r3, #0]
	else
	{
		/* Disable the TIM Counter */
		pTIMx->CR1 &= ~(One_bit_shift << TIM_ENABLE_BIT_LOC_IN_REG);
	}
}
 8002a8c:	e007      	b.n	8002a9e <Timer_Cmd+0x42>
		pTIMx->CR1 &= ~(One_bit_shift << TIM_ENABLE_BIT_LOC_IN_REG);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	f023 0301 	bic.w	r3, r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	801a      	strh	r2, [r3, #0]
}
 8002a9e:	bf00      	nop
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	20000110 	.word	0x20000110

08002ab0 <TIM_IntControl>:

	*Timer_Period = pTIMx->ARR;
}

void TIM_IntControl(uint8_t TIM_ID , uint8_t IntSource , uint8_t State)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
 8002aba:	460b      	mov	r3, r1
 8002abc:	71bb      	strb	r3, [r7, #6]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	717b      	strb	r3, [r7, #5]
	TIM_RegDef_t *pTIMx;
	pTIMx = Timer_Arr[TIM_ID];
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	4a17      	ldr	r2, [pc, #92]	; (8002b24 <TIM_IntControl+0x74>)
 8002ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aca:	60fb      	str	r3, [r7, #12]

	switch(State)
 8002acc:	797b      	ldrb	r3, [r7, #5]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d011      	beq.n	8002af6 <TIM_IntControl+0x46>
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d000      	beq.n	8002ad8 <TIM_IntControl+0x28>
		//Implement the code to disable interrupt for IntSource
		pTIMx->DIER &= ~( One_bit_shift << IntSource);
		break;
	}

}
 8002ad6:	e01f      	b.n	8002b18 <TIM_IntControl+0x68>
		pTIMx->DIER |= ( One_bit_shift << IntSource);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	899b      	ldrh	r3, [r3, #12]
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	b21a      	sxth	r2, r3
 8002ae0:	79bb      	ldrb	r3, [r7, #6]
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae8:	b21b      	sxth	r3, r3
 8002aea:	4313      	orrs	r3, r2
 8002aec:	b21b      	sxth	r3, r3
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	819a      	strh	r2, [r3, #12]
		break;
 8002af4:	e010      	b.n	8002b18 <TIM_IntControl+0x68>
		pTIMx->DIER &= ~( One_bit_shift << IntSource);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	899b      	ldrh	r3, [r3, #12]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	b21a      	sxth	r2, r3
 8002afe:	79bb      	ldrb	r3, [r7, #6]
 8002b00:	2101      	movs	r1, #1
 8002b02:	fa01 f303 	lsl.w	r3, r1, r3
 8002b06:	b21b      	sxth	r3, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	b21b      	sxth	r3, r3
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	b21b      	sxth	r3, r3
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	819a      	strh	r2, [r3, #12]
		break;
 8002b16:	bf00      	nop
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	20000110 	.word	0x20000110

08002b28 <TIM_IRQConfig>:


void TIM_IRQConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	460a      	mov	r2, r1
 8002b32:	71fb      	strb	r3, [r7, #7]
 8002b34:	4613      	mov	r3, r2
 8002b36:	71bb      	strb	r3, [r7, #6]
	uint8_t ISER_Num=0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	73fb      	strb	r3, [r7, #15]
	uint8_t IRQActualNumber=0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	73bb      	strb	r3, [r7, #14]

	ISER_Num = IRQNumber / 32;
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	73fb      	strb	r3, [r7, #15]
	IRQActualNumber = IRQNumber % 32;
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	73bb      	strb	r3, [r7, #14]

	switch(EnorDi)
 8002b4e:	79bb      	ldrb	r3, [r7, #6]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00e      	beq.n	8002b72 <TIM_IRQConfig+0x4a>
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d000      	beq.n	8002b5a <TIM_IRQConfig+0x32>
		break;
	case DISABLE:
		NVIC_ICER_Base_Addr[ISER_Num] = 1<< IRQActualNumber;
		break;
	}
}
 8002b58:	e015      	b.n	8002b86 <TIM_IRQConfig+0x5e>
		NVIC_ISER_Base_Addr[ISER_Num] = 1<< IRQActualNumber;
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8002b62:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8002b66:	7bba      	ldrb	r2, [r7, #14]
 8002b68:	2101      	movs	r1, #1
 8002b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6e:	601a      	str	r2, [r3, #0]
		break;
 8002b70:	e009      	b.n	8002b86 <TIM_IRQConfig+0x5e>
		NVIC_ICER_Base_Addr[ISER_Num] = 1<< IRQActualNumber;
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	009a      	lsls	r2, r3, #2
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <TIM_IRQConfig+0x6c>)
 8002b78:	4413      	add	r3, r2
 8002b7a:	7bba      	ldrb	r2, [r7, #14]
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b82:	601a      	str	r2, [r3, #0]
		break;
 8002b84:	bf00      	nop
}
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	e000e180 	.word	0xe000e180

08002b98 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
	TIM_RegDef_t *pTIMx;
	pTIMx = Timer_Arr[0];
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <TIM2_IRQHandler+0x34>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	607b      	str	r3, [r7, #4]


	if( TIM_GetFlagStatus(TIMER2_ , UPD_EVENT_INT_FLAG) == 1)
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	f7ff fec4 	bl	8002934 <TIM_GetFlagStatus>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d107      	bne.n	8002bc2 <TIM2_IRQHandler+0x2a>
	{
		pTIMx->SR &= ~(1 << UPD_EVENT_INT_FLAG);     // this flag must be cleared here as per data sheet page 634
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	8a1b      	ldrh	r3, [r3, #16]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	821a      	strh	r2, [r3, #16]

	}

}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000110 	.word	0x20000110

08002bd0 <TIM3_IRQHandler>:


void TIM3_IRQHandler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
	TIM_RegDef_t *pTIMx;
	pTIMx = Timer_Arr[1];
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <TIM3_IRQHandler+0x2c>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	607b      	str	r3, [r7, #4]



	TFT_Tx_Manage();
 8002bdc:	f7fe feb4 	bl	8001948 <TFT_Tx_Manage>
	TFT_Rx_Manage();
 8002be0:	f7fe ff9a 	bl	8001b18 <TFT_Rx_Manage>
	//Buzzer_Manage();
	//HR_Sensor_Manage();
	//x++;
	pTIMx->SR &= ~(1 << UPD_EVENT_INT_FLAG);     // this flag must be cleared here as per data sheet page 634
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	8a1b      	ldrh	r3, [r3, #16]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	f023 0301 	bic.w	r3, r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	821a      	strh	r2, [r3, #16]

}
 8002bf4:	bf00      	nop
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000110 	.word	0x20000110

08002c00 <TIM4_IRQHandler>:


void TIM4_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
	TIM_RegDef_t *pTIMx;
	pTIMx = Timer_Arr[1];
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <TIM4_IRQHandler+0x2c>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	607b      	str	r3, [r7, #4]

	Mode_Manager();
 8002c0c:	f7fe fbae 	bl	800136c <Mode_Manager>
	Communication_Manage();
 8002c10:	f7fe f8c8 	bl	8000da4 <Communication_Manage>
	//x++;
	pTIMx->SR &= ~(1 << UPD_EVENT_INT_FLAG);     // this flag must be cleared here as per data sheet page 634
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	8a1b      	ldrh	r3, [r3, #16]
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	821a      	strh	r2, [r3, #16]

}
 8002c24:	bf00      	nop
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000110 	.word	0x20000110

08002c30 <__libc_init_array>:
 8002c30:	b570      	push	{r4, r5, r6, lr}
 8002c32:	4e0d      	ldr	r6, [pc, #52]	; (8002c68 <__libc_init_array+0x38>)
 8002c34:	4c0d      	ldr	r4, [pc, #52]	; (8002c6c <__libc_init_array+0x3c>)
 8002c36:	1ba4      	subs	r4, r4, r6
 8002c38:	10a4      	asrs	r4, r4, #2
 8002c3a:	2500      	movs	r5, #0
 8002c3c:	42a5      	cmp	r5, r4
 8002c3e:	d109      	bne.n	8002c54 <__libc_init_array+0x24>
 8002c40:	4e0b      	ldr	r6, [pc, #44]	; (8002c70 <__libc_init_array+0x40>)
 8002c42:	4c0c      	ldr	r4, [pc, #48]	; (8002c74 <__libc_init_array+0x44>)
 8002c44:	f001 fd56 	bl	80046f4 <_init>
 8002c48:	1ba4      	subs	r4, r4, r6
 8002c4a:	10a4      	asrs	r4, r4, #2
 8002c4c:	2500      	movs	r5, #0
 8002c4e:	42a5      	cmp	r5, r4
 8002c50:	d105      	bne.n	8002c5e <__libc_init_array+0x2e>
 8002c52:	bd70      	pop	{r4, r5, r6, pc}
 8002c54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c58:	4798      	blx	r3
 8002c5a:	3501      	adds	r5, #1
 8002c5c:	e7ee      	b.n	8002c3c <__libc_init_array+0xc>
 8002c5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c62:	4798      	blx	r3
 8002c64:	3501      	adds	r5, #1
 8002c66:	e7f2      	b.n	8002c4e <__libc_init_array+0x1e>
 8002c68:	08004940 	.word	0x08004940
 8002c6c:	08004940 	.word	0x08004940
 8002c70:	08004940 	.word	0x08004940
 8002c74:	08004944 	.word	0x08004944

08002c78 <__cvt>:
 8002c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c7c:	ec55 4b10 	vmov	r4, r5, d0
 8002c80:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002c82:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002c86:	2d00      	cmp	r5, #0
 8002c88:	460e      	mov	r6, r1
 8002c8a:	4691      	mov	r9, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	bfb8      	it	lt
 8002c90:	4622      	movlt	r2, r4
 8002c92:	462b      	mov	r3, r5
 8002c94:	f027 0720 	bic.w	r7, r7, #32
 8002c98:	bfbb      	ittet	lt
 8002c9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002c9e:	461d      	movlt	r5, r3
 8002ca0:	2300      	movge	r3, #0
 8002ca2:	232d      	movlt	r3, #45	; 0x2d
 8002ca4:	bfb8      	it	lt
 8002ca6:	4614      	movlt	r4, r2
 8002ca8:	2f46      	cmp	r7, #70	; 0x46
 8002caa:	700b      	strb	r3, [r1, #0]
 8002cac:	d004      	beq.n	8002cb8 <__cvt+0x40>
 8002cae:	2f45      	cmp	r7, #69	; 0x45
 8002cb0:	d100      	bne.n	8002cb4 <__cvt+0x3c>
 8002cb2:	3601      	adds	r6, #1
 8002cb4:	2102      	movs	r1, #2
 8002cb6:	e000      	b.n	8002cba <__cvt+0x42>
 8002cb8:	2103      	movs	r1, #3
 8002cba:	ab03      	add	r3, sp, #12
 8002cbc:	9301      	str	r3, [sp, #4]
 8002cbe:	ab02      	add	r3, sp, #8
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	4632      	mov	r2, r6
 8002cc4:	4653      	mov	r3, sl
 8002cc6:	ec45 4b10 	vmov	d0, r4, r5
 8002cca:	f000 fbad 	bl	8003428 <_dtoa_r>
 8002cce:	2f47      	cmp	r7, #71	; 0x47
 8002cd0:	4680      	mov	r8, r0
 8002cd2:	d102      	bne.n	8002cda <__cvt+0x62>
 8002cd4:	f019 0f01 	tst.w	r9, #1
 8002cd8:	d026      	beq.n	8002d28 <__cvt+0xb0>
 8002cda:	2f46      	cmp	r7, #70	; 0x46
 8002cdc:	eb08 0906 	add.w	r9, r8, r6
 8002ce0:	d111      	bne.n	8002d06 <__cvt+0x8e>
 8002ce2:	f898 3000 	ldrb.w	r3, [r8]
 8002ce6:	2b30      	cmp	r3, #48	; 0x30
 8002ce8:	d10a      	bne.n	8002d00 <__cvt+0x88>
 8002cea:	2200      	movs	r2, #0
 8002cec:	2300      	movs	r3, #0
 8002cee:	4620      	mov	r0, r4
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	f7fd fe91 	bl	8000a18 <__aeabi_dcmpeq>
 8002cf6:	b918      	cbnz	r0, 8002d00 <__cvt+0x88>
 8002cf8:	f1c6 0601 	rsb	r6, r6, #1
 8002cfc:	f8ca 6000 	str.w	r6, [sl]
 8002d00:	f8da 3000 	ldr.w	r3, [sl]
 8002d04:	4499      	add	r9, r3
 8002d06:	2200      	movs	r2, #0
 8002d08:	2300      	movs	r3, #0
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	4629      	mov	r1, r5
 8002d0e:	f7fd fe83 	bl	8000a18 <__aeabi_dcmpeq>
 8002d12:	b938      	cbnz	r0, 8002d24 <__cvt+0xac>
 8002d14:	2230      	movs	r2, #48	; 0x30
 8002d16:	9b03      	ldr	r3, [sp, #12]
 8002d18:	4599      	cmp	r9, r3
 8002d1a:	d905      	bls.n	8002d28 <__cvt+0xb0>
 8002d1c:	1c59      	adds	r1, r3, #1
 8002d1e:	9103      	str	r1, [sp, #12]
 8002d20:	701a      	strb	r2, [r3, #0]
 8002d22:	e7f8      	b.n	8002d16 <__cvt+0x9e>
 8002d24:	f8cd 900c 	str.w	r9, [sp, #12]
 8002d28:	9b03      	ldr	r3, [sp, #12]
 8002d2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d2c:	eba3 0308 	sub.w	r3, r3, r8
 8002d30:	4640      	mov	r0, r8
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	b004      	add	sp, #16
 8002d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002d3a <__exponent>:
 8002d3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2900      	cmp	r1, #0
 8002d40:	bfb8      	it	lt
 8002d42:	4249      	neglt	r1, r1
 8002d44:	f803 2b02 	strb.w	r2, [r3], #2
 8002d48:	bfb4      	ite	lt
 8002d4a:	222d      	movlt	r2, #45	; 0x2d
 8002d4c:	222b      	movge	r2, #43	; 0x2b
 8002d4e:	2909      	cmp	r1, #9
 8002d50:	7042      	strb	r2, [r0, #1]
 8002d52:	dd20      	ble.n	8002d96 <__exponent+0x5c>
 8002d54:	f10d 0207 	add.w	r2, sp, #7
 8002d58:	4617      	mov	r7, r2
 8002d5a:	260a      	movs	r6, #10
 8002d5c:	fb91 f5f6 	sdiv	r5, r1, r6
 8002d60:	fb06 1115 	mls	r1, r6, r5, r1
 8002d64:	3130      	adds	r1, #48	; 0x30
 8002d66:	2d09      	cmp	r5, #9
 8002d68:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002d6c:	f102 34ff 	add.w	r4, r2, #4294967295
 8002d70:	4629      	mov	r1, r5
 8002d72:	dc09      	bgt.n	8002d88 <__exponent+0x4e>
 8002d74:	3130      	adds	r1, #48	; 0x30
 8002d76:	3a02      	subs	r2, #2
 8002d78:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002d7c:	42ba      	cmp	r2, r7
 8002d7e:	461c      	mov	r4, r3
 8002d80:	d304      	bcc.n	8002d8c <__exponent+0x52>
 8002d82:	1a20      	subs	r0, r4, r0
 8002d84:	b003      	add	sp, #12
 8002d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d88:	4622      	mov	r2, r4
 8002d8a:	e7e7      	b.n	8002d5c <__exponent+0x22>
 8002d8c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002d90:	f803 1b01 	strb.w	r1, [r3], #1
 8002d94:	e7f2      	b.n	8002d7c <__exponent+0x42>
 8002d96:	2230      	movs	r2, #48	; 0x30
 8002d98:	461c      	mov	r4, r3
 8002d9a:	4411      	add	r1, r2
 8002d9c:	f804 2b02 	strb.w	r2, [r4], #2
 8002da0:	7059      	strb	r1, [r3, #1]
 8002da2:	e7ee      	b.n	8002d82 <__exponent+0x48>

08002da4 <_printf_float>:
 8002da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002da8:	b08d      	sub	sp, #52	; 0x34
 8002daa:	460c      	mov	r4, r1
 8002dac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002db0:	4616      	mov	r6, r2
 8002db2:	461f      	mov	r7, r3
 8002db4:	4605      	mov	r5, r0
 8002db6:	f001 f905 	bl	8003fc4 <_localeconv_r>
 8002dba:	6803      	ldr	r3, [r0, #0]
 8002dbc:	9304      	str	r3, [sp, #16]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fa02 	bl	80001c8 <strlen>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	930a      	str	r3, [sp, #40]	; 0x28
 8002dc8:	f8d8 3000 	ldr.w	r3, [r8]
 8002dcc:	9005      	str	r0, [sp, #20]
 8002dce:	3307      	adds	r3, #7
 8002dd0:	f023 0307 	bic.w	r3, r3, #7
 8002dd4:	f103 0208 	add.w	r2, r3, #8
 8002dd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002ddc:	f8d4 b000 	ldr.w	fp, [r4]
 8002de0:	f8c8 2000 	str.w	r2, [r8]
 8002de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002dec:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002df0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002df4:	9307      	str	r3, [sp, #28]
 8002df6:	f8cd 8018 	str.w	r8, [sp, #24]
 8002dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8002dfe:	4ba5      	ldr	r3, [pc, #660]	; (8003094 <_printf_float+0x2f0>)
 8002e00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e04:	f7fd fe3a 	bl	8000a7c <__aeabi_dcmpun>
 8002e08:	2800      	cmp	r0, #0
 8002e0a:	f040 81fb 	bne.w	8003204 <_printf_float+0x460>
 8002e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e12:	4ba0      	ldr	r3, [pc, #640]	; (8003094 <_printf_float+0x2f0>)
 8002e14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e18:	f7fd fe12 	bl	8000a40 <__aeabi_dcmple>
 8002e1c:	2800      	cmp	r0, #0
 8002e1e:	f040 81f1 	bne.w	8003204 <_printf_float+0x460>
 8002e22:	2200      	movs	r2, #0
 8002e24:	2300      	movs	r3, #0
 8002e26:	4640      	mov	r0, r8
 8002e28:	4649      	mov	r1, r9
 8002e2a:	f7fd fdff 	bl	8000a2c <__aeabi_dcmplt>
 8002e2e:	b110      	cbz	r0, 8002e36 <_printf_float+0x92>
 8002e30:	232d      	movs	r3, #45	; 0x2d
 8002e32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e36:	4b98      	ldr	r3, [pc, #608]	; (8003098 <_printf_float+0x2f4>)
 8002e38:	4a98      	ldr	r2, [pc, #608]	; (800309c <_printf_float+0x2f8>)
 8002e3a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002e3e:	bf8c      	ite	hi
 8002e40:	4690      	movhi	r8, r2
 8002e42:	4698      	movls	r8, r3
 8002e44:	2303      	movs	r3, #3
 8002e46:	f02b 0204 	bic.w	r2, fp, #4
 8002e4a:	6123      	str	r3, [r4, #16]
 8002e4c:	6022      	str	r2, [r4, #0]
 8002e4e:	f04f 0900 	mov.w	r9, #0
 8002e52:	9700      	str	r7, [sp, #0]
 8002e54:	4633      	mov	r3, r6
 8002e56:	aa0b      	add	r2, sp, #44	; 0x2c
 8002e58:	4621      	mov	r1, r4
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	f000 f9e2 	bl	8003224 <_printf_common>
 8002e60:	3001      	adds	r0, #1
 8002e62:	f040 8093 	bne.w	8002f8c <_printf_float+0x1e8>
 8002e66:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6a:	b00d      	add	sp, #52	; 0x34
 8002e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e70:	6861      	ldr	r1, [r4, #4]
 8002e72:	1c4b      	adds	r3, r1, #1
 8002e74:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8002e78:	d13f      	bne.n	8002efa <_printf_float+0x156>
 8002e7a:	2306      	movs	r3, #6
 8002e7c:	6063      	str	r3, [r4, #4]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	9303      	str	r3, [sp, #12]
 8002e82:	ab0a      	add	r3, sp, #40	; 0x28
 8002e84:	9302      	str	r3, [sp, #8]
 8002e86:	ab09      	add	r3, sp, #36	; 0x24
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	ec49 8b10 	vmov	d0, r8, r9
 8002e8e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002e92:	6022      	str	r2, [r4, #0]
 8002e94:	f8cd a004 	str.w	sl, [sp, #4]
 8002e98:	6861      	ldr	r1, [r4, #4]
 8002e9a:	4628      	mov	r0, r5
 8002e9c:	f7ff feec 	bl	8002c78 <__cvt>
 8002ea0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8002ea4:	2b47      	cmp	r3, #71	; 0x47
 8002ea6:	4680      	mov	r8, r0
 8002ea8:	d109      	bne.n	8002ebe <_printf_float+0x11a>
 8002eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002eac:	1cd8      	adds	r0, r3, #3
 8002eae:	db02      	blt.n	8002eb6 <_printf_float+0x112>
 8002eb0:	6862      	ldr	r2, [r4, #4]
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	dd57      	ble.n	8002f66 <_printf_float+0x1c2>
 8002eb6:	f1aa 0a02 	sub.w	sl, sl, #2
 8002eba:	fa5f fa8a 	uxtb.w	sl, sl
 8002ebe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002ec2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002ec4:	d834      	bhi.n	8002f30 <_printf_float+0x18c>
 8002ec6:	3901      	subs	r1, #1
 8002ec8:	4652      	mov	r2, sl
 8002eca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002ece:	9109      	str	r1, [sp, #36]	; 0x24
 8002ed0:	f7ff ff33 	bl	8002d3a <__exponent>
 8002ed4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ed6:	1883      	adds	r3, r0, r2
 8002ed8:	2a01      	cmp	r2, #1
 8002eda:	4681      	mov	r9, r0
 8002edc:	6123      	str	r3, [r4, #16]
 8002ede:	dc02      	bgt.n	8002ee6 <_printf_float+0x142>
 8002ee0:	6822      	ldr	r2, [r4, #0]
 8002ee2:	07d1      	lsls	r1, r2, #31
 8002ee4:	d501      	bpl.n	8002eea <_printf_float+0x146>
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	6123      	str	r3, [r4, #16]
 8002eea:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0af      	beq.n	8002e52 <_printf_float+0xae>
 8002ef2:	232d      	movs	r3, #45	; 0x2d
 8002ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ef8:	e7ab      	b.n	8002e52 <_printf_float+0xae>
 8002efa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8002efe:	d002      	beq.n	8002f06 <_printf_float+0x162>
 8002f00:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002f04:	d1bb      	bne.n	8002e7e <_printf_float+0xda>
 8002f06:	b189      	cbz	r1, 8002f2c <_printf_float+0x188>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	9303      	str	r3, [sp, #12]
 8002f0c:	ab0a      	add	r3, sp, #40	; 0x28
 8002f0e:	9302      	str	r3, [sp, #8]
 8002f10:	ab09      	add	r3, sp, #36	; 0x24
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	ec49 8b10 	vmov	d0, r8, r9
 8002f18:	6022      	str	r2, [r4, #0]
 8002f1a:	f8cd a004 	str.w	sl, [sp, #4]
 8002f1e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002f22:	4628      	mov	r0, r5
 8002f24:	f7ff fea8 	bl	8002c78 <__cvt>
 8002f28:	4680      	mov	r8, r0
 8002f2a:	e7be      	b.n	8002eaa <_printf_float+0x106>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e7a5      	b.n	8002e7c <_printf_float+0xd8>
 8002f30:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8002f34:	d119      	bne.n	8002f6a <_printf_float+0x1c6>
 8002f36:	2900      	cmp	r1, #0
 8002f38:	6863      	ldr	r3, [r4, #4]
 8002f3a:	dd0c      	ble.n	8002f56 <_printf_float+0x1b2>
 8002f3c:	6121      	str	r1, [r4, #16]
 8002f3e:	b913      	cbnz	r3, 8002f46 <_printf_float+0x1a2>
 8002f40:	6822      	ldr	r2, [r4, #0]
 8002f42:	07d2      	lsls	r2, r2, #31
 8002f44:	d502      	bpl.n	8002f4c <_printf_float+0x1a8>
 8002f46:	3301      	adds	r3, #1
 8002f48:	440b      	add	r3, r1
 8002f4a:	6123      	str	r3, [r4, #16]
 8002f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f4e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002f50:	f04f 0900 	mov.w	r9, #0
 8002f54:	e7c9      	b.n	8002eea <_printf_float+0x146>
 8002f56:	b913      	cbnz	r3, 8002f5e <_printf_float+0x1ba>
 8002f58:	6822      	ldr	r2, [r4, #0]
 8002f5a:	07d0      	lsls	r0, r2, #31
 8002f5c:	d501      	bpl.n	8002f62 <_printf_float+0x1be>
 8002f5e:	3302      	adds	r3, #2
 8002f60:	e7f3      	b.n	8002f4a <_printf_float+0x1a6>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e7f1      	b.n	8002f4a <_printf_float+0x1a6>
 8002f66:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8002f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	db05      	blt.n	8002f7e <_printf_float+0x1da>
 8002f72:	6822      	ldr	r2, [r4, #0]
 8002f74:	6123      	str	r3, [r4, #16]
 8002f76:	07d1      	lsls	r1, r2, #31
 8002f78:	d5e8      	bpl.n	8002f4c <_printf_float+0x1a8>
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	e7e5      	b.n	8002f4a <_printf_float+0x1a6>
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	bfd4      	ite	le
 8002f82:	f1c3 0302 	rsble	r3, r3, #2
 8002f86:	2301      	movgt	r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	e7de      	b.n	8002f4a <_printf_float+0x1a6>
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	055a      	lsls	r2, r3, #21
 8002f90:	d407      	bmi.n	8002fa2 <_printf_float+0x1fe>
 8002f92:	6923      	ldr	r3, [r4, #16]
 8002f94:	4642      	mov	r2, r8
 8002f96:	4631      	mov	r1, r6
 8002f98:	4628      	mov	r0, r5
 8002f9a:	47b8      	blx	r7
 8002f9c:	3001      	adds	r0, #1
 8002f9e:	d12b      	bne.n	8002ff8 <_printf_float+0x254>
 8002fa0:	e761      	b.n	8002e66 <_printf_float+0xc2>
 8002fa2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002fa6:	f240 80e2 	bls.w	800316e <_printf_float+0x3ca>
 8002faa:	2200      	movs	r2, #0
 8002fac:	2300      	movs	r3, #0
 8002fae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002fb2:	f7fd fd31 	bl	8000a18 <__aeabi_dcmpeq>
 8002fb6:	2800      	cmp	r0, #0
 8002fb8:	d03c      	beq.n	8003034 <_printf_float+0x290>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	4a38      	ldr	r2, [pc, #224]	; (80030a0 <_printf_float+0x2fc>)
 8002fbe:	4631      	mov	r1, r6
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	47b8      	blx	r7
 8002fc4:	3001      	adds	r0, #1
 8002fc6:	f43f af4e 	beq.w	8002e66 <_printf_float+0xc2>
 8002fca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	db02      	blt.n	8002fd8 <_printf_float+0x234>
 8002fd2:	6823      	ldr	r3, [r4, #0]
 8002fd4:	07d8      	lsls	r0, r3, #31
 8002fd6:	d50f      	bpl.n	8002ff8 <_printf_float+0x254>
 8002fd8:	9b05      	ldr	r3, [sp, #20]
 8002fda:	9a04      	ldr	r2, [sp, #16]
 8002fdc:	4631      	mov	r1, r6
 8002fde:	4628      	mov	r0, r5
 8002fe0:	47b8      	blx	r7
 8002fe2:	3001      	adds	r0, #1
 8002fe4:	f43f af3f 	beq.w	8002e66 <_printf_float+0xc2>
 8002fe8:	f04f 0800 	mov.w	r8, #0
 8002fec:	f104 091a 	add.w	r9, r4, #26
 8002ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	4598      	cmp	r8, r3
 8002ff6:	db12      	blt.n	800301e <_printf_float+0x27a>
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	079b      	lsls	r3, r3, #30
 8002ffc:	d509      	bpl.n	8003012 <_printf_float+0x26e>
 8002ffe:	f04f 0800 	mov.w	r8, #0
 8003002:	f104 0919 	add.w	r9, r4, #25
 8003006:	68e3      	ldr	r3, [r4, #12]
 8003008:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	4598      	cmp	r8, r3
 800300e:	f2c0 80ee 	blt.w	80031ee <_printf_float+0x44a>
 8003012:	68e0      	ldr	r0, [r4, #12]
 8003014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003016:	4298      	cmp	r0, r3
 8003018:	bfb8      	it	lt
 800301a:	4618      	movlt	r0, r3
 800301c:	e725      	b.n	8002e6a <_printf_float+0xc6>
 800301e:	2301      	movs	r3, #1
 8003020:	464a      	mov	r2, r9
 8003022:	4631      	mov	r1, r6
 8003024:	4628      	mov	r0, r5
 8003026:	47b8      	blx	r7
 8003028:	3001      	adds	r0, #1
 800302a:	f43f af1c 	beq.w	8002e66 <_printf_float+0xc2>
 800302e:	f108 0801 	add.w	r8, r8, #1
 8003032:	e7dd      	b.n	8002ff0 <_printf_float+0x24c>
 8003034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003036:	2b00      	cmp	r3, #0
 8003038:	dc34      	bgt.n	80030a4 <_printf_float+0x300>
 800303a:	2301      	movs	r3, #1
 800303c:	4a18      	ldr	r2, [pc, #96]	; (80030a0 <_printf_float+0x2fc>)
 800303e:	4631      	mov	r1, r6
 8003040:	4628      	mov	r0, r5
 8003042:	47b8      	blx	r7
 8003044:	3001      	adds	r0, #1
 8003046:	f43f af0e 	beq.w	8002e66 <_printf_float+0xc2>
 800304a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800304c:	b923      	cbnz	r3, 8003058 <_printf_float+0x2b4>
 800304e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003050:	b913      	cbnz	r3, 8003058 <_printf_float+0x2b4>
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	07d9      	lsls	r1, r3, #31
 8003056:	d5cf      	bpl.n	8002ff8 <_printf_float+0x254>
 8003058:	9b05      	ldr	r3, [sp, #20]
 800305a:	9a04      	ldr	r2, [sp, #16]
 800305c:	4631      	mov	r1, r6
 800305e:	4628      	mov	r0, r5
 8003060:	47b8      	blx	r7
 8003062:	3001      	adds	r0, #1
 8003064:	f43f aeff 	beq.w	8002e66 <_printf_float+0xc2>
 8003068:	f04f 0900 	mov.w	r9, #0
 800306c:	f104 0a1a 	add.w	sl, r4, #26
 8003070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003072:	425b      	negs	r3, r3
 8003074:	4599      	cmp	r9, r3
 8003076:	db01      	blt.n	800307c <_printf_float+0x2d8>
 8003078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800307a:	e78b      	b.n	8002f94 <_printf_float+0x1f0>
 800307c:	2301      	movs	r3, #1
 800307e:	4652      	mov	r2, sl
 8003080:	4631      	mov	r1, r6
 8003082:	4628      	mov	r0, r5
 8003084:	47b8      	blx	r7
 8003086:	3001      	adds	r0, #1
 8003088:	f43f aeed 	beq.w	8002e66 <_printf_float+0xc2>
 800308c:	f109 0901 	add.w	r9, r9, #1
 8003090:	e7ee      	b.n	8003070 <_printf_float+0x2cc>
 8003092:	bf00      	nop
 8003094:	7fefffff 	.word	0x7fefffff
 8003098:	08004713 	.word	0x08004713
 800309c:	08004717 	.word	0x08004717
 80030a0:	08004723 	.word	0x08004723
 80030a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80030a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030a8:	429a      	cmp	r2, r3
 80030aa:	bfa8      	it	ge
 80030ac:	461a      	movge	r2, r3
 80030ae:	2a00      	cmp	r2, #0
 80030b0:	4691      	mov	r9, r2
 80030b2:	dc38      	bgt.n	8003126 <_printf_float+0x382>
 80030b4:	f104 031a 	add.w	r3, r4, #26
 80030b8:	f04f 0b00 	mov.w	fp, #0
 80030bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80030c0:	9306      	str	r3, [sp, #24]
 80030c2:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80030c6:	ebaa 0309 	sub.w	r3, sl, r9
 80030ca:	459b      	cmp	fp, r3
 80030cc:	db33      	blt.n	8003136 <_printf_float+0x392>
 80030ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030d2:	429a      	cmp	r2, r3
 80030d4:	db3a      	blt.n	800314c <_printf_float+0x3a8>
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	07da      	lsls	r2, r3, #31
 80030da:	d437      	bmi.n	800314c <_printf_float+0x3a8>
 80030dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80030e0:	eba3 020a 	sub.w	r2, r3, sl
 80030e4:	eba3 0901 	sub.w	r9, r3, r1
 80030e8:	4591      	cmp	r9, r2
 80030ea:	bfa8      	it	ge
 80030ec:	4691      	movge	r9, r2
 80030ee:	f1b9 0f00 	cmp.w	r9, #0
 80030f2:	dc33      	bgt.n	800315c <_printf_float+0x3b8>
 80030f4:	f04f 0800 	mov.w	r8, #0
 80030f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80030fc:	f104 0a1a 	add.w	sl, r4, #26
 8003100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	eba3 0309 	sub.w	r3, r3, r9
 800310a:	4598      	cmp	r8, r3
 800310c:	f6bf af74 	bge.w	8002ff8 <_printf_float+0x254>
 8003110:	2301      	movs	r3, #1
 8003112:	4652      	mov	r2, sl
 8003114:	4631      	mov	r1, r6
 8003116:	4628      	mov	r0, r5
 8003118:	47b8      	blx	r7
 800311a:	3001      	adds	r0, #1
 800311c:	f43f aea3 	beq.w	8002e66 <_printf_float+0xc2>
 8003120:	f108 0801 	add.w	r8, r8, #1
 8003124:	e7ec      	b.n	8003100 <_printf_float+0x35c>
 8003126:	4613      	mov	r3, r2
 8003128:	4631      	mov	r1, r6
 800312a:	4642      	mov	r2, r8
 800312c:	4628      	mov	r0, r5
 800312e:	47b8      	blx	r7
 8003130:	3001      	adds	r0, #1
 8003132:	d1bf      	bne.n	80030b4 <_printf_float+0x310>
 8003134:	e697      	b.n	8002e66 <_printf_float+0xc2>
 8003136:	2301      	movs	r3, #1
 8003138:	9a06      	ldr	r2, [sp, #24]
 800313a:	4631      	mov	r1, r6
 800313c:	4628      	mov	r0, r5
 800313e:	47b8      	blx	r7
 8003140:	3001      	adds	r0, #1
 8003142:	f43f ae90 	beq.w	8002e66 <_printf_float+0xc2>
 8003146:	f10b 0b01 	add.w	fp, fp, #1
 800314a:	e7ba      	b.n	80030c2 <_printf_float+0x31e>
 800314c:	9b05      	ldr	r3, [sp, #20]
 800314e:	9a04      	ldr	r2, [sp, #16]
 8003150:	4631      	mov	r1, r6
 8003152:	4628      	mov	r0, r5
 8003154:	47b8      	blx	r7
 8003156:	3001      	adds	r0, #1
 8003158:	d1c0      	bne.n	80030dc <_printf_float+0x338>
 800315a:	e684      	b.n	8002e66 <_printf_float+0xc2>
 800315c:	464b      	mov	r3, r9
 800315e:	eb08 020a 	add.w	r2, r8, sl
 8003162:	4631      	mov	r1, r6
 8003164:	4628      	mov	r0, r5
 8003166:	47b8      	blx	r7
 8003168:	3001      	adds	r0, #1
 800316a:	d1c3      	bne.n	80030f4 <_printf_float+0x350>
 800316c:	e67b      	b.n	8002e66 <_printf_float+0xc2>
 800316e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003170:	2a01      	cmp	r2, #1
 8003172:	dc01      	bgt.n	8003178 <_printf_float+0x3d4>
 8003174:	07db      	lsls	r3, r3, #31
 8003176:	d537      	bpl.n	80031e8 <_printf_float+0x444>
 8003178:	2301      	movs	r3, #1
 800317a:	4642      	mov	r2, r8
 800317c:	4631      	mov	r1, r6
 800317e:	4628      	mov	r0, r5
 8003180:	47b8      	blx	r7
 8003182:	3001      	adds	r0, #1
 8003184:	f43f ae6f 	beq.w	8002e66 <_printf_float+0xc2>
 8003188:	9b05      	ldr	r3, [sp, #20]
 800318a:	9a04      	ldr	r2, [sp, #16]
 800318c:	4631      	mov	r1, r6
 800318e:	4628      	mov	r0, r5
 8003190:	47b8      	blx	r7
 8003192:	3001      	adds	r0, #1
 8003194:	f43f ae67 	beq.w	8002e66 <_printf_float+0xc2>
 8003198:	2200      	movs	r2, #0
 800319a:	2300      	movs	r3, #0
 800319c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80031a0:	f7fd fc3a 	bl	8000a18 <__aeabi_dcmpeq>
 80031a4:	b158      	cbz	r0, 80031be <_printf_float+0x41a>
 80031a6:	f04f 0800 	mov.w	r8, #0
 80031aa:	f104 0a1a 	add.w	sl, r4, #26
 80031ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031b0:	3b01      	subs	r3, #1
 80031b2:	4598      	cmp	r8, r3
 80031b4:	db0d      	blt.n	80031d2 <_printf_float+0x42e>
 80031b6:	464b      	mov	r3, r9
 80031b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80031bc:	e6eb      	b.n	8002f96 <_printf_float+0x1f2>
 80031be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031c0:	f108 0201 	add.w	r2, r8, #1
 80031c4:	3b01      	subs	r3, #1
 80031c6:	4631      	mov	r1, r6
 80031c8:	4628      	mov	r0, r5
 80031ca:	47b8      	blx	r7
 80031cc:	3001      	adds	r0, #1
 80031ce:	d1f2      	bne.n	80031b6 <_printf_float+0x412>
 80031d0:	e649      	b.n	8002e66 <_printf_float+0xc2>
 80031d2:	2301      	movs	r3, #1
 80031d4:	4652      	mov	r2, sl
 80031d6:	4631      	mov	r1, r6
 80031d8:	4628      	mov	r0, r5
 80031da:	47b8      	blx	r7
 80031dc:	3001      	adds	r0, #1
 80031de:	f43f ae42 	beq.w	8002e66 <_printf_float+0xc2>
 80031e2:	f108 0801 	add.w	r8, r8, #1
 80031e6:	e7e2      	b.n	80031ae <_printf_float+0x40a>
 80031e8:	2301      	movs	r3, #1
 80031ea:	4642      	mov	r2, r8
 80031ec:	e7eb      	b.n	80031c6 <_printf_float+0x422>
 80031ee:	2301      	movs	r3, #1
 80031f0:	464a      	mov	r2, r9
 80031f2:	4631      	mov	r1, r6
 80031f4:	4628      	mov	r0, r5
 80031f6:	47b8      	blx	r7
 80031f8:	3001      	adds	r0, #1
 80031fa:	f43f ae34 	beq.w	8002e66 <_printf_float+0xc2>
 80031fe:	f108 0801 	add.w	r8, r8, #1
 8003202:	e700      	b.n	8003006 <_printf_float+0x262>
 8003204:	4642      	mov	r2, r8
 8003206:	464b      	mov	r3, r9
 8003208:	4640      	mov	r0, r8
 800320a:	4649      	mov	r1, r9
 800320c:	f7fd fc36 	bl	8000a7c <__aeabi_dcmpun>
 8003210:	2800      	cmp	r0, #0
 8003212:	f43f ae2d 	beq.w	8002e70 <_printf_float+0xcc>
 8003216:	4b01      	ldr	r3, [pc, #4]	; (800321c <_printf_float+0x478>)
 8003218:	4a01      	ldr	r2, [pc, #4]	; (8003220 <_printf_float+0x47c>)
 800321a:	e60e      	b.n	8002e3a <_printf_float+0x96>
 800321c:	0800471b 	.word	0x0800471b
 8003220:	0800471f 	.word	0x0800471f

08003224 <_printf_common>:
 8003224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003228:	4691      	mov	r9, r2
 800322a:	461f      	mov	r7, r3
 800322c:	688a      	ldr	r2, [r1, #8]
 800322e:	690b      	ldr	r3, [r1, #16]
 8003230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003234:	4293      	cmp	r3, r2
 8003236:	bfb8      	it	lt
 8003238:	4613      	movlt	r3, r2
 800323a:	f8c9 3000 	str.w	r3, [r9]
 800323e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003242:	4606      	mov	r6, r0
 8003244:	460c      	mov	r4, r1
 8003246:	b112      	cbz	r2, 800324e <_printf_common+0x2a>
 8003248:	3301      	adds	r3, #1
 800324a:	f8c9 3000 	str.w	r3, [r9]
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	0699      	lsls	r1, r3, #26
 8003252:	bf42      	ittt	mi
 8003254:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003258:	3302      	addmi	r3, #2
 800325a:	f8c9 3000 	strmi.w	r3, [r9]
 800325e:	6825      	ldr	r5, [r4, #0]
 8003260:	f015 0506 	ands.w	r5, r5, #6
 8003264:	d107      	bne.n	8003276 <_printf_common+0x52>
 8003266:	f104 0a19 	add.w	sl, r4, #25
 800326a:	68e3      	ldr	r3, [r4, #12]
 800326c:	f8d9 2000 	ldr.w	r2, [r9]
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	429d      	cmp	r5, r3
 8003274:	db29      	blt.n	80032ca <_printf_common+0xa6>
 8003276:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800327a:	6822      	ldr	r2, [r4, #0]
 800327c:	3300      	adds	r3, #0
 800327e:	bf18      	it	ne
 8003280:	2301      	movne	r3, #1
 8003282:	0692      	lsls	r2, r2, #26
 8003284:	d42e      	bmi.n	80032e4 <_printf_common+0xc0>
 8003286:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800328a:	4639      	mov	r1, r7
 800328c:	4630      	mov	r0, r6
 800328e:	47c0      	blx	r8
 8003290:	3001      	adds	r0, #1
 8003292:	d021      	beq.n	80032d8 <_printf_common+0xb4>
 8003294:	6823      	ldr	r3, [r4, #0]
 8003296:	68e5      	ldr	r5, [r4, #12]
 8003298:	f8d9 2000 	ldr.w	r2, [r9]
 800329c:	f003 0306 	and.w	r3, r3, #6
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	bf08      	it	eq
 80032a4:	1aad      	subeq	r5, r5, r2
 80032a6:	68a3      	ldr	r3, [r4, #8]
 80032a8:	6922      	ldr	r2, [r4, #16]
 80032aa:	bf0c      	ite	eq
 80032ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032b0:	2500      	movne	r5, #0
 80032b2:	4293      	cmp	r3, r2
 80032b4:	bfc4      	itt	gt
 80032b6:	1a9b      	subgt	r3, r3, r2
 80032b8:	18ed      	addgt	r5, r5, r3
 80032ba:	f04f 0900 	mov.w	r9, #0
 80032be:	341a      	adds	r4, #26
 80032c0:	454d      	cmp	r5, r9
 80032c2:	d11b      	bne.n	80032fc <_printf_common+0xd8>
 80032c4:	2000      	movs	r0, #0
 80032c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ca:	2301      	movs	r3, #1
 80032cc:	4652      	mov	r2, sl
 80032ce:	4639      	mov	r1, r7
 80032d0:	4630      	mov	r0, r6
 80032d2:	47c0      	blx	r8
 80032d4:	3001      	adds	r0, #1
 80032d6:	d103      	bne.n	80032e0 <_printf_common+0xbc>
 80032d8:	f04f 30ff 	mov.w	r0, #4294967295
 80032dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032e0:	3501      	adds	r5, #1
 80032e2:	e7c2      	b.n	800326a <_printf_common+0x46>
 80032e4:	18e1      	adds	r1, r4, r3
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	2030      	movs	r0, #48	; 0x30
 80032ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032ee:	4422      	add	r2, r4
 80032f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032f8:	3302      	adds	r3, #2
 80032fa:	e7c4      	b.n	8003286 <_printf_common+0x62>
 80032fc:	2301      	movs	r3, #1
 80032fe:	4622      	mov	r2, r4
 8003300:	4639      	mov	r1, r7
 8003302:	4630      	mov	r0, r6
 8003304:	47c0      	blx	r8
 8003306:	3001      	adds	r0, #1
 8003308:	d0e6      	beq.n	80032d8 <_printf_common+0xb4>
 800330a:	f109 0901 	add.w	r9, r9, #1
 800330e:	e7d7      	b.n	80032c0 <_printf_common+0x9c>

08003310 <quorem>:
 8003310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003314:	6903      	ldr	r3, [r0, #16]
 8003316:	690c      	ldr	r4, [r1, #16]
 8003318:	429c      	cmp	r4, r3
 800331a:	4680      	mov	r8, r0
 800331c:	f300 8082 	bgt.w	8003424 <quorem+0x114>
 8003320:	3c01      	subs	r4, #1
 8003322:	f101 0714 	add.w	r7, r1, #20
 8003326:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800332a:	f100 0614 	add.w	r6, r0, #20
 800332e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003332:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003336:	eb06 030e 	add.w	r3, r6, lr
 800333a:	3501      	adds	r5, #1
 800333c:	eb07 090e 	add.w	r9, r7, lr
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	fbb0 f5f5 	udiv	r5, r0, r5
 8003346:	b395      	cbz	r5, 80033ae <quorem+0x9e>
 8003348:	f04f 0a00 	mov.w	sl, #0
 800334c:	4638      	mov	r0, r7
 800334e:	46b4      	mov	ip, r6
 8003350:	46d3      	mov	fp, sl
 8003352:	f850 2b04 	ldr.w	r2, [r0], #4
 8003356:	b293      	uxth	r3, r2
 8003358:	fb05 a303 	mla	r3, r5, r3, sl
 800335c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003360:	b29b      	uxth	r3, r3
 8003362:	ebab 0303 	sub.w	r3, fp, r3
 8003366:	0c12      	lsrs	r2, r2, #16
 8003368:	f8bc b000 	ldrh.w	fp, [ip]
 800336c:	fb05 a202 	mla	r2, r5, r2, sl
 8003370:	fa13 f38b 	uxtah	r3, r3, fp
 8003374:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003378:	fa1f fb82 	uxth.w	fp, r2
 800337c:	f8dc 2000 	ldr.w	r2, [ip]
 8003380:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003384:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003388:	b29b      	uxth	r3, r3
 800338a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800338e:	4581      	cmp	r9, r0
 8003390:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003394:	f84c 3b04 	str.w	r3, [ip], #4
 8003398:	d2db      	bcs.n	8003352 <quorem+0x42>
 800339a:	f856 300e 	ldr.w	r3, [r6, lr]
 800339e:	b933      	cbnz	r3, 80033ae <quorem+0x9e>
 80033a0:	9b01      	ldr	r3, [sp, #4]
 80033a2:	3b04      	subs	r3, #4
 80033a4:	429e      	cmp	r6, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	d330      	bcc.n	800340c <quorem+0xfc>
 80033aa:	f8c8 4010 	str.w	r4, [r8, #16]
 80033ae:	4640      	mov	r0, r8
 80033b0:	f001 f833 	bl	800441a <__mcmp>
 80033b4:	2800      	cmp	r0, #0
 80033b6:	db25      	blt.n	8003404 <quorem+0xf4>
 80033b8:	3501      	adds	r5, #1
 80033ba:	4630      	mov	r0, r6
 80033bc:	f04f 0e00 	mov.w	lr, #0
 80033c0:	f857 2b04 	ldr.w	r2, [r7], #4
 80033c4:	f8d0 c000 	ldr.w	ip, [r0]
 80033c8:	b293      	uxth	r3, r2
 80033ca:	ebae 0303 	sub.w	r3, lr, r3
 80033ce:	0c12      	lsrs	r2, r2, #16
 80033d0:	fa13 f38c 	uxtah	r3, r3, ip
 80033d4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80033d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80033dc:	b29b      	uxth	r3, r3
 80033de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80033e2:	45b9      	cmp	r9, r7
 80033e4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80033e8:	f840 3b04 	str.w	r3, [r0], #4
 80033ec:	d2e8      	bcs.n	80033c0 <quorem+0xb0>
 80033ee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80033f2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80033f6:	b92a      	cbnz	r2, 8003404 <quorem+0xf4>
 80033f8:	3b04      	subs	r3, #4
 80033fa:	429e      	cmp	r6, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	d30b      	bcc.n	8003418 <quorem+0x108>
 8003400:	f8c8 4010 	str.w	r4, [r8, #16]
 8003404:	4628      	mov	r0, r5
 8003406:	b003      	add	sp, #12
 8003408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800340c:	6812      	ldr	r2, [r2, #0]
 800340e:	3b04      	subs	r3, #4
 8003410:	2a00      	cmp	r2, #0
 8003412:	d1ca      	bne.n	80033aa <quorem+0x9a>
 8003414:	3c01      	subs	r4, #1
 8003416:	e7c5      	b.n	80033a4 <quorem+0x94>
 8003418:	6812      	ldr	r2, [r2, #0]
 800341a:	3b04      	subs	r3, #4
 800341c:	2a00      	cmp	r2, #0
 800341e:	d1ef      	bne.n	8003400 <quorem+0xf0>
 8003420:	3c01      	subs	r4, #1
 8003422:	e7ea      	b.n	80033fa <quorem+0xea>
 8003424:	2000      	movs	r0, #0
 8003426:	e7ee      	b.n	8003406 <quorem+0xf6>

08003428 <_dtoa_r>:
 8003428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800342c:	ec57 6b10 	vmov	r6, r7, d0
 8003430:	b097      	sub	sp, #92	; 0x5c
 8003432:	e9cd 6700 	strd	r6, r7, [sp]
 8003436:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003438:	9107      	str	r1, [sp, #28]
 800343a:	4604      	mov	r4, r0
 800343c:	920a      	str	r2, [sp, #40]	; 0x28
 800343e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003440:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8003442:	b93e      	cbnz	r6, 8003454 <_dtoa_r+0x2c>
 8003444:	2010      	movs	r0, #16
 8003446:	f000 fdcb 	bl	8003fe0 <malloc>
 800344a:	6260      	str	r0, [r4, #36]	; 0x24
 800344c:	6046      	str	r6, [r0, #4]
 800344e:	6086      	str	r6, [r0, #8]
 8003450:	6006      	str	r6, [r0, #0]
 8003452:	60c6      	str	r6, [r0, #12]
 8003454:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003456:	6819      	ldr	r1, [r3, #0]
 8003458:	b151      	cbz	r1, 8003470 <_dtoa_r+0x48>
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	604a      	str	r2, [r1, #4]
 800345e:	2301      	movs	r3, #1
 8003460:	4093      	lsls	r3, r2
 8003462:	608b      	str	r3, [r1, #8]
 8003464:	4620      	mov	r0, r4
 8003466:	f000 fe02 	bl	800406e <_Bfree>
 800346a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	9b01      	ldr	r3, [sp, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	bfbf      	itttt	lt
 8003476:	2301      	movlt	r3, #1
 8003478:	602b      	strlt	r3, [r5, #0]
 800347a:	9b01      	ldrlt	r3, [sp, #4]
 800347c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003480:	bfb2      	itee	lt
 8003482:	9301      	strlt	r3, [sp, #4]
 8003484:	2300      	movge	r3, #0
 8003486:	602b      	strge	r3, [r5, #0]
 8003488:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800348c:	4ba8      	ldr	r3, [pc, #672]	; (8003730 <_dtoa_r+0x308>)
 800348e:	ea33 0308 	bics.w	r3, r3, r8
 8003492:	d11b      	bne.n	80034cc <_dtoa_r+0xa4>
 8003494:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003496:	f242 730f 	movw	r3, #9999	; 0x270f
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	9b00      	ldr	r3, [sp, #0]
 800349e:	b923      	cbnz	r3, 80034aa <_dtoa_r+0x82>
 80034a0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80034a4:	2800      	cmp	r0, #0
 80034a6:	f000 8578 	beq.w	8003f9a <_dtoa_r+0xb72>
 80034aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034ac:	b953      	cbnz	r3, 80034c4 <_dtoa_r+0x9c>
 80034ae:	4ba1      	ldr	r3, [pc, #644]	; (8003734 <_dtoa_r+0x30c>)
 80034b0:	e021      	b.n	80034f6 <_dtoa_r+0xce>
 80034b2:	4ba1      	ldr	r3, [pc, #644]	; (8003738 <_dtoa_r+0x310>)
 80034b4:	9302      	str	r3, [sp, #8]
 80034b6:	3308      	adds	r3, #8
 80034b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80034ba:	6013      	str	r3, [r2, #0]
 80034bc:	9802      	ldr	r0, [sp, #8]
 80034be:	b017      	add	sp, #92	; 0x5c
 80034c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034c4:	4b9b      	ldr	r3, [pc, #620]	; (8003734 <_dtoa_r+0x30c>)
 80034c6:	9302      	str	r3, [sp, #8]
 80034c8:	3303      	adds	r3, #3
 80034ca:	e7f5      	b.n	80034b8 <_dtoa_r+0x90>
 80034cc:	e9dd 6700 	ldrd	r6, r7, [sp]
 80034d0:	2200      	movs	r2, #0
 80034d2:	2300      	movs	r3, #0
 80034d4:	4630      	mov	r0, r6
 80034d6:	4639      	mov	r1, r7
 80034d8:	f7fd fa9e 	bl	8000a18 <__aeabi_dcmpeq>
 80034dc:	4681      	mov	r9, r0
 80034de:	b160      	cbz	r0, 80034fa <_dtoa_r+0xd2>
 80034e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80034e2:	2301      	movs	r3, #1
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 8553 	beq.w	8003f94 <_dtoa_r+0xb6c>
 80034ee:	4b93      	ldr	r3, [pc, #588]	; (800373c <_dtoa_r+0x314>)
 80034f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	9302      	str	r3, [sp, #8]
 80034f8:	e7e0      	b.n	80034bc <_dtoa_r+0x94>
 80034fa:	aa14      	add	r2, sp, #80	; 0x50
 80034fc:	a915      	add	r1, sp, #84	; 0x54
 80034fe:	ec47 6b10 	vmov	d0, r6, r7
 8003502:	4620      	mov	r0, r4
 8003504:	f001 f801 	bl	800450a <__d2b>
 8003508:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800350c:	4682      	mov	sl, r0
 800350e:	2d00      	cmp	r5, #0
 8003510:	d07e      	beq.n	8003610 <_dtoa_r+0x1e8>
 8003512:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003516:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800351a:	4630      	mov	r0, r6
 800351c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003520:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003524:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8003528:	2200      	movs	r2, #0
 800352a:	4b85      	ldr	r3, [pc, #532]	; (8003740 <_dtoa_r+0x318>)
 800352c:	f7fc fe58 	bl	80001e0 <__aeabi_dsub>
 8003530:	a379      	add	r3, pc, #484	; (adr r3, 8003718 <_dtoa_r+0x2f0>)
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	f7fd f807 	bl	8000548 <__aeabi_dmul>
 800353a:	a379      	add	r3, pc, #484	; (adr r3, 8003720 <_dtoa_r+0x2f8>)
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f7fc fe50 	bl	80001e4 <__adddf3>
 8003544:	4606      	mov	r6, r0
 8003546:	4628      	mov	r0, r5
 8003548:	460f      	mov	r7, r1
 800354a:	f7fc ff97 	bl	800047c <__aeabi_i2d>
 800354e:	a376      	add	r3, pc, #472	; (adr r3, 8003728 <_dtoa_r+0x300>)
 8003550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003554:	f7fc fff8 	bl	8000548 <__aeabi_dmul>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4630      	mov	r0, r6
 800355e:	4639      	mov	r1, r7
 8003560:	f7fc fe40 	bl	80001e4 <__adddf3>
 8003564:	4606      	mov	r6, r0
 8003566:	460f      	mov	r7, r1
 8003568:	f7fd fa9e 	bl	8000aa8 <__aeabi_d2iz>
 800356c:	2200      	movs	r2, #0
 800356e:	4683      	mov	fp, r0
 8003570:	2300      	movs	r3, #0
 8003572:	4630      	mov	r0, r6
 8003574:	4639      	mov	r1, r7
 8003576:	f7fd fa59 	bl	8000a2c <__aeabi_dcmplt>
 800357a:	b158      	cbz	r0, 8003594 <_dtoa_r+0x16c>
 800357c:	4658      	mov	r0, fp
 800357e:	f7fc ff7d 	bl	800047c <__aeabi_i2d>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4630      	mov	r0, r6
 8003588:	4639      	mov	r1, r7
 800358a:	f7fd fa45 	bl	8000a18 <__aeabi_dcmpeq>
 800358e:	b908      	cbnz	r0, 8003594 <_dtoa_r+0x16c>
 8003590:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003594:	f1bb 0f16 	cmp.w	fp, #22
 8003598:	d859      	bhi.n	800364e <_dtoa_r+0x226>
 800359a:	496a      	ldr	r1, [pc, #424]	; (8003744 <_dtoa_r+0x31c>)
 800359c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80035a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80035a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035a8:	f7fd fa5e 	bl	8000a68 <__aeabi_dcmpgt>
 80035ac:	2800      	cmp	r0, #0
 80035ae:	d050      	beq.n	8003652 <_dtoa_r+0x22a>
 80035b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80035b4:	2300      	movs	r3, #0
 80035b6:	930e      	str	r3, [sp, #56]	; 0x38
 80035b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80035ba:	1b5d      	subs	r5, r3, r5
 80035bc:	1e6b      	subs	r3, r5, #1
 80035be:	9306      	str	r3, [sp, #24]
 80035c0:	bf45      	ittet	mi
 80035c2:	f1c5 0301 	rsbmi	r3, r5, #1
 80035c6:	9305      	strmi	r3, [sp, #20]
 80035c8:	2300      	movpl	r3, #0
 80035ca:	2300      	movmi	r3, #0
 80035cc:	bf4c      	ite	mi
 80035ce:	9306      	strmi	r3, [sp, #24]
 80035d0:	9305      	strpl	r3, [sp, #20]
 80035d2:	f1bb 0f00 	cmp.w	fp, #0
 80035d6:	db3e      	blt.n	8003656 <_dtoa_r+0x22e>
 80035d8:	9b06      	ldr	r3, [sp, #24]
 80035da:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80035de:	445b      	add	r3, fp
 80035e0:	9306      	str	r3, [sp, #24]
 80035e2:	2300      	movs	r3, #0
 80035e4:	9308      	str	r3, [sp, #32]
 80035e6:	9b07      	ldr	r3, [sp, #28]
 80035e8:	2b09      	cmp	r3, #9
 80035ea:	f200 80af 	bhi.w	800374c <_dtoa_r+0x324>
 80035ee:	2b05      	cmp	r3, #5
 80035f0:	bfc4      	itt	gt
 80035f2:	3b04      	subgt	r3, #4
 80035f4:	9307      	strgt	r3, [sp, #28]
 80035f6:	9b07      	ldr	r3, [sp, #28]
 80035f8:	f1a3 0302 	sub.w	r3, r3, #2
 80035fc:	bfcc      	ite	gt
 80035fe:	2600      	movgt	r6, #0
 8003600:	2601      	movle	r6, #1
 8003602:	2b03      	cmp	r3, #3
 8003604:	f200 80ae 	bhi.w	8003764 <_dtoa_r+0x33c>
 8003608:	e8df f003 	tbb	[pc, r3]
 800360c:	772f8482 	.word	0x772f8482
 8003610:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003612:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003614:	441d      	add	r5, r3
 8003616:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800361a:	2b20      	cmp	r3, #32
 800361c:	dd11      	ble.n	8003642 <_dtoa_r+0x21a>
 800361e:	9a00      	ldr	r2, [sp, #0]
 8003620:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003624:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003628:	fa22 f000 	lsr.w	r0, r2, r0
 800362c:	fa08 f303 	lsl.w	r3, r8, r3
 8003630:	4318      	orrs	r0, r3
 8003632:	f7fc ff13 	bl	800045c <__aeabi_ui2d>
 8003636:	2301      	movs	r3, #1
 8003638:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800363c:	3d01      	subs	r5, #1
 800363e:	9312      	str	r3, [sp, #72]	; 0x48
 8003640:	e772      	b.n	8003528 <_dtoa_r+0x100>
 8003642:	f1c3 0020 	rsb	r0, r3, #32
 8003646:	9b00      	ldr	r3, [sp, #0]
 8003648:	fa03 f000 	lsl.w	r0, r3, r0
 800364c:	e7f1      	b.n	8003632 <_dtoa_r+0x20a>
 800364e:	2301      	movs	r3, #1
 8003650:	e7b1      	b.n	80035b6 <_dtoa_r+0x18e>
 8003652:	900e      	str	r0, [sp, #56]	; 0x38
 8003654:	e7b0      	b.n	80035b8 <_dtoa_r+0x190>
 8003656:	9b05      	ldr	r3, [sp, #20]
 8003658:	eba3 030b 	sub.w	r3, r3, fp
 800365c:	9305      	str	r3, [sp, #20]
 800365e:	f1cb 0300 	rsb	r3, fp, #0
 8003662:	9308      	str	r3, [sp, #32]
 8003664:	2300      	movs	r3, #0
 8003666:	930b      	str	r3, [sp, #44]	; 0x2c
 8003668:	e7bd      	b.n	80035e6 <_dtoa_r+0x1be>
 800366a:	2301      	movs	r3, #1
 800366c:	9309      	str	r3, [sp, #36]	; 0x24
 800366e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003670:	2b00      	cmp	r3, #0
 8003672:	dd7a      	ble.n	800376a <_dtoa_r+0x342>
 8003674:	9304      	str	r3, [sp, #16]
 8003676:	9303      	str	r3, [sp, #12]
 8003678:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800367a:	2200      	movs	r2, #0
 800367c:	606a      	str	r2, [r5, #4]
 800367e:	2104      	movs	r1, #4
 8003680:	f101 0214 	add.w	r2, r1, #20
 8003684:	429a      	cmp	r2, r3
 8003686:	d975      	bls.n	8003774 <_dtoa_r+0x34c>
 8003688:	6869      	ldr	r1, [r5, #4]
 800368a:	4620      	mov	r0, r4
 800368c:	f000 fcbb 	bl	8004006 <_Balloc>
 8003690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003692:	6028      	str	r0, [r5, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	9302      	str	r3, [sp, #8]
 8003698:	9b03      	ldr	r3, [sp, #12]
 800369a:	2b0e      	cmp	r3, #14
 800369c:	f200 80e5 	bhi.w	800386a <_dtoa_r+0x442>
 80036a0:	2e00      	cmp	r6, #0
 80036a2:	f000 80e2 	beq.w	800386a <_dtoa_r+0x442>
 80036a6:	ed9d 7b00 	vldr	d7, [sp]
 80036aa:	f1bb 0f00 	cmp.w	fp, #0
 80036ae:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80036b2:	dd74      	ble.n	800379e <_dtoa_r+0x376>
 80036b4:	4a23      	ldr	r2, [pc, #140]	; (8003744 <_dtoa_r+0x31c>)
 80036b6:	f00b 030f 	and.w	r3, fp, #15
 80036ba:	ea4f 162b 	mov.w	r6, fp, asr #4
 80036be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80036c2:	06f0      	lsls	r0, r6, #27
 80036c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80036c8:	d559      	bpl.n	800377e <_dtoa_r+0x356>
 80036ca:	4b1f      	ldr	r3, [pc, #124]	; (8003748 <_dtoa_r+0x320>)
 80036cc:	ec51 0b17 	vmov	r0, r1, d7
 80036d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80036d4:	f7fd f862 	bl	800079c <__aeabi_ddiv>
 80036d8:	e9cd 0100 	strd	r0, r1, [sp]
 80036dc:	f006 060f 	and.w	r6, r6, #15
 80036e0:	2503      	movs	r5, #3
 80036e2:	4f19      	ldr	r7, [pc, #100]	; (8003748 <_dtoa_r+0x320>)
 80036e4:	2e00      	cmp	r6, #0
 80036e6:	d14c      	bne.n	8003782 <_dtoa_r+0x35a>
 80036e8:	4642      	mov	r2, r8
 80036ea:	464b      	mov	r3, r9
 80036ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80036f0:	f7fd f854 	bl	800079c <__aeabi_ddiv>
 80036f4:	e9cd 0100 	strd	r0, r1, [sp]
 80036f8:	e06a      	b.n	80037d0 <_dtoa_r+0x3a8>
 80036fa:	2301      	movs	r3, #1
 80036fc:	9309      	str	r3, [sp, #36]	; 0x24
 80036fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003700:	445b      	add	r3, fp
 8003702:	9304      	str	r3, [sp, #16]
 8003704:	3301      	adds	r3, #1
 8003706:	2b01      	cmp	r3, #1
 8003708:	9303      	str	r3, [sp, #12]
 800370a:	bfb8      	it	lt
 800370c:	2301      	movlt	r3, #1
 800370e:	e7b3      	b.n	8003678 <_dtoa_r+0x250>
 8003710:	2300      	movs	r3, #0
 8003712:	e7ab      	b.n	800366c <_dtoa_r+0x244>
 8003714:	2300      	movs	r3, #0
 8003716:	e7f1      	b.n	80036fc <_dtoa_r+0x2d4>
 8003718:	636f4361 	.word	0x636f4361
 800371c:	3fd287a7 	.word	0x3fd287a7
 8003720:	8b60c8b3 	.word	0x8b60c8b3
 8003724:	3fc68a28 	.word	0x3fc68a28
 8003728:	509f79fb 	.word	0x509f79fb
 800372c:	3fd34413 	.word	0x3fd34413
 8003730:	7ff00000 	.word	0x7ff00000
 8003734:	0800472e 	.word	0x0800472e
 8003738:	08004725 	.word	0x08004725
 800373c:	08004724 	.word	0x08004724
 8003740:	3ff80000 	.word	0x3ff80000
 8003744:	08004760 	.word	0x08004760
 8003748:	08004738 	.word	0x08004738
 800374c:	2601      	movs	r6, #1
 800374e:	2300      	movs	r3, #0
 8003750:	9307      	str	r3, [sp, #28]
 8003752:	9609      	str	r6, [sp, #36]	; 0x24
 8003754:	f04f 33ff 	mov.w	r3, #4294967295
 8003758:	9304      	str	r3, [sp, #16]
 800375a:	9303      	str	r3, [sp, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	2312      	movs	r3, #18
 8003760:	920a      	str	r2, [sp, #40]	; 0x28
 8003762:	e789      	b.n	8003678 <_dtoa_r+0x250>
 8003764:	2301      	movs	r3, #1
 8003766:	9309      	str	r3, [sp, #36]	; 0x24
 8003768:	e7f4      	b.n	8003754 <_dtoa_r+0x32c>
 800376a:	2301      	movs	r3, #1
 800376c:	9304      	str	r3, [sp, #16]
 800376e:	9303      	str	r3, [sp, #12]
 8003770:	461a      	mov	r2, r3
 8003772:	e7f5      	b.n	8003760 <_dtoa_r+0x338>
 8003774:	686a      	ldr	r2, [r5, #4]
 8003776:	3201      	adds	r2, #1
 8003778:	606a      	str	r2, [r5, #4]
 800377a:	0049      	lsls	r1, r1, #1
 800377c:	e780      	b.n	8003680 <_dtoa_r+0x258>
 800377e:	2502      	movs	r5, #2
 8003780:	e7af      	b.n	80036e2 <_dtoa_r+0x2ba>
 8003782:	07f1      	lsls	r1, r6, #31
 8003784:	d508      	bpl.n	8003798 <_dtoa_r+0x370>
 8003786:	4640      	mov	r0, r8
 8003788:	4649      	mov	r1, r9
 800378a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800378e:	f7fc fedb 	bl	8000548 <__aeabi_dmul>
 8003792:	3501      	adds	r5, #1
 8003794:	4680      	mov	r8, r0
 8003796:	4689      	mov	r9, r1
 8003798:	1076      	asrs	r6, r6, #1
 800379a:	3708      	adds	r7, #8
 800379c:	e7a2      	b.n	80036e4 <_dtoa_r+0x2bc>
 800379e:	f000 809d 	beq.w	80038dc <_dtoa_r+0x4b4>
 80037a2:	f1cb 0600 	rsb	r6, fp, #0
 80037a6:	4b9f      	ldr	r3, [pc, #636]	; (8003a24 <_dtoa_r+0x5fc>)
 80037a8:	4f9f      	ldr	r7, [pc, #636]	; (8003a28 <_dtoa_r+0x600>)
 80037aa:	f006 020f 	and.w	r2, r6, #15
 80037ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80037ba:	f7fc fec5 	bl	8000548 <__aeabi_dmul>
 80037be:	e9cd 0100 	strd	r0, r1, [sp]
 80037c2:	1136      	asrs	r6, r6, #4
 80037c4:	2300      	movs	r3, #0
 80037c6:	2502      	movs	r5, #2
 80037c8:	2e00      	cmp	r6, #0
 80037ca:	d17c      	bne.n	80038c6 <_dtoa_r+0x49e>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d191      	bne.n	80036f4 <_dtoa_r+0x2cc>
 80037d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 8084 	beq.w	80038e0 <_dtoa_r+0x4b8>
 80037d8:	e9dd 8900 	ldrd	r8, r9, [sp]
 80037dc:	2200      	movs	r2, #0
 80037de:	4b93      	ldr	r3, [pc, #588]	; (8003a2c <_dtoa_r+0x604>)
 80037e0:	4640      	mov	r0, r8
 80037e2:	4649      	mov	r1, r9
 80037e4:	f7fd f922 	bl	8000a2c <__aeabi_dcmplt>
 80037e8:	2800      	cmp	r0, #0
 80037ea:	d079      	beq.n	80038e0 <_dtoa_r+0x4b8>
 80037ec:	9b03      	ldr	r3, [sp, #12]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d076      	beq.n	80038e0 <_dtoa_r+0x4b8>
 80037f2:	9b04      	ldr	r3, [sp, #16]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	dd34      	ble.n	8003862 <_dtoa_r+0x43a>
 80037f8:	2200      	movs	r2, #0
 80037fa:	4b8d      	ldr	r3, [pc, #564]	; (8003a30 <_dtoa_r+0x608>)
 80037fc:	4640      	mov	r0, r8
 80037fe:	4649      	mov	r1, r9
 8003800:	f7fc fea2 	bl	8000548 <__aeabi_dmul>
 8003804:	e9cd 0100 	strd	r0, r1, [sp]
 8003808:	9e04      	ldr	r6, [sp, #16]
 800380a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800380e:	3501      	adds	r5, #1
 8003810:	4628      	mov	r0, r5
 8003812:	f7fc fe33 	bl	800047c <__aeabi_i2d>
 8003816:	e9dd 2300 	ldrd	r2, r3, [sp]
 800381a:	f7fc fe95 	bl	8000548 <__aeabi_dmul>
 800381e:	2200      	movs	r2, #0
 8003820:	4b84      	ldr	r3, [pc, #528]	; (8003a34 <_dtoa_r+0x60c>)
 8003822:	f7fc fcdf 	bl	80001e4 <__adddf3>
 8003826:	4680      	mov	r8, r0
 8003828:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800382c:	2e00      	cmp	r6, #0
 800382e:	d15a      	bne.n	80038e6 <_dtoa_r+0x4be>
 8003830:	2200      	movs	r2, #0
 8003832:	4b81      	ldr	r3, [pc, #516]	; (8003a38 <_dtoa_r+0x610>)
 8003834:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003838:	f7fc fcd2 	bl	80001e0 <__aeabi_dsub>
 800383c:	4642      	mov	r2, r8
 800383e:	464b      	mov	r3, r9
 8003840:	e9cd 0100 	strd	r0, r1, [sp]
 8003844:	f7fd f910 	bl	8000a68 <__aeabi_dcmpgt>
 8003848:	2800      	cmp	r0, #0
 800384a:	f040 829b 	bne.w	8003d84 <_dtoa_r+0x95c>
 800384e:	4642      	mov	r2, r8
 8003850:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003854:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003858:	f7fd f8e8 	bl	8000a2c <__aeabi_dcmplt>
 800385c:	2800      	cmp	r0, #0
 800385e:	f040 828f 	bne.w	8003d80 <_dtoa_r+0x958>
 8003862:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003866:	e9cd 2300 	strd	r2, r3, [sp]
 800386a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800386c:	2b00      	cmp	r3, #0
 800386e:	f2c0 8150 	blt.w	8003b12 <_dtoa_r+0x6ea>
 8003872:	f1bb 0f0e 	cmp.w	fp, #14
 8003876:	f300 814c 	bgt.w	8003b12 <_dtoa_r+0x6ea>
 800387a:	4b6a      	ldr	r3, [pc, #424]	; (8003a24 <_dtoa_r+0x5fc>)
 800387c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003880:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003886:	2b00      	cmp	r3, #0
 8003888:	f280 80da 	bge.w	8003a40 <_dtoa_r+0x618>
 800388c:	9b03      	ldr	r3, [sp, #12]
 800388e:	2b00      	cmp	r3, #0
 8003890:	f300 80d6 	bgt.w	8003a40 <_dtoa_r+0x618>
 8003894:	f040 8273 	bne.w	8003d7e <_dtoa_r+0x956>
 8003898:	2200      	movs	r2, #0
 800389a:	4b67      	ldr	r3, [pc, #412]	; (8003a38 <_dtoa_r+0x610>)
 800389c:	4640      	mov	r0, r8
 800389e:	4649      	mov	r1, r9
 80038a0:	f7fc fe52 	bl	8000548 <__aeabi_dmul>
 80038a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80038a8:	f7fd f8d4 	bl	8000a54 <__aeabi_dcmpge>
 80038ac:	9e03      	ldr	r6, [sp, #12]
 80038ae:	4637      	mov	r7, r6
 80038b0:	2800      	cmp	r0, #0
 80038b2:	f040 824a 	bne.w	8003d4a <_dtoa_r+0x922>
 80038b6:	9b02      	ldr	r3, [sp, #8]
 80038b8:	9a02      	ldr	r2, [sp, #8]
 80038ba:	1c5d      	adds	r5, r3, #1
 80038bc:	2331      	movs	r3, #49	; 0x31
 80038be:	7013      	strb	r3, [r2, #0]
 80038c0:	f10b 0b01 	add.w	fp, fp, #1
 80038c4:	e245      	b.n	8003d52 <_dtoa_r+0x92a>
 80038c6:	07f2      	lsls	r2, r6, #31
 80038c8:	d505      	bpl.n	80038d6 <_dtoa_r+0x4ae>
 80038ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038ce:	f7fc fe3b 	bl	8000548 <__aeabi_dmul>
 80038d2:	3501      	adds	r5, #1
 80038d4:	2301      	movs	r3, #1
 80038d6:	1076      	asrs	r6, r6, #1
 80038d8:	3708      	adds	r7, #8
 80038da:	e775      	b.n	80037c8 <_dtoa_r+0x3a0>
 80038dc:	2502      	movs	r5, #2
 80038de:	e777      	b.n	80037d0 <_dtoa_r+0x3a8>
 80038e0:	465f      	mov	r7, fp
 80038e2:	9e03      	ldr	r6, [sp, #12]
 80038e4:	e794      	b.n	8003810 <_dtoa_r+0x3e8>
 80038e6:	9a02      	ldr	r2, [sp, #8]
 80038e8:	4b4e      	ldr	r3, [pc, #312]	; (8003a24 <_dtoa_r+0x5fc>)
 80038ea:	4432      	add	r2, r6
 80038ec:	9213      	str	r2, [sp, #76]	; 0x4c
 80038ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038f0:	1e71      	subs	r1, r6, #1
 80038f2:	2a00      	cmp	r2, #0
 80038f4:	d048      	beq.n	8003988 <_dtoa_r+0x560>
 80038f6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	2000      	movs	r0, #0
 8003900:	494e      	ldr	r1, [pc, #312]	; (8003a3c <_dtoa_r+0x614>)
 8003902:	f7fc ff4b 	bl	800079c <__aeabi_ddiv>
 8003906:	4642      	mov	r2, r8
 8003908:	464b      	mov	r3, r9
 800390a:	f7fc fc69 	bl	80001e0 <__aeabi_dsub>
 800390e:	9d02      	ldr	r5, [sp, #8]
 8003910:	4680      	mov	r8, r0
 8003912:	4689      	mov	r9, r1
 8003914:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003918:	f7fd f8c6 	bl	8000aa8 <__aeabi_d2iz>
 800391c:	4606      	mov	r6, r0
 800391e:	f7fc fdad 	bl	800047c <__aeabi_i2d>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	e9dd 0100 	ldrd	r0, r1, [sp]
 800392a:	f7fc fc59 	bl	80001e0 <__aeabi_dsub>
 800392e:	3630      	adds	r6, #48	; 0x30
 8003930:	f805 6b01 	strb.w	r6, [r5], #1
 8003934:	4642      	mov	r2, r8
 8003936:	464b      	mov	r3, r9
 8003938:	e9cd 0100 	strd	r0, r1, [sp]
 800393c:	f7fd f876 	bl	8000a2c <__aeabi_dcmplt>
 8003940:	2800      	cmp	r0, #0
 8003942:	d165      	bne.n	8003a10 <_dtoa_r+0x5e8>
 8003944:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003948:	2000      	movs	r0, #0
 800394a:	4938      	ldr	r1, [pc, #224]	; (8003a2c <_dtoa_r+0x604>)
 800394c:	f7fc fc48 	bl	80001e0 <__aeabi_dsub>
 8003950:	4642      	mov	r2, r8
 8003952:	464b      	mov	r3, r9
 8003954:	f7fd f86a 	bl	8000a2c <__aeabi_dcmplt>
 8003958:	2800      	cmp	r0, #0
 800395a:	f040 80ba 	bne.w	8003ad2 <_dtoa_r+0x6aa>
 800395e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003960:	429d      	cmp	r5, r3
 8003962:	f43f af7e 	beq.w	8003862 <_dtoa_r+0x43a>
 8003966:	2200      	movs	r2, #0
 8003968:	4b31      	ldr	r3, [pc, #196]	; (8003a30 <_dtoa_r+0x608>)
 800396a:	4640      	mov	r0, r8
 800396c:	4649      	mov	r1, r9
 800396e:	f7fc fdeb 	bl	8000548 <__aeabi_dmul>
 8003972:	2200      	movs	r2, #0
 8003974:	4680      	mov	r8, r0
 8003976:	4689      	mov	r9, r1
 8003978:	4b2d      	ldr	r3, [pc, #180]	; (8003a30 <_dtoa_r+0x608>)
 800397a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800397e:	f7fc fde3 	bl	8000548 <__aeabi_dmul>
 8003982:	e9cd 0100 	strd	r0, r1, [sp]
 8003986:	e7c5      	b.n	8003914 <_dtoa_r+0x4ec>
 8003988:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800398c:	4642      	mov	r2, r8
 800398e:	464b      	mov	r3, r9
 8003990:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003994:	f7fc fdd8 	bl	8000548 <__aeabi_dmul>
 8003998:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800399c:	9d02      	ldr	r5, [sp, #8]
 800399e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039a2:	f7fd f881 	bl	8000aa8 <__aeabi_d2iz>
 80039a6:	4606      	mov	r6, r0
 80039a8:	f7fc fd68 	bl	800047c <__aeabi_i2d>
 80039ac:	3630      	adds	r6, #48	; 0x30
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039b6:	f7fc fc13 	bl	80001e0 <__aeabi_dsub>
 80039ba:	f805 6b01 	strb.w	r6, [r5], #1
 80039be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80039c0:	42ab      	cmp	r3, r5
 80039c2:	4680      	mov	r8, r0
 80039c4:	4689      	mov	r9, r1
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	d125      	bne.n	8003a18 <_dtoa_r+0x5f0>
 80039cc:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <_dtoa_r+0x614>)
 80039ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80039d2:	f7fc fc07 	bl	80001e4 <__adddf3>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4640      	mov	r0, r8
 80039dc:	4649      	mov	r1, r9
 80039de:	f7fd f843 	bl	8000a68 <__aeabi_dcmpgt>
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d175      	bne.n	8003ad2 <_dtoa_r+0x6aa>
 80039e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80039ea:	2000      	movs	r0, #0
 80039ec:	4913      	ldr	r1, [pc, #76]	; (8003a3c <_dtoa_r+0x614>)
 80039ee:	f7fc fbf7 	bl	80001e0 <__aeabi_dsub>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4640      	mov	r0, r8
 80039f8:	4649      	mov	r1, r9
 80039fa:	f7fd f817 	bl	8000a2c <__aeabi_dcmplt>
 80039fe:	2800      	cmp	r0, #0
 8003a00:	f43f af2f 	beq.w	8003862 <_dtoa_r+0x43a>
 8003a04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003a08:	2b30      	cmp	r3, #48	; 0x30
 8003a0a:	f105 32ff 	add.w	r2, r5, #4294967295
 8003a0e:	d001      	beq.n	8003a14 <_dtoa_r+0x5ec>
 8003a10:	46bb      	mov	fp, r7
 8003a12:	e04d      	b.n	8003ab0 <_dtoa_r+0x688>
 8003a14:	4615      	mov	r5, r2
 8003a16:	e7f5      	b.n	8003a04 <_dtoa_r+0x5dc>
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <_dtoa_r+0x608>)
 8003a1a:	f7fc fd95 	bl	8000548 <__aeabi_dmul>
 8003a1e:	e9cd 0100 	strd	r0, r1, [sp]
 8003a22:	e7bc      	b.n	800399e <_dtoa_r+0x576>
 8003a24:	08004760 	.word	0x08004760
 8003a28:	08004738 	.word	0x08004738
 8003a2c:	3ff00000 	.word	0x3ff00000
 8003a30:	40240000 	.word	0x40240000
 8003a34:	401c0000 	.word	0x401c0000
 8003a38:	40140000 	.word	0x40140000
 8003a3c:	3fe00000 	.word	0x3fe00000
 8003a40:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003a44:	9d02      	ldr	r5, [sp, #8]
 8003a46:	4642      	mov	r2, r8
 8003a48:	464b      	mov	r3, r9
 8003a4a:	4630      	mov	r0, r6
 8003a4c:	4639      	mov	r1, r7
 8003a4e:	f7fc fea5 	bl	800079c <__aeabi_ddiv>
 8003a52:	f7fd f829 	bl	8000aa8 <__aeabi_d2iz>
 8003a56:	9000      	str	r0, [sp, #0]
 8003a58:	f7fc fd10 	bl	800047c <__aeabi_i2d>
 8003a5c:	4642      	mov	r2, r8
 8003a5e:	464b      	mov	r3, r9
 8003a60:	f7fc fd72 	bl	8000548 <__aeabi_dmul>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4630      	mov	r0, r6
 8003a6a:	4639      	mov	r1, r7
 8003a6c:	f7fc fbb8 	bl	80001e0 <__aeabi_dsub>
 8003a70:	9e00      	ldr	r6, [sp, #0]
 8003a72:	9f03      	ldr	r7, [sp, #12]
 8003a74:	3630      	adds	r6, #48	; 0x30
 8003a76:	f805 6b01 	strb.w	r6, [r5], #1
 8003a7a:	9e02      	ldr	r6, [sp, #8]
 8003a7c:	1bae      	subs	r6, r5, r6
 8003a7e:	42b7      	cmp	r7, r6
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	d138      	bne.n	8003af8 <_dtoa_r+0x6d0>
 8003a86:	f7fc fbad 	bl	80001e4 <__adddf3>
 8003a8a:	4606      	mov	r6, r0
 8003a8c:	460f      	mov	r7, r1
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	4640      	mov	r0, r8
 8003a94:	4649      	mov	r1, r9
 8003a96:	f7fc ffc9 	bl	8000a2c <__aeabi_dcmplt>
 8003a9a:	b9c8      	cbnz	r0, 8003ad0 <_dtoa_r+0x6a8>
 8003a9c:	4632      	mov	r2, r6
 8003a9e:	463b      	mov	r3, r7
 8003aa0:	4640      	mov	r0, r8
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	f7fc ffb8 	bl	8000a18 <__aeabi_dcmpeq>
 8003aa8:	b110      	cbz	r0, 8003ab0 <_dtoa_r+0x688>
 8003aaa:	9b00      	ldr	r3, [sp, #0]
 8003aac:	07db      	lsls	r3, r3, #31
 8003aae:	d40f      	bmi.n	8003ad0 <_dtoa_r+0x6a8>
 8003ab0:	4651      	mov	r1, sl
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	f000 fadb 	bl	800406e <_Bfree>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003abc:	702b      	strb	r3, [r5, #0]
 8003abe:	f10b 0301 	add.w	r3, fp, #1
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f43f acf8 	beq.w	80034bc <_dtoa_r+0x94>
 8003acc:	601d      	str	r5, [r3, #0]
 8003ace:	e4f5      	b.n	80034bc <_dtoa_r+0x94>
 8003ad0:	465f      	mov	r7, fp
 8003ad2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003ad6:	2a39      	cmp	r2, #57	; 0x39
 8003ad8:	f105 33ff 	add.w	r3, r5, #4294967295
 8003adc:	d106      	bne.n	8003aec <_dtoa_r+0x6c4>
 8003ade:	9a02      	ldr	r2, [sp, #8]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d107      	bne.n	8003af4 <_dtoa_r+0x6cc>
 8003ae4:	2330      	movs	r3, #48	; 0x30
 8003ae6:	7013      	strb	r3, [r2, #0]
 8003ae8:	3701      	adds	r7, #1
 8003aea:	4613      	mov	r3, r2
 8003aec:	781a      	ldrb	r2, [r3, #0]
 8003aee:	3201      	adds	r2, #1
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	e78d      	b.n	8003a10 <_dtoa_r+0x5e8>
 8003af4:	461d      	mov	r5, r3
 8003af6:	e7ec      	b.n	8003ad2 <_dtoa_r+0x6aa>
 8003af8:	2200      	movs	r2, #0
 8003afa:	4ba4      	ldr	r3, [pc, #656]	; (8003d8c <_dtoa_r+0x964>)
 8003afc:	f7fc fd24 	bl	8000548 <__aeabi_dmul>
 8003b00:	2200      	movs	r2, #0
 8003b02:	2300      	movs	r3, #0
 8003b04:	4606      	mov	r6, r0
 8003b06:	460f      	mov	r7, r1
 8003b08:	f7fc ff86 	bl	8000a18 <__aeabi_dcmpeq>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d09a      	beq.n	8003a46 <_dtoa_r+0x61e>
 8003b10:	e7ce      	b.n	8003ab0 <_dtoa_r+0x688>
 8003b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b14:	2a00      	cmp	r2, #0
 8003b16:	f000 80cd 	beq.w	8003cb4 <_dtoa_r+0x88c>
 8003b1a:	9a07      	ldr	r2, [sp, #28]
 8003b1c:	2a01      	cmp	r2, #1
 8003b1e:	f300 80af 	bgt.w	8003c80 <_dtoa_r+0x858>
 8003b22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003b24:	2a00      	cmp	r2, #0
 8003b26:	f000 80a7 	beq.w	8003c78 <_dtoa_r+0x850>
 8003b2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003b2e:	9e08      	ldr	r6, [sp, #32]
 8003b30:	9d05      	ldr	r5, [sp, #20]
 8003b32:	9a05      	ldr	r2, [sp, #20]
 8003b34:	441a      	add	r2, r3
 8003b36:	9205      	str	r2, [sp, #20]
 8003b38:	9a06      	ldr	r2, [sp, #24]
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	441a      	add	r2, r3
 8003b3e:	4620      	mov	r0, r4
 8003b40:	9206      	str	r2, [sp, #24]
 8003b42:	f000 fb34 	bl	80041ae <__i2b>
 8003b46:	4607      	mov	r7, r0
 8003b48:	2d00      	cmp	r5, #0
 8003b4a:	dd0c      	ble.n	8003b66 <_dtoa_r+0x73e>
 8003b4c:	9b06      	ldr	r3, [sp, #24]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	dd09      	ble.n	8003b66 <_dtoa_r+0x73e>
 8003b52:	42ab      	cmp	r3, r5
 8003b54:	9a05      	ldr	r2, [sp, #20]
 8003b56:	bfa8      	it	ge
 8003b58:	462b      	movge	r3, r5
 8003b5a:	1ad2      	subs	r2, r2, r3
 8003b5c:	9205      	str	r2, [sp, #20]
 8003b5e:	9a06      	ldr	r2, [sp, #24]
 8003b60:	1aed      	subs	r5, r5, r3
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	9306      	str	r3, [sp, #24]
 8003b66:	9b08      	ldr	r3, [sp, #32]
 8003b68:	b1f3      	cbz	r3, 8003ba8 <_dtoa_r+0x780>
 8003b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80a5 	beq.w	8003cbc <_dtoa_r+0x894>
 8003b72:	2e00      	cmp	r6, #0
 8003b74:	dd10      	ble.n	8003b98 <_dtoa_r+0x770>
 8003b76:	4639      	mov	r1, r7
 8003b78:	4632      	mov	r2, r6
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f000 fbae 	bl	80042dc <__pow5mult>
 8003b80:	4652      	mov	r2, sl
 8003b82:	4601      	mov	r1, r0
 8003b84:	4607      	mov	r7, r0
 8003b86:	4620      	mov	r0, r4
 8003b88:	f000 fb1a 	bl	80041c0 <__multiply>
 8003b8c:	4651      	mov	r1, sl
 8003b8e:	4680      	mov	r8, r0
 8003b90:	4620      	mov	r0, r4
 8003b92:	f000 fa6c 	bl	800406e <_Bfree>
 8003b96:	46c2      	mov	sl, r8
 8003b98:	9b08      	ldr	r3, [sp, #32]
 8003b9a:	1b9a      	subs	r2, r3, r6
 8003b9c:	d004      	beq.n	8003ba8 <_dtoa_r+0x780>
 8003b9e:	4651      	mov	r1, sl
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f000 fb9b 	bl	80042dc <__pow5mult>
 8003ba6:	4682      	mov	sl, r0
 8003ba8:	2101      	movs	r1, #1
 8003baa:	4620      	mov	r0, r4
 8003bac:	f000 faff 	bl	80041ae <__i2b>
 8003bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	4606      	mov	r6, r0
 8003bb6:	f340 8083 	ble.w	8003cc0 <_dtoa_r+0x898>
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4601      	mov	r1, r0
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	f000 fb8c 	bl	80042dc <__pow5mult>
 8003bc4:	9b07      	ldr	r3, [sp, #28]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	4606      	mov	r6, r0
 8003bca:	dd7c      	ble.n	8003cc6 <_dtoa_r+0x89e>
 8003bcc:	f04f 0800 	mov.w	r8, #0
 8003bd0:	6933      	ldr	r3, [r6, #16]
 8003bd2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003bd6:	6918      	ldr	r0, [r3, #16]
 8003bd8:	f000 fa9b 	bl	8004112 <__hi0bits>
 8003bdc:	f1c0 0020 	rsb	r0, r0, #32
 8003be0:	9b06      	ldr	r3, [sp, #24]
 8003be2:	4418      	add	r0, r3
 8003be4:	f010 001f 	ands.w	r0, r0, #31
 8003be8:	f000 8096 	beq.w	8003d18 <_dtoa_r+0x8f0>
 8003bec:	f1c0 0320 	rsb	r3, r0, #32
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	f340 8087 	ble.w	8003d04 <_dtoa_r+0x8dc>
 8003bf6:	9b05      	ldr	r3, [sp, #20]
 8003bf8:	f1c0 001c 	rsb	r0, r0, #28
 8003bfc:	4403      	add	r3, r0
 8003bfe:	9305      	str	r3, [sp, #20]
 8003c00:	9b06      	ldr	r3, [sp, #24]
 8003c02:	4405      	add	r5, r0
 8003c04:	4403      	add	r3, r0
 8003c06:	9306      	str	r3, [sp, #24]
 8003c08:	9b05      	ldr	r3, [sp, #20]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	dd05      	ble.n	8003c1a <_dtoa_r+0x7f2>
 8003c0e:	4651      	mov	r1, sl
 8003c10:	461a      	mov	r2, r3
 8003c12:	4620      	mov	r0, r4
 8003c14:	f000 fbb0 	bl	8004378 <__lshift>
 8003c18:	4682      	mov	sl, r0
 8003c1a:	9b06      	ldr	r3, [sp, #24]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	dd05      	ble.n	8003c2c <_dtoa_r+0x804>
 8003c20:	4631      	mov	r1, r6
 8003c22:	461a      	mov	r2, r3
 8003c24:	4620      	mov	r0, r4
 8003c26:	f000 fba7 	bl	8004378 <__lshift>
 8003c2a:	4606      	mov	r6, r0
 8003c2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d074      	beq.n	8003d1c <_dtoa_r+0x8f4>
 8003c32:	4631      	mov	r1, r6
 8003c34:	4650      	mov	r0, sl
 8003c36:	f000 fbf0 	bl	800441a <__mcmp>
 8003c3a:	2800      	cmp	r0, #0
 8003c3c:	da6e      	bge.n	8003d1c <_dtoa_r+0x8f4>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	4651      	mov	r1, sl
 8003c42:	220a      	movs	r2, #10
 8003c44:	4620      	mov	r0, r4
 8003c46:	f000 fa29 	bl	800409c <__multadd>
 8003c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003c50:	4682      	mov	sl, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 81a8 	beq.w	8003fa8 <_dtoa_r+0xb80>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	4639      	mov	r1, r7
 8003c5c:	220a      	movs	r2, #10
 8003c5e:	4620      	mov	r0, r4
 8003c60:	f000 fa1c 	bl	800409c <__multadd>
 8003c64:	9b04      	ldr	r3, [sp, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	4607      	mov	r7, r0
 8003c6a:	f300 80c8 	bgt.w	8003dfe <_dtoa_r+0x9d6>
 8003c6e:	9b07      	ldr	r3, [sp, #28]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	f340 80c4 	ble.w	8003dfe <_dtoa_r+0x9d6>
 8003c76:	e059      	b.n	8003d2c <_dtoa_r+0x904>
 8003c78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003c7a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003c7e:	e756      	b.n	8003b2e <_dtoa_r+0x706>
 8003c80:	9b03      	ldr	r3, [sp, #12]
 8003c82:	1e5e      	subs	r6, r3, #1
 8003c84:	9b08      	ldr	r3, [sp, #32]
 8003c86:	42b3      	cmp	r3, r6
 8003c88:	bfbf      	itttt	lt
 8003c8a:	9b08      	ldrlt	r3, [sp, #32]
 8003c8c:	9608      	strlt	r6, [sp, #32]
 8003c8e:	1af2      	sublt	r2, r6, r3
 8003c90:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8003c92:	bfb6      	itet	lt
 8003c94:	189b      	addlt	r3, r3, r2
 8003c96:	1b9e      	subge	r6, r3, r6
 8003c98:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8003c9a:	9b03      	ldr	r3, [sp, #12]
 8003c9c:	bfb8      	it	lt
 8003c9e:	2600      	movlt	r6, #0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bfb9      	ittee	lt
 8003ca4:	9b05      	ldrlt	r3, [sp, #20]
 8003ca6:	9a03      	ldrlt	r2, [sp, #12]
 8003ca8:	9d05      	ldrge	r5, [sp, #20]
 8003caa:	9b03      	ldrge	r3, [sp, #12]
 8003cac:	bfbc      	itt	lt
 8003cae:	1a9d      	sublt	r5, r3, r2
 8003cb0:	2300      	movlt	r3, #0
 8003cb2:	e73e      	b.n	8003b32 <_dtoa_r+0x70a>
 8003cb4:	9e08      	ldr	r6, [sp, #32]
 8003cb6:	9d05      	ldr	r5, [sp, #20]
 8003cb8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003cba:	e745      	b.n	8003b48 <_dtoa_r+0x720>
 8003cbc:	9a08      	ldr	r2, [sp, #32]
 8003cbe:	e76e      	b.n	8003b9e <_dtoa_r+0x776>
 8003cc0:	9b07      	ldr	r3, [sp, #28]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	dc19      	bgt.n	8003cfa <_dtoa_r+0x8d2>
 8003cc6:	9b00      	ldr	r3, [sp, #0]
 8003cc8:	b9bb      	cbnz	r3, 8003cfa <_dtoa_r+0x8d2>
 8003cca:	9b01      	ldr	r3, [sp, #4]
 8003ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cd0:	b99b      	cbnz	r3, 8003cfa <_dtoa_r+0x8d2>
 8003cd2:	9b01      	ldr	r3, [sp, #4]
 8003cd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cd8:	0d1b      	lsrs	r3, r3, #20
 8003cda:	051b      	lsls	r3, r3, #20
 8003cdc:	b183      	cbz	r3, 8003d00 <_dtoa_r+0x8d8>
 8003cde:	9b05      	ldr	r3, [sp, #20]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	9305      	str	r3, [sp, #20]
 8003ce4:	9b06      	ldr	r3, [sp, #24]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	9306      	str	r3, [sp, #24]
 8003cea:	f04f 0801 	mov.w	r8, #1
 8003cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f47f af6d 	bne.w	8003bd0 <_dtoa_r+0x7a8>
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	e772      	b.n	8003be0 <_dtoa_r+0x7b8>
 8003cfa:	f04f 0800 	mov.w	r8, #0
 8003cfe:	e7f6      	b.n	8003cee <_dtoa_r+0x8c6>
 8003d00:	4698      	mov	r8, r3
 8003d02:	e7f4      	b.n	8003cee <_dtoa_r+0x8c6>
 8003d04:	d080      	beq.n	8003c08 <_dtoa_r+0x7e0>
 8003d06:	9a05      	ldr	r2, [sp, #20]
 8003d08:	331c      	adds	r3, #28
 8003d0a:	441a      	add	r2, r3
 8003d0c:	9205      	str	r2, [sp, #20]
 8003d0e:	9a06      	ldr	r2, [sp, #24]
 8003d10:	441a      	add	r2, r3
 8003d12:	441d      	add	r5, r3
 8003d14:	4613      	mov	r3, r2
 8003d16:	e776      	b.n	8003c06 <_dtoa_r+0x7de>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	e7f4      	b.n	8003d06 <_dtoa_r+0x8de>
 8003d1c:	9b03      	ldr	r3, [sp, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	dc36      	bgt.n	8003d90 <_dtoa_r+0x968>
 8003d22:	9b07      	ldr	r3, [sp, #28]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	dd33      	ble.n	8003d90 <_dtoa_r+0x968>
 8003d28:	9b03      	ldr	r3, [sp, #12]
 8003d2a:	9304      	str	r3, [sp, #16]
 8003d2c:	9b04      	ldr	r3, [sp, #16]
 8003d2e:	b963      	cbnz	r3, 8003d4a <_dtoa_r+0x922>
 8003d30:	4631      	mov	r1, r6
 8003d32:	2205      	movs	r2, #5
 8003d34:	4620      	mov	r0, r4
 8003d36:	f000 f9b1 	bl	800409c <__multadd>
 8003d3a:	4601      	mov	r1, r0
 8003d3c:	4606      	mov	r6, r0
 8003d3e:	4650      	mov	r0, sl
 8003d40:	f000 fb6b 	bl	800441a <__mcmp>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	f73f adb6 	bgt.w	80038b6 <_dtoa_r+0x48e>
 8003d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d4c:	9d02      	ldr	r5, [sp, #8]
 8003d4e:	ea6f 0b03 	mvn.w	fp, r3
 8003d52:	2300      	movs	r3, #0
 8003d54:	9303      	str	r3, [sp, #12]
 8003d56:	4631      	mov	r1, r6
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f000 f988 	bl	800406e <_Bfree>
 8003d5e:	2f00      	cmp	r7, #0
 8003d60:	f43f aea6 	beq.w	8003ab0 <_dtoa_r+0x688>
 8003d64:	9b03      	ldr	r3, [sp, #12]
 8003d66:	b12b      	cbz	r3, 8003d74 <_dtoa_r+0x94c>
 8003d68:	42bb      	cmp	r3, r7
 8003d6a:	d003      	beq.n	8003d74 <_dtoa_r+0x94c>
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4620      	mov	r0, r4
 8003d70:	f000 f97d 	bl	800406e <_Bfree>
 8003d74:	4639      	mov	r1, r7
 8003d76:	4620      	mov	r0, r4
 8003d78:	f000 f979 	bl	800406e <_Bfree>
 8003d7c:	e698      	b.n	8003ab0 <_dtoa_r+0x688>
 8003d7e:	2600      	movs	r6, #0
 8003d80:	4637      	mov	r7, r6
 8003d82:	e7e2      	b.n	8003d4a <_dtoa_r+0x922>
 8003d84:	46bb      	mov	fp, r7
 8003d86:	4637      	mov	r7, r6
 8003d88:	e595      	b.n	80038b6 <_dtoa_r+0x48e>
 8003d8a:	bf00      	nop
 8003d8c:	40240000 	.word	0x40240000
 8003d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d92:	bb93      	cbnz	r3, 8003dfa <_dtoa_r+0x9d2>
 8003d94:	9b03      	ldr	r3, [sp, #12]
 8003d96:	9304      	str	r3, [sp, #16]
 8003d98:	9d02      	ldr	r5, [sp, #8]
 8003d9a:	4631      	mov	r1, r6
 8003d9c:	4650      	mov	r0, sl
 8003d9e:	f7ff fab7 	bl	8003310 <quorem>
 8003da2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003da6:	f805 9b01 	strb.w	r9, [r5], #1
 8003daa:	9b02      	ldr	r3, [sp, #8]
 8003dac:	9a04      	ldr	r2, [sp, #16]
 8003dae:	1aeb      	subs	r3, r5, r3
 8003db0:	429a      	cmp	r2, r3
 8003db2:	f300 80dc 	bgt.w	8003f6e <_dtoa_r+0xb46>
 8003db6:	9b02      	ldr	r3, [sp, #8]
 8003db8:	2a01      	cmp	r2, #1
 8003dba:	bfac      	ite	ge
 8003dbc:	189b      	addge	r3, r3, r2
 8003dbe:	3301      	addlt	r3, #1
 8003dc0:	4698      	mov	r8, r3
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	9303      	str	r3, [sp, #12]
 8003dc6:	4651      	mov	r1, sl
 8003dc8:	2201      	movs	r2, #1
 8003dca:	4620      	mov	r0, r4
 8003dcc:	f000 fad4 	bl	8004378 <__lshift>
 8003dd0:	4631      	mov	r1, r6
 8003dd2:	4682      	mov	sl, r0
 8003dd4:	f000 fb21 	bl	800441a <__mcmp>
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	f300 808d 	bgt.w	8003ef8 <_dtoa_r+0xad0>
 8003dde:	d103      	bne.n	8003de8 <_dtoa_r+0x9c0>
 8003de0:	f019 0f01 	tst.w	r9, #1
 8003de4:	f040 8088 	bne.w	8003ef8 <_dtoa_r+0xad0>
 8003de8:	4645      	mov	r5, r8
 8003dea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003dee:	2b30      	cmp	r3, #48	; 0x30
 8003df0:	f105 32ff 	add.w	r2, r5, #4294967295
 8003df4:	d1af      	bne.n	8003d56 <_dtoa_r+0x92e>
 8003df6:	4615      	mov	r5, r2
 8003df8:	e7f7      	b.n	8003dea <_dtoa_r+0x9c2>
 8003dfa:	9b03      	ldr	r3, [sp, #12]
 8003dfc:	9304      	str	r3, [sp, #16]
 8003dfe:	2d00      	cmp	r5, #0
 8003e00:	dd05      	ble.n	8003e0e <_dtoa_r+0x9e6>
 8003e02:	4639      	mov	r1, r7
 8003e04:	462a      	mov	r2, r5
 8003e06:	4620      	mov	r0, r4
 8003e08:	f000 fab6 	bl	8004378 <__lshift>
 8003e0c:	4607      	mov	r7, r0
 8003e0e:	f1b8 0f00 	cmp.w	r8, #0
 8003e12:	d04c      	beq.n	8003eae <_dtoa_r+0xa86>
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	4620      	mov	r0, r4
 8003e18:	f000 f8f5 	bl	8004006 <_Balloc>
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	3202      	adds	r2, #2
 8003e20:	4605      	mov	r5, r0
 8003e22:	0092      	lsls	r2, r2, #2
 8003e24:	f107 010c 	add.w	r1, r7, #12
 8003e28:	300c      	adds	r0, #12
 8003e2a:	f000 f8e1 	bl	8003ff0 <memcpy>
 8003e2e:	2201      	movs	r2, #1
 8003e30:	4629      	mov	r1, r5
 8003e32:	4620      	mov	r0, r4
 8003e34:	f000 faa0 	bl	8004378 <__lshift>
 8003e38:	9b00      	ldr	r3, [sp, #0]
 8003e3a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003e3e:	9703      	str	r7, [sp, #12]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	4607      	mov	r7, r0
 8003e46:	9305      	str	r3, [sp, #20]
 8003e48:	4631      	mov	r1, r6
 8003e4a:	4650      	mov	r0, sl
 8003e4c:	f7ff fa60 	bl	8003310 <quorem>
 8003e50:	9903      	ldr	r1, [sp, #12]
 8003e52:	4605      	mov	r5, r0
 8003e54:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003e58:	4650      	mov	r0, sl
 8003e5a:	f000 fade 	bl	800441a <__mcmp>
 8003e5e:	463a      	mov	r2, r7
 8003e60:	9000      	str	r0, [sp, #0]
 8003e62:	4631      	mov	r1, r6
 8003e64:	4620      	mov	r0, r4
 8003e66:	f000 faf2 	bl	800444e <__mdiff>
 8003e6a:	68c3      	ldr	r3, [r0, #12]
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	bb03      	cbnz	r3, 8003eb2 <_dtoa_r+0xa8a>
 8003e70:	4601      	mov	r1, r0
 8003e72:	9006      	str	r0, [sp, #24]
 8003e74:	4650      	mov	r0, sl
 8003e76:	f000 fad0 	bl	800441a <__mcmp>
 8003e7a:	9a06      	ldr	r2, [sp, #24]
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4620      	mov	r0, r4
 8003e82:	9306      	str	r3, [sp, #24]
 8003e84:	f000 f8f3 	bl	800406e <_Bfree>
 8003e88:	9b06      	ldr	r3, [sp, #24]
 8003e8a:	b9a3      	cbnz	r3, 8003eb6 <_dtoa_r+0xa8e>
 8003e8c:	9a07      	ldr	r2, [sp, #28]
 8003e8e:	b992      	cbnz	r2, 8003eb6 <_dtoa_r+0xa8e>
 8003e90:	9a05      	ldr	r2, [sp, #20]
 8003e92:	b982      	cbnz	r2, 8003eb6 <_dtoa_r+0xa8e>
 8003e94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003e98:	d029      	beq.n	8003eee <_dtoa_r+0xac6>
 8003e9a:	9b00      	ldr	r3, [sp, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	dd01      	ble.n	8003ea4 <_dtoa_r+0xa7c>
 8003ea0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8003ea4:	f108 0501 	add.w	r5, r8, #1
 8003ea8:	f888 9000 	strb.w	r9, [r8]
 8003eac:	e753      	b.n	8003d56 <_dtoa_r+0x92e>
 8003eae:	4638      	mov	r0, r7
 8003eb0:	e7c2      	b.n	8003e38 <_dtoa_r+0xa10>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e7e3      	b.n	8003e7e <_dtoa_r+0xa56>
 8003eb6:	9a00      	ldr	r2, [sp, #0]
 8003eb8:	2a00      	cmp	r2, #0
 8003eba:	db04      	blt.n	8003ec6 <_dtoa_r+0xa9e>
 8003ebc:	d125      	bne.n	8003f0a <_dtoa_r+0xae2>
 8003ebe:	9a07      	ldr	r2, [sp, #28]
 8003ec0:	bb1a      	cbnz	r2, 8003f0a <_dtoa_r+0xae2>
 8003ec2:	9a05      	ldr	r2, [sp, #20]
 8003ec4:	bb0a      	cbnz	r2, 8003f0a <_dtoa_r+0xae2>
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	ddec      	ble.n	8003ea4 <_dtoa_r+0xa7c>
 8003eca:	4651      	mov	r1, sl
 8003ecc:	2201      	movs	r2, #1
 8003ece:	4620      	mov	r0, r4
 8003ed0:	f000 fa52 	bl	8004378 <__lshift>
 8003ed4:	4631      	mov	r1, r6
 8003ed6:	4682      	mov	sl, r0
 8003ed8:	f000 fa9f 	bl	800441a <__mcmp>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	dc03      	bgt.n	8003ee8 <_dtoa_r+0xac0>
 8003ee0:	d1e0      	bne.n	8003ea4 <_dtoa_r+0xa7c>
 8003ee2:	f019 0f01 	tst.w	r9, #1
 8003ee6:	d0dd      	beq.n	8003ea4 <_dtoa_r+0xa7c>
 8003ee8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003eec:	d1d8      	bne.n	8003ea0 <_dtoa_r+0xa78>
 8003eee:	2339      	movs	r3, #57	; 0x39
 8003ef0:	f888 3000 	strb.w	r3, [r8]
 8003ef4:	f108 0801 	add.w	r8, r8, #1
 8003ef8:	4645      	mov	r5, r8
 8003efa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003efe:	2b39      	cmp	r3, #57	; 0x39
 8003f00:	f105 32ff 	add.w	r2, r5, #4294967295
 8003f04:	d03b      	beq.n	8003f7e <_dtoa_r+0xb56>
 8003f06:	3301      	adds	r3, #1
 8003f08:	e040      	b.n	8003f8c <_dtoa_r+0xb64>
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f108 0501 	add.w	r5, r8, #1
 8003f10:	dd05      	ble.n	8003f1e <_dtoa_r+0xaf6>
 8003f12:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003f16:	d0ea      	beq.n	8003eee <_dtoa_r+0xac6>
 8003f18:	f109 0901 	add.w	r9, r9, #1
 8003f1c:	e7c4      	b.n	8003ea8 <_dtoa_r+0xa80>
 8003f1e:	9b02      	ldr	r3, [sp, #8]
 8003f20:	9a04      	ldr	r2, [sp, #16]
 8003f22:	f805 9c01 	strb.w	r9, [r5, #-1]
 8003f26:	1aeb      	subs	r3, r5, r3
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	46a8      	mov	r8, r5
 8003f2c:	f43f af4b 	beq.w	8003dc6 <_dtoa_r+0x99e>
 8003f30:	4651      	mov	r1, sl
 8003f32:	2300      	movs	r3, #0
 8003f34:	220a      	movs	r2, #10
 8003f36:	4620      	mov	r0, r4
 8003f38:	f000 f8b0 	bl	800409c <__multadd>
 8003f3c:	9b03      	ldr	r3, [sp, #12]
 8003f3e:	9903      	ldr	r1, [sp, #12]
 8003f40:	42bb      	cmp	r3, r7
 8003f42:	4682      	mov	sl, r0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	f04f 020a 	mov.w	r2, #10
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	d104      	bne.n	8003f5a <_dtoa_r+0xb32>
 8003f50:	f000 f8a4 	bl	800409c <__multadd>
 8003f54:	9003      	str	r0, [sp, #12]
 8003f56:	4607      	mov	r7, r0
 8003f58:	e776      	b.n	8003e48 <_dtoa_r+0xa20>
 8003f5a:	f000 f89f 	bl	800409c <__multadd>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	9003      	str	r0, [sp, #12]
 8003f62:	220a      	movs	r2, #10
 8003f64:	4639      	mov	r1, r7
 8003f66:	4620      	mov	r0, r4
 8003f68:	f000 f898 	bl	800409c <__multadd>
 8003f6c:	e7f3      	b.n	8003f56 <_dtoa_r+0xb2e>
 8003f6e:	4651      	mov	r1, sl
 8003f70:	2300      	movs	r3, #0
 8003f72:	220a      	movs	r2, #10
 8003f74:	4620      	mov	r0, r4
 8003f76:	f000 f891 	bl	800409c <__multadd>
 8003f7a:	4682      	mov	sl, r0
 8003f7c:	e70d      	b.n	8003d9a <_dtoa_r+0x972>
 8003f7e:	9b02      	ldr	r3, [sp, #8]
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d105      	bne.n	8003f90 <_dtoa_r+0xb68>
 8003f84:	9a02      	ldr	r2, [sp, #8]
 8003f86:	f10b 0b01 	add.w	fp, fp, #1
 8003f8a:	2331      	movs	r3, #49	; 0x31
 8003f8c:	7013      	strb	r3, [r2, #0]
 8003f8e:	e6e2      	b.n	8003d56 <_dtoa_r+0x92e>
 8003f90:	4615      	mov	r5, r2
 8003f92:	e7b2      	b.n	8003efa <_dtoa_r+0xad2>
 8003f94:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <_dtoa_r+0xb94>)
 8003f96:	f7ff baae 	b.w	80034f6 <_dtoa_r+0xce>
 8003f9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f47f aa88 	bne.w	80034b2 <_dtoa_r+0x8a>
 8003fa2:	4b07      	ldr	r3, [pc, #28]	; (8003fc0 <_dtoa_r+0xb98>)
 8003fa4:	f7ff baa7 	b.w	80034f6 <_dtoa_r+0xce>
 8003fa8:	9b04      	ldr	r3, [sp, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f73f aef4 	bgt.w	8003d98 <_dtoa_r+0x970>
 8003fb0:	9b07      	ldr	r3, [sp, #28]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	f77f aef0 	ble.w	8003d98 <_dtoa_r+0x970>
 8003fb8:	e6b8      	b.n	8003d2c <_dtoa_r+0x904>
 8003fba:	bf00      	nop
 8003fbc:	08004723 	.word	0x08004723
 8003fc0:	08004725 	.word	0x08004725

08003fc4 <_localeconv_r>:
 8003fc4:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <_localeconv_r+0x14>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6a18      	ldr	r0, [r3, #32]
 8003fca:	4b04      	ldr	r3, [pc, #16]	; (8003fdc <_localeconv_r+0x18>)
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	bf08      	it	eq
 8003fd0:	4618      	moveq	r0, r3
 8003fd2:	30f0      	adds	r0, #240	; 0xf0
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000150 	.word	0x20000150
 8003fdc:	200001b4 	.word	0x200001b4

08003fe0 <malloc>:
 8003fe0:	4b02      	ldr	r3, [pc, #8]	; (8003fec <malloc+0xc>)
 8003fe2:	4601      	mov	r1, r0
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	f000 baed 	b.w	80045c4 <_malloc_r>
 8003fea:	bf00      	nop
 8003fec:	20000150 	.word	0x20000150

08003ff0 <memcpy>:
 8003ff0:	b510      	push	{r4, lr}
 8003ff2:	1e43      	subs	r3, r0, #1
 8003ff4:	440a      	add	r2, r1
 8003ff6:	4291      	cmp	r1, r2
 8003ff8:	d100      	bne.n	8003ffc <memcpy+0xc>
 8003ffa:	bd10      	pop	{r4, pc}
 8003ffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004000:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004004:	e7f7      	b.n	8003ff6 <memcpy+0x6>

08004006 <_Balloc>:
 8004006:	b570      	push	{r4, r5, r6, lr}
 8004008:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800400a:	4604      	mov	r4, r0
 800400c:	460e      	mov	r6, r1
 800400e:	b93d      	cbnz	r5, 8004020 <_Balloc+0x1a>
 8004010:	2010      	movs	r0, #16
 8004012:	f7ff ffe5 	bl	8003fe0 <malloc>
 8004016:	6260      	str	r0, [r4, #36]	; 0x24
 8004018:	6045      	str	r5, [r0, #4]
 800401a:	6085      	str	r5, [r0, #8]
 800401c:	6005      	str	r5, [r0, #0]
 800401e:	60c5      	str	r5, [r0, #12]
 8004020:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004022:	68eb      	ldr	r3, [r5, #12]
 8004024:	b183      	cbz	r3, 8004048 <_Balloc+0x42>
 8004026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800402e:	b9b8      	cbnz	r0, 8004060 <_Balloc+0x5a>
 8004030:	2101      	movs	r1, #1
 8004032:	fa01 f506 	lsl.w	r5, r1, r6
 8004036:	1d6a      	adds	r2, r5, #5
 8004038:	0092      	lsls	r2, r2, #2
 800403a:	4620      	mov	r0, r4
 800403c:	f000 fab4 	bl	80045a8 <_calloc_r>
 8004040:	b160      	cbz	r0, 800405c <_Balloc+0x56>
 8004042:	6046      	str	r6, [r0, #4]
 8004044:	6085      	str	r5, [r0, #8]
 8004046:	e00e      	b.n	8004066 <_Balloc+0x60>
 8004048:	2221      	movs	r2, #33	; 0x21
 800404a:	2104      	movs	r1, #4
 800404c:	4620      	mov	r0, r4
 800404e:	f000 faab 	bl	80045a8 <_calloc_r>
 8004052:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004054:	60e8      	str	r0, [r5, #12]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e4      	bne.n	8004026 <_Balloc+0x20>
 800405c:	2000      	movs	r0, #0
 800405e:	bd70      	pop	{r4, r5, r6, pc}
 8004060:	6802      	ldr	r2, [r0, #0]
 8004062:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004066:	2300      	movs	r3, #0
 8004068:	6103      	str	r3, [r0, #16]
 800406a:	60c3      	str	r3, [r0, #12]
 800406c:	bd70      	pop	{r4, r5, r6, pc}

0800406e <_Bfree>:
 800406e:	b570      	push	{r4, r5, r6, lr}
 8004070:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004072:	4606      	mov	r6, r0
 8004074:	460d      	mov	r5, r1
 8004076:	b93c      	cbnz	r4, 8004088 <_Bfree+0x1a>
 8004078:	2010      	movs	r0, #16
 800407a:	f7ff ffb1 	bl	8003fe0 <malloc>
 800407e:	6270      	str	r0, [r6, #36]	; 0x24
 8004080:	6044      	str	r4, [r0, #4]
 8004082:	6084      	str	r4, [r0, #8]
 8004084:	6004      	str	r4, [r0, #0]
 8004086:	60c4      	str	r4, [r0, #12]
 8004088:	b13d      	cbz	r5, 800409a <_Bfree+0x2c>
 800408a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800408c:	686a      	ldr	r2, [r5, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004094:	6029      	str	r1, [r5, #0]
 8004096:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800409a:	bd70      	pop	{r4, r5, r6, pc}

0800409c <__multadd>:
 800409c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040a0:	690d      	ldr	r5, [r1, #16]
 80040a2:	461f      	mov	r7, r3
 80040a4:	4606      	mov	r6, r0
 80040a6:	460c      	mov	r4, r1
 80040a8:	f101 0e14 	add.w	lr, r1, #20
 80040ac:	2300      	movs	r3, #0
 80040ae:	f8de 0000 	ldr.w	r0, [lr]
 80040b2:	b281      	uxth	r1, r0
 80040b4:	fb02 7101 	mla	r1, r2, r1, r7
 80040b8:	0c0f      	lsrs	r7, r1, #16
 80040ba:	0c00      	lsrs	r0, r0, #16
 80040bc:	fb02 7000 	mla	r0, r2, r0, r7
 80040c0:	b289      	uxth	r1, r1
 80040c2:	3301      	adds	r3, #1
 80040c4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80040c8:	429d      	cmp	r5, r3
 80040ca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80040ce:	f84e 1b04 	str.w	r1, [lr], #4
 80040d2:	dcec      	bgt.n	80040ae <__multadd+0x12>
 80040d4:	b1d7      	cbz	r7, 800410c <__multadd+0x70>
 80040d6:	68a3      	ldr	r3, [r4, #8]
 80040d8:	429d      	cmp	r5, r3
 80040da:	db12      	blt.n	8004102 <__multadd+0x66>
 80040dc:	6861      	ldr	r1, [r4, #4]
 80040de:	4630      	mov	r0, r6
 80040e0:	3101      	adds	r1, #1
 80040e2:	f7ff ff90 	bl	8004006 <_Balloc>
 80040e6:	6922      	ldr	r2, [r4, #16]
 80040e8:	3202      	adds	r2, #2
 80040ea:	f104 010c 	add.w	r1, r4, #12
 80040ee:	4680      	mov	r8, r0
 80040f0:	0092      	lsls	r2, r2, #2
 80040f2:	300c      	adds	r0, #12
 80040f4:	f7ff ff7c 	bl	8003ff0 <memcpy>
 80040f8:	4621      	mov	r1, r4
 80040fa:	4630      	mov	r0, r6
 80040fc:	f7ff ffb7 	bl	800406e <_Bfree>
 8004100:	4644      	mov	r4, r8
 8004102:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004106:	3501      	adds	r5, #1
 8004108:	615f      	str	r7, [r3, #20]
 800410a:	6125      	str	r5, [r4, #16]
 800410c:	4620      	mov	r0, r4
 800410e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004112 <__hi0bits>:
 8004112:	0c02      	lsrs	r2, r0, #16
 8004114:	0412      	lsls	r2, r2, #16
 8004116:	4603      	mov	r3, r0
 8004118:	b9b2      	cbnz	r2, 8004148 <__hi0bits+0x36>
 800411a:	0403      	lsls	r3, r0, #16
 800411c:	2010      	movs	r0, #16
 800411e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004122:	bf04      	itt	eq
 8004124:	021b      	lsleq	r3, r3, #8
 8004126:	3008      	addeq	r0, #8
 8004128:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800412c:	bf04      	itt	eq
 800412e:	011b      	lsleq	r3, r3, #4
 8004130:	3004      	addeq	r0, #4
 8004132:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004136:	bf04      	itt	eq
 8004138:	009b      	lsleq	r3, r3, #2
 800413a:	3002      	addeq	r0, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	db06      	blt.n	800414e <__hi0bits+0x3c>
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	d503      	bpl.n	800414c <__hi0bits+0x3a>
 8004144:	3001      	adds	r0, #1
 8004146:	4770      	bx	lr
 8004148:	2000      	movs	r0, #0
 800414a:	e7e8      	b.n	800411e <__hi0bits+0xc>
 800414c:	2020      	movs	r0, #32
 800414e:	4770      	bx	lr

08004150 <__lo0bits>:
 8004150:	6803      	ldr	r3, [r0, #0]
 8004152:	f013 0207 	ands.w	r2, r3, #7
 8004156:	4601      	mov	r1, r0
 8004158:	d00b      	beq.n	8004172 <__lo0bits+0x22>
 800415a:	07da      	lsls	r2, r3, #31
 800415c:	d423      	bmi.n	80041a6 <__lo0bits+0x56>
 800415e:	0798      	lsls	r0, r3, #30
 8004160:	bf49      	itett	mi
 8004162:	085b      	lsrmi	r3, r3, #1
 8004164:	089b      	lsrpl	r3, r3, #2
 8004166:	2001      	movmi	r0, #1
 8004168:	600b      	strmi	r3, [r1, #0]
 800416a:	bf5c      	itt	pl
 800416c:	600b      	strpl	r3, [r1, #0]
 800416e:	2002      	movpl	r0, #2
 8004170:	4770      	bx	lr
 8004172:	b298      	uxth	r0, r3
 8004174:	b9a8      	cbnz	r0, 80041a2 <__lo0bits+0x52>
 8004176:	0c1b      	lsrs	r3, r3, #16
 8004178:	2010      	movs	r0, #16
 800417a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800417e:	bf04      	itt	eq
 8004180:	0a1b      	lsreq	r3, r3, #8
 8004182:	3008      	addeq	r0, #8
 8004184:	071a      	lsls	r2, r3, #28
 8004186:	bf04      	itt	eq
 8004188:	091b      	lsreq	r3, r3, #4
 800418a:	3004      	addeq	r0, #4
 800418c:	079a      	lsls	r2, r3, #30
 800418e:	bf04      	itt	eq
 8004190:	089b      	lsreq	r3, r3, #2
 8004192:	3002      	addeq	r0, #2
 8004194:	07da      	lsls	r2, r3, #31
 8004196:	d402      	bmi.n	800419e <__lo0bits+0x4e>
 8004198:	085b      	lsrs	r3, r3, #1
 800419a:	d006      	beq.n	80041aa <__lo0bits+0x5a>
 800419c:	3001      	adds	r0, #1
 800419e:	600b      	str	r3, [r1, #0]
 80041a0:	4770      	bx	lr
 80041a2:	4610      	mov	r0, r2
 80041a4:	e7e9      	b.n	800417a <__lo0bits+0x2a>
 80041a6:	2000      	movs	r0, #0
 80041a8:	4770      	bx	lr
 80041aa:	2020      	movs	r0, #32
 80041ac:	4770      	bx	lr

080041ae <__i2b>:
 80041ae:	b510      	push	{r4, lr}
 80041b0:	460c      	mov	r4, r1
 80041b2:	2101      	movs	r1, #1
 80041b4:	f7ff ff27 	bl	8004006 <_Balloc>
 80041b8:	2201      	movs	r2, #1
 80041ba:	6144      	str	r4, [r0, #20]
 80041bc:	6102      	str	r2, [r0, #16]
 80041be:	bd10      	pop	{r4, pc}

080041c0 <__multiply>:
 80041c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c4:	4614      	mov	r4, r2
 80041c6:	690a      	ldr	r2, [r1, #16]
 80041c8:	6923      	ldr	r3, [r4, #16]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	bfb8      	it	lt
 80041ce:	460b      	movlt	r3, r1
 80041d0:	4689      	mov	r9, r1
 80041d2:	bfbc      	itt	lt
 80041d4:	46a1      	movlt	r9, r4
 80041d6:	461c      	movlt	r4, r3
 80041d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80041dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80041e0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80041e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80041e8:	eb07 060a 	add.w	r6, r7, sl
 80041ec:	429e      	cmp	r6, r3
 80041ee:	bfc8      	it	gt
 80041f0:	3101      	addgt	r1, #1
 80041f2:	f7ff ff08 	bl	8004006 <_Balloc>
 80041f6:	f100 0514 	add.w	r5, r0, #20
 80041fa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80041fe:	462b      	mov	r3, r5
 8004200:	2200      	movs	r2, #0
 8004202:	4543      	cmp	r3, r8
 8004204:	d316      	bcc.n	8004234 <__multiply+0x74>
 8004206:	f104 0214 	add.w	r2, r4, #20
 800420a:	f109 0114 	add.w	r1, r9, #20
 800420e:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004212:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004216:	9301      	str	r3, [sp, #4]
 8004218:	9c01      	ldr	r4, [sp, #4]
 800421a:	4294      	cmp	r4, r2
 800421c:	4613      	mov	r3, r2
 800421e:	d80c      	bhi.n	800423a <__multiply+0x7a>
 8004220:	2e00      	cmp	r6, #0
 8004222:	dd03      	ble.n	800422c <__multiply+0x6c>
 8004224:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004228:	2b00      	cmp	r3, #0
 800422a:	d054      	beq.n	80042d6 <__multiply+0x116>
 800422c:	6106      	str	r6, [r0, #16]
 800422e:	b003      	add	sp, #12
 8004230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004234:	f843 2b04 	str.w	r2, [r3], #4
 8004238:	e7e3      	b.n	8004202 <__multiply+0x42>
 800423a:	f8b3 a000 	ldrh.w	sl, [r3]
 800423e:	3204      	adds	r2, #4
 8004240:	f1ba 0f00 	cmp.w	sl, #0
 8004244:	d020      	beq.n	8004288 <__multiply+0xc8>
 8004246:	46ae      	mov	lr, r5
 8004248:	4689      	mov	r9, r1
 800424a:	f04f 0c00 	mov.w	ip, #0
 800424e:	f859 4b04 	ldr.w	r4, [r9], #4
 8004252:	f8be b000 	ldrh.w	fp, [lr]
 8004256:	b2a3      	uxth	r3, r4
 8004258:	fb0a b303 	mla	r3, sl, r3, fp
 800425c:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004260:	f8de 4000 	ldr.w	r4, [lr]
 8004264:	4463      	add	r3, ip
 8004266:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800426a:	fb0a c40b 	mla	r4, sl, fp, ip
 800426e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004272:	b29b      	uxth	r3, r3
 8004274:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004278:	454f      	cmp	r7, r9
 800427a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800427e:	f84e 3b04 	str.w	r3, [lr], #4
 8004282:	d8e4      	bhi.n	800424e <__multiply+0x8e>
 8004284:	f8ce c000 	str.w	ip, [lr]
 8004288:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800428c:	f1b9 0f00 	cmp.w	r9, #0
 8004290:	d01f      	beq.n	80042d2 <__multiply+0x112>
 8004292:	682b      	ldr	r3, [r5, #0]
 8004294:	46ae      	mov	lr, r5
 8004296:	468c      	mov	ip, r1
 8004298:	f04f 0a00 	mov.w	sl, #0
 800429c:	f8bc 4000 	ldrh.w	r4, [ip]
 80042a0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80042a4:	fb09 b404 	mla	r4, r9, r4, fp
 80042a8:	44a2      	add	sl, r4
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80042b0:	f84e 3b04 	str.w	r3, [lr], #4
 80042b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80042b8:	f8be 4000 	ldrh.w	r4, [lr]
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	fb09 4303 	mla	r3, r9, r3, r4
 80042c2:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80042c6:	4567      	cmp	r7, ip
 80042c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80042cc:	d8e6      	bhi.n	800429c <__multiply+0xdc>
 80042ce:	f8ce 3000 	str.w	r3, [lr]
 80042d2:	3504      	adds	r5, #4
 80042d4:	e7a0      	b.n	8004218 <__multiply+0x58>
 80042d6:	3e01      	subs	r6, #1
 80042d8:	e7a2      	b.n	8004220 <__multiply+0x60>
	...

080042dc <__pow5mult>:
 80042dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042e0:	4615      	mov	r5, r2
 80042e2:	f012 0203 	ands.w	r2, r2, #3
 80042e6:	4606      	mov	r6, r0
 80042e8:	460f      	mov	r7, r1
 80042ea:	d007      	beq.n	80042fc <__pow5mult+0x20>
 80042ec:	3a01      	subs	r2, #1
 80042ee:	4c21      	ldr	r4, [pc, #132]	; (8004374 <__pow5mult+0x98>)
 80042f0:	2300      	movs	r3, #0
 80042f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80042f6:	f7ff fed1 	bl	800409c <__multadd>
 80042fa:	4607      	mov	r7, r0
 80042fc:	10ad      	asrs	r5, r5, #2
 80042fe:	d035      	beq.n	800436c <__pow5mult+0x90>
 8004300:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004302:	b93c      	cbnz	r4, 8004314 <__pow5mult+0x38>
 8004304:	2010      	movs	r0, #16
 8004306:	f7ff fe6b 	bl	8003fe0 <malloc>
 800430a:	6270      	str	r0, [r6, #36]	; 0x24
 800430c:	6044      	str	r4, [r0, #4]
 800430e:	6084      	str	r4, [r0, #8]
 8004310:	6004      	str	r4, [r0, #0]
 8004312:	60c4      	str	r4, [r0, #12]
 8004314:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004318:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800431c:	b94c      	cbnz	r4, 8004332 <__pow5mult+0x56>
 800431e:	f240 2171 	movw	r1, #625	; 0x271
 8004322:	4630      	mov	r0, r6
 8004324:	f7ff ff43 	bl	80041ae <__i2b>
 8004328:	2300      	movs	r3, #0
 800432a:	f8c8 0008 	str.w	r0, [r8, #8]
 800432e:	4604      	mov	r4, r0
 8004330:	6003      	str	r3, [r0, #0]
 8004332:	f04f 0800 	mov.w	r8, #0
 8004336:	07eb      	lsls	r3, r5, #31
 8004338:	d50a      	bpl.n	8004350 <__pow5mult+0x74>
 800433a:	4639      	mov	r1, r7
 800433c:	4622      	mov	r2, r4
 800433e:	4630      	mov	r0, r6
 8004340:	f7ff ff3e 	bl	80041c0 <__multiply>
 8004344:	4639      	mov	r1, r7
 8004346:	4681      	mov	r9, r0
 8004348:	4630      	mov	r0, r6
 800434a:	f7ff fe90 	bl	800406e <_Bfree>
 800434e:	464f      	mov	r7, r9
 8004350:	106d      	asrs	r5, r5, #1
 8004352:	d00b      	beq.n	800436c <__pow5mult+0x90>
 8004354:	6820      	ldr	r0, [r4, #0]
 8004356:	b938      	cbnz	r0, 8004368 <__pow5mult+0x8c>
 8004358:	4622      	mov	r2, r4
 800435a:	4621      	mov	r1, r4
 800435c:	4630      	mov	r0, r6
 800435e:	f7ff ff2f 	bl	80041c0 <__multiply>
 8004362:	6020      	str	r0, [r4, #0]
 8004364:	f8c0 8000 	str.w	r8, [r0]
 8004368:	4604      	mov	r4, r0
 800436a:	e7e4      	b.n	8004336 <__pow5mult+0x5a>
 800436c:	4638      	mov	r0, r7
 800436e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004372:	bf00      	nop
 8004374:	08004828 	.word	0x08004828

08004378 <__lshift>:
 8004378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800437c:	460c      	mov	r4, r1
 800437e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004382:	6923      	ldr	r3, [r4, #16]
 8004384:	6849      	ldr	r1, [r1, #4]
 8004386:	eb0a 0903 	add.w	r9, sl, r3
 800438a:	68a3      	ldr	r3, [r4, #8]
 800438c:	4607      	mov	r7, r0
 800438e:	4616      	mov	r6, r2
 8004390:	f109 0501 	add.w	r5, r9, #1
 8004394:	42ab      	cmp	r3, r5
 8004396:	db31      	blt.n	80043fc <__lshift+0x84>
 8004398:	4638      	mov	r0, r7
 800439a:	f7ff fe34 	bl	8004006 <_Balloc>
 800439e:	2200      	movs	r2, #0
 80043a0:	4680      	mov	r8, r0
 80043a2:	f100 0314 	add.w	r3, r0, #20
 80043a6:	4611      	mov	r1, r2
 80043a8:	4552      	cmp	r2, sl
 80043aa:	db2a      	blt.n	8004402 <__lshift+0x8a>
 80043ac:	6920      	ldr	r0, [r4, #16]
 80043ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80043b2:	f104 0114 	add.w	r1, r4, #20
 80043b6:	f016 021f 	ands.w	r2, r6, #31
 80043ba:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80043be:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80043c2:	d022      	beq.n	800440a <__lshift+0x92>
 80043c4:	f1c2 0c20 	rsb	ip, r2, #32
 80043c8:	2000      	movs	r0, #0
 80043ca:	680e      	ldr	r6, [r1, #0]
 80043cc:	4096      	lsls	r6, r2
 80043ce:	4330      	orrs	r0, r6
 80043d0:	f843 0b04 	str.w	r0, [r3], #4
 80043d4:	f851 0b04 	ldr.w	r0, [r1], #4
 80043d8:	458e      	cmp	lr, r1
 80043da:	fa20 f00c 	lsr.w	r0, r0, ip
 80043de:	d8f4      	bhi.n	80043ca <__lshift+0x52>
 80043e0:	6018      	str	r0, [r3, #0]
 80043e2:	b108      	cbz	r0, 80043e8 <__lshift+0x70>
 80043e4:	f109 0502 	add.w	r5, r9, #2
 80043e8:	3d01      	subs	r5, #1
 80043ea:	4638      	mov	r0, r7
 80043ec:	f8c8 5010 	str.w	r5, [r8, #16]
 80043f0:	4621      	mov	r1, r4
 80043f2:	f7ff fe3c 	bl	800406e <_Bfree>
 80043f6:	4640      	mov	r0, r8
 80043f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fc:	3101      	adds	r1, #1
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	e7c8      	b.n	8004394 <__lshift+0x1c>
 8004402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004406:	3201      	adds	r2, #1
 8004408:	e7ce      	b.n	80043a8 <__lshift+0x30>
 800440a:	3b04      	subs	r3, #4
 800440c:	f851 2b04 	ldr.w	r2, [r1], #4
 8004410:	f843 2f04 	str.w	r2, [r3, #4]!
 8004414:	458e      	cmp	lr, r1
 8004416:	d8f9      	bhi.n	800440c <__lshift+0x94>
 8004418:	e7e6      	b.n	80043e8 <__lshift+0x70>

0800441a <__mcmp>:
 800441a:	6903      	ldr	r3, [r0, #16]
 800441c:	690a      	ldr	r2, [r1, #16]
 800441e:	1a9b      	subs	r3, r3, r2
 8004420:	b530      	push	{r4, r5, lr}
 8004422:	d10c      	bne.n	800443e <__mcmp+0x24>
 8004424:	0092      	lsls	r2, r2, #2
 8004426:	3014      	adds	r0, #20
 8004428:	3114      	adds	r1, #20
 800442a:	1884      	adds	r4, r0, r2
 800442c:	4411      	add	r1, r2
 800442e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004432:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004436:	4295      	cmp	r5, r2
 8004438:	d003      	beq.n	8004442 <__mcmp+0x28>
 800443a:	d305      	bcc.n	8004448 <__mcmp+0x2e>
 800443c:	2301      	movs	r3, #1
 800443e:	4618      	mov	r0, r3
 8004440:	bd30      	pop	{r4, r5, pc}
 8004442:	42a0      	cmp	r0, r4
 8004444:	d3f3      	bcc.n	800442e <__mcmp+0x14>
 8004446:	e7fa      	b.n	800443e <__mcmp+0x24>
 8004448:	f04f 33ff 	mov.w	r3, #4294967295
 800444c:	e7f7      	b.n	800443e <__mcmp+0x24>

0800444e <__mdiff>:
 800444e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004452:	460d      	mov	r5, r1
 8004454:	4607      	mov	r7, r0
 8004456:	4611      	mov	r1, r2
 8004458:	4628      	mov	r0, r5
 800445a:	4614      	mov	r4, r2
 800445c:	f7ff ffdd 	bl	800441a <__mcmp>
 8004460:	1e06      	subs	r6, r0, #0
 8004462:	d108      	bne.n	8004476 <__mdiff+0x28>
 8004464:	4631      	mov	r1, r6
 8004466:	4638      	mov	r0, r7
 8004468:	f7ff fdcd 	bl	8004006 <_Balloc>
 800446c:	2301      	movs	r3, #1
 800446e:	6103      	str	r3, [r0, #16]
 8004470:	6146      	str	r6, [r0, #20]
 8004472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004476:	bfa4      	itt	ge
 8004478:	4623      	movge	r3, r4
 800447a:	462c      	movge	r4, r5
 800447c:	4638      	mov	r0, r7
 800447e:	6861      	ldr	r1, [r4, #4]
 8004480:	bfa6      	itte	ge
 8004482:	461d      	movge	r5, r3
 8004484:	2600      	movge	r6, #0
 8004486:	2601      	movlt	r6, #1
 8004488:	f7ff fdbd 	bl	8004006 <_Balloc>
 800448c:	692b      	ldr	r3, [r5, #16]
 800448e:	60c6      	str	r6, [r0, #12]
 8004490:	6926      	ldr	r6, [r4, #16]
 8004492:	f105 0914 	add.w	r9, r5, #20
 8004496:	f104 0214 	add.w	r2, r4, #20
 800449a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800449e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80044a2:	f100 0514 	add.w	r5, r0, #20
 80044a6:	f04f 0c00 	mov.w	ip, #0
 80044aa:	f852 ab04 	ldr.w	sl, [r2], #4
 80044ae:	f859 4b04 	ldr.w	r4, [r9], #4
 80044b2:	fa1c f18a 	uxtah	r1, ip, sl
 80044b6:	b2a3      	uxth	r3, r4
 80044b8:	1ac9      	subs	r1, r1, r3
 80044ba:	0c23      	lsrs	r3, r4, #16
 80044bc:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80044c0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80044c4:	b289      	uxth	r1, r1
 80044c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80044ca:	45c8      	cmp	r8, r9
 80044cc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80044d0:	4696      	mov	lr, r2
 80044d2:	f845 3b04 	str.w	r3, [r5], #4
 80044d6:	d8e8      	bhi.n	80044aa <__mdiff+0x5c>
 80044d8:	45be      	cmp	lr, r7
 80044da:	d305      	bcc.n	80044e8 <__mdiff+0x9a>
 80044dc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80044e0:	b18b      	cbz	r3, 8004506 <__mdiff+0xb8>
 80044e2:	6106      	str	r6, [r0, #16]
 80044e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e8:	f85e 1b04 	ldr.w	r1, [lr], #4
 80044ec:	fa1c f381 	uxtah	r3, ip, r1
 80044f0:	141a      	asrs	r2, r3, #16
 80044f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004500:	f845 3b04 	str.w	r3, [r5], #4
 8004504:	e7e8      	b.n	80044d8 <__mdiff+0x8a>
 8004506:	3e01      	subs	r6, #1
 8004508:	e7e8      	b.n	80044dc <__mdiff+0x8e>

0800450a <__d2b>:
 800450a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800450e:	460e      	mov	r6, r1
 8004510:	2101      	movs	r1, #1
 8004512:	ec59 8b10 	vmov	r8, r9, d0
 8004516:	4615      	mov	r5, r2
 8004518:	f7ff fd75 	bl	8004006 <_Balloc>
 800451c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004520:	4607      	mov	r7, r0
 8004522:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004526:	bb34      	cbnz	r4, 8004576 <__d2b+0x6c>
 8004528:	9301      	str	r3, [sp, #4]
 800452a:	f1b8 0f00 	cmp.w	r8, #0
 800452e:	d027      	beq.n	8004580 <__d2b+0x76>
 8004530:	a802      	add	r0, sp, #8
 8004532:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004536:	f7ff fe0b 	bl	8004150 <__lo0bits>
 800453a:	9900      	ldr	r1, [sp, #0]
 800453c:	b1f0      	cbz	r0, 800457c <__d2b+0x72>
 800453e:	9a01      	ldr	r2, [sp, #4]
 8004540:	f1c0 0320 	rsb	r3, r0, #32
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	430b      	orrs	r3, r1
 800454a:	40c2      	lsrs	r2, r0
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	9201      	str	r2, [sp, #4]
 8004550:	9b01      	ldr	r3, [sp, #4]
 8004552:	61bb      	str	r3, [r7, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	bf14      	ite	ne
 8004558:	2102      	movne	r1, #2
 800455a:	2101      	moveq	r1, #1
 800455c:	6139      	str	r1, [r7, #16]
 800455e:	b1c4      	cbz	r4, 8004592 <__d2b+0x88>
 8004560:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004564:	4404      	add	r4, r0
 8004566:	6034      	str	r4, [r6, #0]
 8004568:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800456c:	6028      	str	r0, [r5, #0]
 800456e:	4638      	mov	r0, r7
 8004570:	b003      	add	sp, #12
 8004572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800457a:	e7d5      	b.n	8004528 <__d2b+0x1e>
 800457c:	6179      	str	r1, [r7, #20]
 800457e:	e7e7      	b.n	8004550 <__d2b+0x46>
 8004580:	a801      	add	r0, sp, #4
 8004582:	f7ff fde5 	bl	8004150 <__lo0bits>
 8004586:	9b01      	ldr	r3, [sp, #4]
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	2101      	movs	r1, #1
 800458c:	6139      	str	r1, [r7, #16]
 800458e:	3020      	adds	r0, #32
 8004590:	e7e5      	b.n	800455e <__d2b+0x54>
 8004592:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004596:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800459a:	6030      	str	r0, [r6, #0]
 800459c:	6918      	ldr	r0, [r3, #16]
 800459e:	f7ff fdb8 	bl	8004112 <__hi0bits>
 80045a2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80045a6:	e7e1      	b.n	800456c <__d2b+0x62>

080045a8 <_calloc_r>:
 80045a8:	b538      	push	{r3, r4, r5, lr}
 80045aa:	fb02 f401 	mul.w	r4, r2, r1
 80045ae:	4621      	mov	r1, r4
 80045b0:	f000 f808 	bl	80045c4 <_malloc_r>
 80045b4:	4605      	mov	r5, r0
 80045b6:	b118      	cbz	r0, 80045c0 <_calloc_r+0x18>
 80045b8:	4622      	mov	r2, r4
 80045ba:	2100      	movs	r1, #0
 80045bc:	f000 f882 	bl	80046c4 <memset>
 80045c0:	4628      	mov	r0, r5
 80045c2:	bd38      	pop	{r3, r4, r5, pc}

080045c4 <_malloc_r>:
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	1ccd      	adds	r5, r1, #3
 80045c8:	f025 0503 	bic.w	r5, r5, #3
 80045cc:	3508      	adds	r5, #8
 80045ce:	2d0c      	cmp	r5, #12
 80045d0:	bf38      	it	cc
 80045d2:	250c      	movcc	r5, #12
 80045d4:	2d00      	cmp	r5, #0
 80045d6:	4606      	mov	r6, r0
 80045d8:	db01      	blt.n	80045de <_malloc_r+0x1a>
 80045da:	42a9      	cmp	r1, r5
 80045dc:	d903      	bls.n	80045e6 <_malloc_r+0x22>
 80045de:	230c      	movs	r3, #12
 80045e0:	6033      	str	r3, [r6, #0]
 80045e2:	2000      	movs	r0, #0
 80045e4:	bd70      	pop	{r4, r5, r6, pc}
 80045e6:	f000 f875 	bl	80046d4 <__malloc_lock>
 80045ea:	4a23      	ldr	r2, [pc, #140]	; (8004678 <_malloc_r+0xb4>)
 80045ec:	6814      	ldr	r4, [r2, #0]
 80045ee:	4621      	mov	r1, r4
 80045f0:	b991      	cbnz	r1, 8004618 <_malloc_r+0x54>
 80045f2:	4c22      	ldr	r4, [pc, #136]	; (800467c <_malloc_r+0xb8>)
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	b91b      	cbnz	r3, 8004600 <_malloc_r+0x3c>
 80045f8:	4630      	mov	r0, r6
 80045fa:	f000 f841 	bl	8004680 <_sbrk_r>
 80045fe:	6020      	str	r0, [r4, #0]
 8004600:	4629      	mov	r1, r5
 8004602:	4630      	mov	r0, r6
 8004604:	f000 f83c 	bl	8004680 <_sbrk_r>
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d126      	bne.n	800465a <_malloc_r+0x96>
 800460c:	230c      	movs	r3, #12
 800460e:	6033      	str	r3, [r6, #0]
 8004610:	4630      	mov	r0, r6
 8004612:	f000 f860 	bl	80046d6 <__malloc_unlock>
 8004616:	e7e4      	b.n	80045e2 <_malloc_r+0x1e>
 8004618:	680b      	ldr	r3, [r1, #0]
 800461a:	1b5b      	subs	r3, r3, r5
 800461c:	d41a      	bmi.n	8004654 <_malloc_r+0x90>
 800461e:	2b0b      	cmp	r3, #11
 8004620:	d90f      	bls.n	8004642 <_malloc_r+0x7e>
 8004622:	600b      	str	r3, [r1, #0]
 8004624:	50cd      	str	r5, [r1, r3]
 8004626:	18cc      	adds	r4, r1, r3
 8004628:	4630      	mov	r0, r6
 800462a:	f000 f854 	bl	80046d6 <__malloc_unlock>
 800462e:	f104 000b 	add.w	r0, r4, #11
 8004632:	1d23      	adds	r3, r4, #4
 8004634:	f020 0007 	bic.w	r0, r0, #7
 8004638:	1ac3      	subs	r3, r0, r3
 800463a:	d01b      	beq.n	8004674 <_malloc_r+0xb0>
 800463c:	425a      	negs	r2, r3
 800463e:	50e2      	str	r2, [r4, r3]
 8004640:	bd70      	pop	{r4, r5, r6, pc}
 8004642:	428c      	cmp	r4, r1
 8004644:	bf0d      	iteet	eq
 8004646:	6863      	ldreq	r3, [r4, #4]
 8004648:	684b      	ldrne	r3, [r1, #4]
 800464a:	6063      	strne	r3, [r4, #4]
 800464c:	6013      	streq	r3, [r2, #0]
 800464e:	bf18      	it	ne
 8004650:	460c      	movne	r4, r1
 8004652:	e7e9      	b.n	8004628 <_malloc_r+0x64>
 8004654:	460c      	mov	r4, r1
 8004656:	6849      	ldr	r1, [r1, #4]
 8004658:	e7ca      	b.n	80045f0 <_malloc_r+0x2c>
 800465a:	1cc4      	adds	r4, r0, #3
 800465c:	f024 0403 	bic.w	r4, r4, #3
 8004660:	42a0      	cmp	r0, r4
 8004662:	d005      	beq.n	8004670 <_malloc_r+0xac>
 8004664:	1a21      	subs	r1, r4, r0
 8004666:	4630      	mov	r0, r6
 8004668:	f000 f80a 	bl	8004680 <_sbrk_r>
 800466c:	3001      	adds	r0, #1
 800466e:	d0cd      	beq.n	800460c <_malloc_r+0x48>
 8004670:	6025      	str	r5, [r4, #0]
 8004672:	e7d9      	b.n	8004628 <_malloc_r+0x64>
 8004674:	bd70      	pop	{r4, r5, r6, pc}
 8004676:	bf00      	nop
 8004678:	20000480 	.word	0x20000480
 800467c:	20000484 	.word	0x20000484

08004680 <_sbrk_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	4c06      	ldr	r4, [pc, #24]	; (800469c <_sbrk_r+0x1c>)
 8004684:	2300      	movs	r3, #0
 8004686:	4605      	mov	r5, r0
 8004688:	4608      	mov	r0, r1
 800468a:	6023      	str	r3, [r4, #0]
 800468c:	f7fe f860 	bl	8002750 <_sbrk>
 8004690:	1c43      	adds	r3, r0, #1
 8004692:	d102      	bne.n	800469a <_sbrk_r+0x1a>
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	b103      	cbz	r3, 800469a <_sbrk_r+0x1a>
 8004698:	602b      	str	r3, [r5, #0]
 800469a:	bd38      	pop	{r3, r4, r5, pc}
 800469c:	200004d4 	.word	0x200004d4

080046a0 <__ascii_mbtowc>:
 80046a0:	b082      	sub	sp, #8
 80046a2:	b901      	cbnz	r1, 80046a6 <__ascii_mbtowc+0x6>
 80046a4:	a901      	add	r1, sp, #4
 80046a6:	b142      	cbz	r2, 80046ba <__ascii_mbtowc+0x1a>
 80046a8:	b14b      	cbz	r3, 80046be <__ascii_mbtowc+0x1e>
 80046aa:	7813      	ldrb	r3, [r2, #0]
 80046ac:	600b      	str	r3, [r1, #0]
 80046ae:	7812      	ldrb	r2, [r2, #0]
 80046b0:	1c10      	adds	r0, r2, #0
 80046b2:	bf18      	it	ne
 80046b4:	2001      	movne	r0, #1
 80046b6:	b002      	add	sp, #8
 80046b8:	4770      	bx	lr
 80046ba:	4610      	mov	r0, r2
 80046bc:	e7fb      	b.n	80046b6 <__ascii_mbtowc+0x16>
 80046be:	f06f 0001 	mvn.w	r0, #1
 80046c2:	e7f8      	b.n	80046b6 <__ascii_mbtowc+0x16>

080046c4 <memset>:
 80046c4:	4402      	add	r2, r0
 80046c6:	4603      	mov	r3, r0
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d100      	bne.n	80046ce <memset+0xa>
 80046cc:	4770      	bx	lr
 80046ce:	f803 1b01 	strb.w	r1, [r3], #1
 80046d2:	e7f9      	b.n	80046c8 <memset+0x4>

080046d4 <__malloc_lock>:
 80046d4:	4770      	bx	lr

080046d6 <__malloc_unlock>:
 80046d6:	4770      	bx	lr

080046d8 <__ascii_wctomb>:
 80046d8:	b149      	cbz	r1, 80046ee <__ascii_wctomb+0x16>
 80046da:	2aff      	cmp	r2, #255	; 0xff
 80046dc:	bf85      	ittet	hi
 80046de:	238a      	movhi	r3, #138	; 0x8a
 80046e0:	6003      	strhi	r3, [r0, #0]
 80046e2:	700a      	strbls	r2, [r1, #0]
 80046e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80046e8:	bf98      	it	ls
 80046ea:	2001      	movls	r0, #1
 80046ec:	4770      	bx	lr
 80046ee:	4608      	mov	r0, r1
 80046f0:	4770      	bx	lr
	...

080046f4 <_init>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	bf00      	nop
 80046f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fa:	bc08      	pop	{r3}
 80046fc:	469e      	mov	lr, r3
 80046fe:	4770      	bx	lr

08004700 <_fini>:
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004702:	bf00      	nop
 8004704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004706:	bc08      	pop	{r3}
 8004708:	469e      	mov	lr, r3
 800470a:	4770      	bx	lr
