
Driver_Optimized_TG2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001234  08001234  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001234  08001234  00011234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001238  08001238  00011238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  0800123c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
  7 .bss          0000005c  20000080  20000080  00020080  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000dc  200000dc  00020080  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002098  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000894  00000000  00000000  00022148  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000218  00000000  00000000  000229e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000180  00000000  00000000  00022bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000faf  00000000  00000000  00022d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000b5e  00000000  00000000  00023d27  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00024885  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000005ec  00000000  00000000  00024904  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00024ef0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800121c 	.word	0x0800121c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	0800121c 	.word	0x0800121c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <GPIO_PeriClockControl>:

static void GPIO_PeriClockControl(uint8_t PORT_num,uint8_t EnorDi);

//void GPIO_PeriClockControl(GPIO_regdef_t *pGPIOx,uint8_t EnorDi)
static void GPIO_PeriClockControl(uint8_t PORT_num,uint8_t EnCLK)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	460a      	mov	r2, r1
 80001e2:	71fb      	strb	r3, [r7, #7]
 80001e4:	4613      	mov	r3, r2
 80001e6:	71bb      	strb	r3, [r7, #6]
	//	GPIO_PCLK_EN &=~ (One_bit_shift << PORT_num);
	//	GPIO_PCLK_EN |= (EnCLK << PORT_num);

	GPIO_PCLK_EN =(GPIO_PCLK_EN & ~(One_bit_shift << PORT_num))
 80001e8:	480a      	ldr	r0, [pc, #40]	; (8000214 <GPIO_PeriClockControl+0x3c>)
 80001ea:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <GPIO_PeriClockControl+0x3c>)
 80001ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ee:	79fa      	ldrb	r2, [r7, #7]
 80001f0:	2101      	movs	r1, #1
 80001f2:	fa01 f202 	lsl.w	r2, r1, r2
 80001f6:	43d2      	mvns	r2, r2
 80001f8:	4013      	ands	r3, r2
																											|(EnCLK << PORT_num);
 80001fa:	79b9      	ldrb	r1, [r7, #6]
 80001fc:	79fa      	ldrb	r2, [r7, #7]
 80001fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000202:	4313      	orrs	r3, r2
	GPIO_PCLK_EN =(GPIO_PCLK_EN & ~(One_bit_shift << PORT_num))
 8000204:	6303      	str	r3, [r0, #48]	; 0x30
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	40023800 	.word	0x40023800

08000218 <GPIO_Init>:
return     -
Note       =
 */

void GPIO_Init(void)
{
 8000218:	b590      	push	{r4, r7, lr}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0

	uint8_t counter=0;
 800021e:	2300      	movs	r3, #0
 8000220:	73fb      	strb	r3, [r7, #15]
	uint8_t PortNumber=0;
 8000222:	2300      	movs	r3, #0
 8000224:	73bb      	strb	r3, [r7, #14]
	uint8_t PinActualNumber=0;
 8000226:	2300      	movs	r3, #0
 8000228:	737b      	strb	r3, [r7, #13]


	for( counter=0; counter<NUMBER_OF_CONFIGURED_PINS; counter++ )
 800022a:	2300      	movs	r3, #0
 800022c:	73fb      	strb	r3, [r7, #15]
 800022e:	e1b1      	b.n	8000594 <GPIO_Init+0x37c>
	{
		PortNumber = ( GPIO_PinConfigArray[counter].GPIO_PinNumber) / PORT_NUMBER_OF_BITS_IN_REG;
 8000230:	7bfa      	ldrb	r2, [r7, #15]
 8000232:	496f      	ldr	r1, [pc, #444]	; (80003f0 <GPIO_Init+0x1d8>)
 8000234:	4613      	mov	r3, r2
 8000236:	005b      	lsls	r3, r3, #1
 8000238:	4413      	add	r3, r2
 800023a:	005b      	lsls	r3, r3, #1
 800023c:	440b      	add	r3, r1
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	091b      	lsrs	r3, r3, #4
 8000242:	73bb      	strb	r3, [r7, #14]
		PinActualNumber = (GPIO_PinConfigArray[counter].GPIO_PinNumber) % PORT_NUMBER_OF_BITS_IN_REG;
 8000244:	7bfa      	ldrb	r2, [r7, #15]
 8000246:	496a      	ldr	r1, [pc, #424]	; (80003f0 <GPIO_Init+0x1d8>)
 8000248:	4613      	mov	r3, r2
 800024a:	005b      	lsls	r3, r3, #1
 800024c:	4413      	add	r3, r2
 800024e:	005b      	lsls	r3, r3, #1
 8000250:	440b      	add	r3, r1
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	f003 030f 	and.w	r3, r3, #15
 8000258:	737b      	strb	r3, [r7, #13]
		uint32_t temp = 0;  //temp register
 800025a:	2300      	movs	r3, #0
 800025c:	60bb      	str	r3, [r7, #8]
		//enable the peripheral clock
		GPIO_PeriClockControl(PortNumber, ENABLE);
 800025e:	7bbb      	ldrb	r3, [r7, #14]
 8000260:	2101      	movs	r1, #1
 8000262:	4618      	mov	r0, r3
 8000264:	f7ff ffb8 	bl	80001d8 <GPIO_PeriClockControl>
		GPIO_regdef_t *pGPIOx = GPIO_Arr[PortNumber];
 8000268:	7bbb      	ldrb	r3, [r7, #14]
 800026a:	4a62      	ldr	r2, [pc, #392]	; (80003f4 <GPIO_Init+0x1dc>)
 800026c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000270:	607b      	str	r3, [r7, #4]
		//configure the mode of gpio pin
		if(GPIO_PinConfigArray[counter].GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000272:	7bfa      	ldrb	r2, [r7, #15]
 8000274:	495e      	ldr	r1, [pc, #376]	; (80003f0 <GPIO_Init+0x1d8>)
 8000276:	4613      	mov	r3, r2
 8000278:	005b      	lsls	r3, r3, #1
 800027a:	4413      	add	r3, r2
 800027c:	005b      	lsls	r3, r3, #1
 800027e:	440b      	add	r3, r1
 8000280:	3301      	adds	r3, #1
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b03      	cmp	r3, #3
 8000286:	d821      	bhi.n	80002cc <GPIO_Init+0xb4>
		{
//			temp = (GPIO_PinConfigArray[counter].GPIO_PinMode << (Two_bits_shift * PinActualNumber) );
//			pGPIOx->MODER &= ~( (Two_bits_shift *Two_consecutive_bits_mask_by_HEX)<< PinActualNumber );
//			pGPIOx->MODER |= temp;
//			temp = 0;
						temp = pGPIOx->MODER;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	60bb      	str	r3, [r7, #8]
						temp &= ~(0x3UL << (PinActualNumber * 2u));
 800028e:	7b7b      	ldrb	r3, [r7, #13]
 8000290:	005b      	lsls	r3, r3, #1
 8000292:	2203      	movs	r2, #3
 8000294:	fa02 f303 	lsl.w	r3, r2, r3
 8000298:	43db      	mvns	r3, r3
 800029a:	68ba      	ldr	r2, [r7, #8]
 800029c:	4013      	ands	r3, r2
 800029e:	60bb      	str	r3, [r7, #8]
						temp |= ((GPIO_PinConfigArray[counter].GPIO_PinMode & 0x00000003U) << (PinActualNumber * 2u));
 80002a0:	7bfa      	ldrb	r2, [r7, #15]
 80002a2:	4953      	ldr	r1, [pc, #332]	; (80003f0 <GPIO_Init+0x1d8>)
 80002a4:	4613      	mov	r3, r2
 80002a6:	005b      	lsls	r3, r3, #1
 80002a8:	4413      	add	r3, r2
 80002aa:	005b      	lsls	r3, r3, #1
 80002ac:	440b      	add	r3, r1
 80002ae:	3301      	adds	r3, #1
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	f003 0203 	and.w	r2, r3, #3
 80002b6:	7b7b      	ldrb	r3, [r7, #13]
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	fa02 f303 	lsl.w	r3, r2, r3
 80002be:	68ba      	ldr	r2, [r7, #8]
 80002c0:	4313      	orrs	r3, r2
 80002c2:	60bb      	str	r3, [r7, #8]
						pGPIOx->MODER = temp;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	68ba      	ldr	r2, [r7, #8]
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	e0bf      	b.n	800044c <GPIO_Init+0x234>
		}
		else
		{
			//this part for interrupt mode
			if(GPIO_PinConfigArray[counter].GPIO_PinMode == GPIO_MODE_IT_FT)
 80002cc:	7bfa      	ldrb	r2, [r7, #15]
 80002ce:	4948      	ldr	r1, [pc, #288]	; (80003f0 <GPIO_Init+0x1d8>)
 80002d0:	4613      	mov	r3, r2
 80002d2:	005b      	lsls	r3, r3, #1
 80002d4:	4413      	add	r3, r2
 80002d6:	005b      	lsls	r3, r3, #1
 80002d8:	440b      	add	r3, r1
 80002da:	3301      	adds	r3, #1
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2b04      	cmp	r3, #4
 80002e0:	d113      	bne.n	800030a <GPIO_Init+0xf2>
			{
				//configure the FTSR
				EXTI->FTSR |= ( One_bit_shift << PinActualNumber);
 80002e2:	4945      	ldr	r1, [pc, #276]	; (80003f8 <GPIO_Init+0x1e0>)
 80002e4:	4b44      	ldr	r3, [pc, #272]	; (80003f8 <GPIO_Init+0x1e0>)
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	7b7a      	ldrb	r2, [r7, #13]
 80002ea:	2001      	movs	r0, #1
 80002ec:	fa00 f202 	lsl.w	r2, r0, r2
 80002f0:	4313      	orrs	r3, r2
 80002f2:	60cb      	str	r3, [r1, #12]
				//clear the corresponding RTSR bit
				EXTI->RTSR &= ~(One_bit_mask << PinActualNumber);
 80002f4:	4940      	ldr	r1, [pc, #256]	; (80003f8 <GPIO_Init+0x1e0>)
 80002f6:	4b40      	ldr	r3, [pc, #256]	; (80003f8 <GPIO_Init+0x1e0>)
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	7b7a      	ldrb	r2, [r7, #13]
 80002fc:	2001      	movs	r0, #1
 80002fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000302:	43d2      	mvns	r2, r2
 8000304:	4013      	ands	r3, r2
 8000306:	608b      	str	r3, [r1, #8]
 8000308:	e03b      	b.n	8000382 <GPIO_Init+0x16a>
			}
			else if(GPIO_PinConfigArray[counter].GPIO_PinMode == GPIO_MODE_IT_RT)
 800030a:	7bfa      	ldrb	r2, [r7, #15]
 800030c:	4938      	ldr	r1, [pc, #224]	; (80003f0 <GPIO_Init+0x1d8>)
 800030e:	4613      	mov	r3, r2
 8000310:	005b      	lsls	r3, r3, #1
 8000312:	4413      	add	r3, r2
 8000314:	005b      	lsls	r3, r3, #1
 8000316:	440b      	add	r3, r1
 8000318:	3301      	adds	r3, #1
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	2b05      	cmp	r3, #5
 800031e:	d113      	bne.n	8000348 <GPIO_Init+0x130>
			{
				//configure the RTSR
				EXTI->RTSR |= ( One_bit_shift << PinActualNumber);
 8000320:	4935      	ldr	r1, [pc, #212]	; (80003f8 <GPIO_Init+0x1e0>)
 8000322:	4b35      	ldr	r3, [pc, #212]	; (80003f8 <GPIO_Init+0x1e0>)
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	7b7a      	ldrb	r2, [r7, #13]
 8000328:	2001      	movs	r0, #1
 800032a:	fa00 f202 	lsl.w	r2, r0, r2
 800032e:	4313      	orrs	r3, r2
 8000330:	608b      	str	r3, [r1, #8]
				//clear the correspnding RISR bit
				EXTI->FTSR &= ~( One_bit_mask << PinActualNumber);
 8000332:	4931      	ldr	r1, [pc, #196]	; (80003f8 <GPIO_Init+0x1e0>)
 8000334:	4b30      	ldr	r3, [pc, #192]	; (80003f8 <GPIO_Init+0x1e0>)
 8000336:	68db      	ldr	r3, [r3, #12]
 8000338:	7b7a      	ldrb	r2, [r7, #13]
 800033a:	2001      	movs	r0, #1
 800033c:	fa00 f202 	lsl.w	r2, r0, r2
 8000340:	43d2      	mvns	r2, r2
 8000342:	4013      	ands	r3, r2
 8000344:	60cb      	str	r3, [r1, #12]
 8000346:	e01c      	b.n	8000382 <GPIO_Init+0x16a>
			}
			else if(GPIO_PinConfigArray[counter].GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000348:	7bfa      	ldrb	r2, [r7, #15]
 800034a:	4929      	ldr	r1, [pc, #164]	; (80003f0 <GPIO_Init+0x1d8>)
 800034c:	4613      	mov	r3, r2
 800034e:	005b      	lsls	r3, r3, #1
 8000350:	4413      	add	r3, r2
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	440b      	add	r3, r1
 8000356:	3301      	adds	r3, #1
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	2b06      	cmp	r3, #6
 800035c:	d111      	bne.n	8000382 <GPIO_Init+0x16a>
			{
				//configure the FTSR and RTSR
				EXTI->RTSR |= ( One_bit_shift << PinActualNumber);
 800035e:	4926      	ldr	r1, [pc, #152]	; (80003f8 <GPIO_Init+0x1e0>)
 8000360:	4b25      	ldr	r3, [pc, #148]	; (80003f8 <GPIO_Init+0x1e0>)
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	7b7a      	ldrb	r2, [r7, #13]
 8000366:	2001      	movs	r0, #1
 8000368:	fa00 f202 	lsl.w	r2, r0, r2
 800036c:	4313      	orrs	r3, r2
 800036e:	608b      	str	r3, [r1, #8]

				EXTI->FTSR |= ( One_bit_shift << PinActualNumber);
 8000370:	4921      	ldr	r1, [pc, #132]	; (80003f8 <GPIO_Init+0x1e0>)
 8000372:	4b21      	ldr	r3, [pc, #132]	; (80003f8 <GPIO_Init+0x1e0>)
 8000374:	68db      	ldr	r3, [r3, #12]
 8000376:	7b7a      	ldrb	r2, [r7, #13]
 8000378:	2001      	movs	r0, #1
 800037a:	fa00 f202 	lsl.w	r2, r0, r2
 800037e:	4313      	orrs	r3, r2
 8000380:	60cb      	str	r3, [r1, #12]
			}

			//configure the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = PinActualNumber / Four_Pins_for_SYSCFG_EXTICR;
 8000382:	7b7b      	ldrb	r3, [r7, #13]
 8000384:	089b      	lsrs	r3, r3, #2
 8000386:	70fb      	strb	r3, [r7, #3]
			uint8_t temp2 = PinActualNumber % Four_Pins_for_SYSCFG_EXTICR;
 8000388:	7b7b      	ldrb	r3, [r7, #13]
 800038a:	f003 0303 	and.w	r3, r3, #3
 800038e:	70bb      	strb	r3, [r7, #2]
			uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOx);
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a1a      	ldr	r2, [pc, #104]	; (80003fc <GPIO_Init+0x1e4>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d037      	beq.n	8000408 <GPIO_Init+0x1f0>
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a19      	ldr	r2, [pc, #100]	; (8000400 <GPIO_Init+0x1e8>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d025      	beq.n	80003ec <GPIO_Init+0x1d4>
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4a18      	ldr	r2, [pc, #96]	; (8000404 <GPIO_Init+0x1ec>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d01f      	beq.n	80003e8 <GPIO_Init+0x1d0>
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a15      	ldr	r2, [pc, #84]	; (8000400 <GPIO_Init+0x1e8>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d019      	beq.n	80003e4 <GPIO_Init+0x1cc>
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a12      	ldr	r2, [pc, #72]	; (80003fc <GPIO_Init+0x1e4>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d013      	beq.n	80003e0 <GPIO_Init+0x1c8>
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a11      	ldr	r2, [pc, #68]	; (8000400 <GPIO_Init+0x1e8>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d00d      	beq.n	80003dc <GPIO_Init+0x1c4>
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a0e      	ldr	r2, [pc, #56]	; (80003fc <GPIO_Init+0x1e4>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d007      	beq.n	80003d8 <GPIO_Init+0x1c0>
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a0d      	ldr	r2, [pc, #52]	; (8000400 <GPIO_Init+0x1e8>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d101      	bne.n	80003d4 <GPIO_Init+0x1bc>
 80003d0:	2307      	movs	r3, #7
 80003d2:	e01a      	b.n	800040a <GPIO_Init+0x1f2>
 80003d4:	2300      	movs	r3, #0
 80003d6:	e018      	b.n	800040a <GPIO_Init+0x1f2>
 80003d8:	2306      	movs	r3, #6
 80003da:	e016      	b.n	800040a <GPIO_Init+0x1f2>
 80003dc:	2305      	movs	r3, #5
 80003de:	e014      	b.n	800040a <GPIO_Init+0x1f2>
 80003e0:	2304      	movs	r3, #4
 80003e2:	e012      	b.n	800040a <GPIO_Init+0x1f2>
 80003e4:	2303      	movs	r3, #3
 80003e6:	e010      	b.n	800040a <GPIO_Init+0x1f2>
 80003e8:	2302      	movs	r3, #2
 80003ea:	e00e      	b.n	800040a <GPIO_Init+0x1f2>
 80003ec:	2301      	movs	r3, #1
 80003ee:	e00c      	b.n	800040a <GPIO_Init+0x1f2>
 80003f0:	20000024 	.word	0x20000024
 80003f4:	20000000 	.word	0x20000000
 80003f8:	40013c00 	.word	0x40013c00
 80003fc:	40020000 	.word	0x40020000
 8000400:	40020400 	.word	0x40020400
 8000404:	40020800 	.word	0x40020800
 8000408:	2300      	movs	r3, #0
 800040a:	707b      	strb	r3, [r7, #1]
			SYSCFG->EXTICR[temp1] = portcode << (temp2 * Four_bits_shift);
 800040c:	4865      	ldr	r0, [pc, #404]	; (80005a4 <GPIO_Init+0x38c>)
 800040e:	78fb      	ldrb	r3, [r7, #3]
 8000410:	7879      	ldrb	r1, [r7, #1]
 8000412:	78ba      	ldrb	r2, [r7, #2]
 8000414:	0092      	lsls	r2, r2, #2
 8000416:	fa01 f202 	lsl.w	r2, r1, r2
 800041a:	3302      	adds	r3, #2
 800041c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			SYSCFG_PCLK_EN;
 8000420:	4a61      	ldr	r2, [pc, #388]	; (80005a8 <GPIO_Init+0x390>)
 8000422:	4b61      	ldr	r3, [pc, #388]	; (80005a8 <GPIO_Init+0x390>)
 8000424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800042a:	6453      	str	r3, [r2, #68]	; 0x44
			//enable the exti interrupt delivery using IMR
			EXTI->IMR |= (One_bit_shift << GPIO_PinConfigArray[counter]	.GPIO_PinNumber);
 800042c:	485f      	ldr	r0, [pc, #380]	; (80005ac <GPIO_Init+0x394>)
 800042e:	4b5f      	ldr	r3, [pc, #380]	; (80005ac <GPIO_Init+0x394>)
 8000430:	6819      	ldr	r1, [r3, #0]
 8000432:	7bfa      	ldrb	r2, [r7, #15]
 8000434:	4c5e      	ldr	r4, [pc, #376]	; (80005b0 <GPIO_Init+0x398>)
 8000436:	4613      	mov	r3, r2
 8000438:	005b      	lsls	r3, r3, #1
 800043a:	4413      	add	r3, r2
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	4423      	add	r3, r4
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	461a      	mov	r2, r3
 8000444:	2301      	movs	r3, #1
 8000446:	4093      	lsls	r3, r2
 8000448:	430b      	orrs	r3, r1
 800044a:	6003      	str	r3, [r0, #0]
		}

		temp = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	60bb      	str	r3, [r7, #8]
		//		temp &= ~( Two_consecutive_bits_mask_by_HEX <<(Two_bits_shift * PinActualNumber) );
		//		temp = ((GPIO_PinConfigArray[counter].GPIO_PinSpeed & 0x00000003U) << (Two_bits_shift * PinActualNumber));
		//		pGPIOx->OSPEEDR |= temp;
		//		//		temp = 0;

		temp = pGPIOx->OSPEEDR;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	60bb      	str	r3, [r7, #8]
		temp &= ~(0x3UL << (PinActualNumber * 2u));
 8000456:	7b7b      	ldrb	r3, [r7, #13]
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	2203      	movs	r2, #3
 800045c:	fa02 f303 	lsl.w	r3, r2, r3
 8000460:	43db      	mvns	r3, r3
 8000462:	68ba      	ldr	r2, [r7, #8]
 8000464:	4013      	ands	r3, r2
 8000466:	60bb      	str	r3, [r7, #8]
		temp |= ((GPIO_PinConfigArray[counter].GPIO_PinSpeed & 0x00000003U) << (PinActualNumber * 2u));
 8000468:	7bfa      	ldrb	r2, [r7, #15]
 800046a:	4951      	ldr	r1, [pc, #324]	; (80005b0 <GPIO_Init+0x398>)
 800046c:	4613      	mov	r3, r2
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	4413      	add	r3, r2
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	440b      	add	r3, r1
 8000476:	3302      	adds	r3, #2
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	f003 0203 	and.w	r2, r3, #3
 800047e:	7b7b      	ldrb	r3, [r7, #13]
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	fa02 f303 	lsl.w	r3, r2, r3
 8000486:	68ba      	ldr	r2, [r7, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	60bb      	str	r3, [r7, #8]
		pGPIOx->OSPEEDR = temp;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	68ba      	ldr	r2, [r7, #8]
 8000490:	609a      	str	r2, [r3, #8]
		//		temp = (GPIO_PinConfigArray[counter].GPIO_PinPuPdControl << (Two_bits_shift * PinActualNumber) );
		//		pGPIOx->PUPDR &= ~(Two_consecutive_bits_mask_by_HEX << PinActualNumber);  //clearing
		//		pGPIOx->PUPDR |= temp;
		//
		//		temp = 0;
		temp = pGPIOx->PUPDR;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	68db      	ldr	r3, [r3, #12]
 8000496:	60bb      	str	r3, [r7, #8]
		temp &= ~(0x3UL << (PinActualNumber * 2u));
 8000498:	7b7b      	ldrb	r3, [r7, #13]
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	2203      	movs	r2, #3
 800049e:	fa02 f303 	lsl.w	r3, r2, r3
 80004a2:	43db      	mvns	r3, r3
 80004a4:	68ba      	ldr	r2, [r7, #8]
 80004a6:	4013      	ands	r3, r2
 80004a8:	60bb      	str	r3, [r7, #8]
		temp |= ((GPIO_PinConfigArray[counter].GPIO_PinPuPdControl & 0x00000003U) << (PinActualNumber * 2u));
 80004aa:	7bfa      	ldrb	r2, [r7, #15]
 80004ac:	4940      	ldr	r1, [pc, #256]	; (80005b0 <GPIO_Init+0x398>)
 80004ae:	4613      	mov	r3, r2
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	4413      	add	r3, r2
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	440b      	add	r3, r1
 80004b8:	3303      	adds	r3, #3
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	f003 0203 	and.w	r2, r3, #3
 80004c0:	7b7b      	ldrb	r3, [r7, #13]
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	fa02 f303 	lsl.w	r3, r2, r3
 80004c8:	68ba      	ldr	r2, [r7, #8]
 80004ca:	4313      	orrs	r3, r2
 80004cc:	60bb      	str	r3, [r7, #8]
		pGPIOx->PUPDR = temp;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68ba      	ldr	r2, [r7, #8]
 80004d2:	60da      	str	r2, [r3, #12]
		//configure the optype
		//		temp = (GPIO_PinConfigArray[counter].GPIO_PinOPType << PinActualNumber);
		//		pGPIOx->OTYPER &= ~( One_bit_mask_by_HEX << PinActualNumber );
		//		pGPIOx->OTYPER |= temp;
		temp = pGPIOx->OTYPER;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	60bb      	str	r3, [r7, #8]
		temp &= ~(0x3UL << (PinActualNumber * 2u));
 80004da:	7b7b      	ldrb	r3, [r7, #13]
 80004dc:	005b      	lsls	r3, r3, #1
 80004de:	2203      	movs	r2, #3
 80004e0:	fa02 f303 	lsl.w	r3, r2, r3
 80004e4:	43db      	mvns	r3, r3
 80004e6:	68ba      	ldr	r2, [r7, #8]
 80004e8:	4013      	ands	r3, r2
 80004ea:	60bb      	str	r3, [r7, #8]
		temp |= ((GPIO_PinConfigArray[counter].GPIO_PinOPType & 0x00000003U) << (PinActualNumber * 2u));
 80004ec:	7bfa      	ldrb	r2, [r7, #15]
 80004ee:	4930      	ldr	r1, [pc, #192]	; (80005b0 <GPIO_Init+0x398>)
 80004f0:	4613      	mov	r3, r2
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	4413      	add	r3, r2
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	440b      	add	r3, r1
 80004fa:	3304      	adds	r3, #4
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	f003 0203 	and.w	r2, r3, #3
 8000502:	7b7b      	ldrb	r3, [r7, #13]
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	fa02 f303 	lsl.w	r3, r2, r3
 800050a:	68ba      	ldr	r2, [r7, #8]
 800050c:	4313      	orrs	r3, r2
 800050e:	60bb      	str	r3, [r7, #8]
		pGPIOx->OTYPER = temp;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	68ba      	ldr	r2, [r7, #8]
 8000514:	605a      	str	r2, [r3, #4]

		//configure the alternate functionality
		if(GPIO_PinConfigArray[counter].GPIO_PinMode == GPIO_MODE_ALTFN)
 8000516:	7bfa      	ldrb	r2, [r7, #15]
 8000518:	4925      	ldr	r1, [pc, #148]	; (80005b0 <GPIO_Init+0x398>)
 800051a:	4613      	mov	r3, r2
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	4413      	add	r3, r2
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	440b      	add	r3, r1
 8000524:	3301      	adds	r3, #1
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b02      	cmp	r3, #2
 800052a:	d130      	bne.n	800058e <GPIO_Init+0x376>
			//
			//			temp1 = PinActualNumber / Eight_Pins_for_GPIOxAFRH_or_AFRL;
			//			temp2 = PinActualNumber % Eight_Pins_for_GPIOxAFRH_or_AFRL;
			//			pGPIOx->AFR[temp1] &= ~(bits_mask_by_HEX << (Four_bits_shift * temp2) ); //clearing
			//			pGPIOx->AFR[temp1] = (GPIO_PinConfigArray[counter].GPIO_PinAltFunMode << (Four_bits_shift * temp2) ); //setting
			temp = pGPIOx->AFR[PinActualNumber >> 3u];
 800052c:	7b7b      	ldrb	r3, [r7, #13]
 800052e:	08db      	lsrs	r3, r3, #3
 8000530:	b2db      	uxtb	r3, r3
 8000532:	461a      	mov	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3208      	adds	r2, #8
 8000538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800053c:	60bb      	str	r3, [r7, #8]
			temp &= ~(0xFu << ((PinActualNumber & 0x07u) * 4u));
 800053e:	7b7b      	ldrb	r3, [r7, #13]
 8000540:	f003 0307 	and.w	r3, r3, #7
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	220f      	movs	r2, #15
 8000548:	fa02 f303 	lsl.w	r3, r2, r3
 800054c:	43db      	mvns	r3, r3
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	4013      	ands	r3, r2
 8000552:	60bb      	str	r3, [r7, #8]
			temp |= ((GPIO_PinConfigArray[counter].GPIO_PinAltFunMode ) << ((PinActualNumber & 0x07u) * 4u));
 8000554:	7bfa      	ldrb	r2, [r7, #15]
 8000556:	4916      	ldr	r1, [pc, #88]	; (80005b0 <GPIO_Init+0x398>)
 8000558:	4613      	mov	r3, r2
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	4413      	add	r3, r2
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	440b      	add	r3, r1
 8000562:	3305      	adds	r3, #5
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	461a      	mov	r2, r3
 8000568:	7b7b      	ldrb	r3, [r7, #13]
 800056a:	f003 0307 	and.w	r3, r3, #7
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	fa02 f303 	lsl.w	r3, r2, r3
 8000574:	461a      	mov	r2, r3
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	4313      	orrs	r3, r2
 800057a:	60bb      	str	r3, [r7, #8]
			pGPIOx->AFR[PinActualNumber >> 3u] = temp;
 800057c:	7b7b      	ldrb	r3, [r7, #13]
 800057e:	08db      	lsrs	r3, r3, #3
 8000580:	b2db      	uxtb	r3, r3
 8000582:	461a      	mov	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3208      	adds	r2, #8
 8000588:	68b9      	ldr	r1, [r7, #8]
 800058a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for( counter=0; counter<NUMBER_OF_CONFIGURED_PINS; counter++ )
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	3301      	adds	r3, #1
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	2b03      	cmp	r3, #3
 8000598:	f67f ae4a 	bls.w	8000230 <GPIO_Init+0x18>
		}

	}
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd90      	pop	{r4, r7, pc}
 80005a4:	40013800 	.word	0x40013800
 80005a8:	40023800 	.word	0x40023800
 80005ac:	40013c00 	.word	0x40013c00
 80005b0:	20000024 	.word	0x20000024

080005b4 <GPIO_WriteOutputPin>:
Note       =
 */

//void GPIO_WriteOutputPin(GPIO_regdef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
void GPIO_WriteOutputPin(uint8_t Pin, uint8_t Value)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	460a      	mov	r2, r1
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	4613      	mov	r3, r2
 80005c2:	71bb      	strb	r3, [r7, #6]

	uint8_t PortNumber=0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	73fb      	strb	r3, [r7, #15]
	uint8_t PinActualNumber=0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	73bb      	strb	r3, [r7, #14]

	PortNumber = ((Pin / PORT_NUMBER_OF_BITS_IN_REG));
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	091b      	lsrs	r3, r3, #4
 80005d0:	73fb      	strb	r3, [r7, #15]
	PinActualNumber = (Pin % PORT_NUMBER_OF_BITS_IN_REG);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	f003 030f 	and.w	r3, r3, #15
 80005d8:	73bb      	strb	r3, [r7, #14]

	GPIO_regdef_t *pGPIOx = GPIO_Arr[PortNumber];     // new
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	4a10      	ldr	r2, [pc, #64]	; (8000620 <GPIO_WriteOutputPin+0x6c>)
 80005de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e2:	60bb      	str	r3, [r7, #8]

	if(Value == GPIO_PIN_SET)
 80005e4:	79bb      	ldrb	r3, [r7, #6]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d109      	bne.n	80005fe <GPIO_WriteOutputPin+0x4a>
	{
		//write 1 to the output data register at the bit field coreesponding to the pin
		pGPIOx->ODR |= ( One_bit_shift << PinActualNumber);
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	7bba      	ldrb	r2, [r7, #14]
 80005f0:	2101      	movs	r1, #1
 80005f2:	fa01 f202 	lsl.w	r2, r1, r2
 80005f6:	431a      	orrs	r2, r3
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	615a      	str	r2, [r3, #20]
	{
		//write 0
		pGPIOx->ODR &= ~( One_bit_mask << PinActualNumber);
	}

}
 80005fc:	e009      	b.n	8000612 <GPIO_WriteOutputPin+0x5e>
		pGPIOx->ODR &= ~( One_bit_mask << PinActualNumber);
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	7bba      	ldrb	r2, [r7, #14]
 8000604:	2101      	movs	r1, #1
 8000606:	fa01 f202 	lsl.w	r2, r1, r2
 800060a:	43d2      	mvns	r2, r2
 800060c:	401a      	ands	r2, r3
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	615a      	str	r2, [r3, #20]
}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000000 	.word	0x20000000

08000624 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 800062a:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <RCC_GetPCLK1Value+0x9c>)
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	089b      	lsrs	r3, r3, #2
 8000630:	b2db      	uxtb	r3, r3
 8000632:	f003 0303 	and.w	r3, r3, #3
 8000636:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8000638:	7a7b      	ldrb	r3, [r7, #9]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d102      	bne.n	8000644 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 800063e:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <RCC_GetPCLK1Value+0xa0>)
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	e00b      	b.n	800065c <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000644:	7a7b      	ldrb	r3, [r7, #9]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d102      	bne.n	8000650 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <RCC_GetPCLK1Value+0xa4>)
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	e005      	b.n	800065c <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000650:	7a7b      	ldrb	r3, [r7, #9]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d102      	bne.n	800065c <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000656:	f000 f88d 	bl	8000774 <RCC_GetPLLOutputClock>
 800065a:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <RCC_GetPCLK1Value+0x9c>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	091b      	lsrs	r3, r3, #4
 8000662:	b2db      	uxtb	r3, r3
 8000664:	f003 030f 	and.w	r3, r3, #15
 8000668:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 800066a:	7a3b      	ldrb	r3, [r7, #8]
 800066c:	2b07      	cmp	r3, #7
 800066e:	d802      	bhi.n	8000676 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	72fb      	strb	r3, [r7, #11]
 8000674:	e005      	b.n	8000682 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000676:	7a3b      	ldrb	r3, [r7, #8]
 8000678:	3b08      	subs	r3, #8
 800067a:	4a14      	ldr	r2, [pc, #80]	; (80006cc <RCC_GetPCLK1Value+0xa8>)
 800067c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000680:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <RCC_GetPCLK1Value+0x9c>)
 8000684:	689b      	ldr	r3, [r3, #8]
 8000686:	0a9b      	lsrs	r3, r3, #10
 8000688:	b2db      	uxtb	r3, r3
 800068a:	f003 0307 	and.w	r3, r3, #7
 800068e:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000690:	7a3b      	ldrb	r3, [r7, #8]
 8000692:	2b03      	cmp	r3, #3
 8000694:	d802      	bhi.n	800069c <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000696:	2301      	movs	r3, #1
 8000698:	72bb      	strb	r3, [r7, #10]
 800069a:	e004      	b.n	80006a6 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 800069c:	7a3b      	ldrb	r3, [r7, #8]
 800069e:	3b04      	subs	r3, #4
 80006a0:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <RCC_GetPCLK1Value+0xac>)
 80006a2:	5cd3      	ldrb	r3, [r2, r3]
 80006a4:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 80006a6:	7afb      	ldrb	r3, [r7, #11]
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80006ae:	7abb      	ldrb	r3, [r7, #10]
 80006b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b4:	607b      	str	r3, [r7, #4]

	return pclk1;
 80006b6:	687b      	ldr	r3, [r7, #4]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	00f42400 	.word	0x00f42400
 80006c8:	007a1200 	.word	0x007a1200
 80006cc:	2000003c 	.word	0x2000003c
 80006d0:	2000004c 	.word	0x2000004c

080006d4 <RCC_GetPCLK2Value>:
 * @return            -
 *
 * @Note              -
 */
uint32_t RCC_GetPCLK2Value(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 80006de:	4b20      	ldr	r3, [pc, #128]	; (8000760 <RCC_GetPCLK2Value+0x8c>)
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	089b      	lsrs	r3, r3, #2
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 80006ec:	7a7b      	ldrb	r3, [r7, #9]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d102      	bne.n	80006f8 <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <RCC_GetPCLK2Value+0x90>)
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	e001      	b.n	80006fc <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <RCC_GetPCLK2Value+0x94>)
 80006fa:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <RCC_GetPCLK2Value+0x8c>)
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	091b      	lsrs	r3, r3, #4
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b07      	cmp	r3, #7
 800070c:	d802      	bhi.n	8000714 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 800070e:	2301      	movs	r3, #1
 8000710:	72fb      	strb	r3, [r7, #11]
 8000712:	e005      	b.n	8000720 <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3b08      	subs	r3, #8
 8000718:	4a14      	ldr	r2, [pc, #80]	; (800076c <RCC_GetPCLK2Value+0x98>)
 800071a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800071e:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <RCC_GetPCLK2Value+0x8c>)
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	0b5b      	lsrs	r3, r3, #13
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d802      	bhi.n	8000738 <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 8000732:	2301      	movs	r3, #1
 8000734:	72bb      	strb	r3, [r7, #10]
 8000736:	e004      	b.n	8000742 <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b04      	subs	r3, #4
 800073c:	4a0c      	ldr	r2, [pc, #48]	; (8000770 <RCC_GetPCLK2Value+0x9c>)
 800073e:	5cd3      	ldrb	r3, [r2, r3]
 8000740:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	fbb2 f2f3 	udiv	r2, r2, r3
 800074a:	7abb      	ldrb	r3, [r7, #10]
 800074c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000750:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000752:	683b      	ldr	r3, [r7, #0]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	40023800 	.word	0x40023800
 8000764:	00f42400 	.word	0x00f42400
 8000768:	007a1200 	.word	0x007a1200
 800076c:	2000003c 	.word	0x2000003c
 8000770:	2000004c 	.word	0x2000004c

08000774 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8000774:	b480      	push	{r7}
 8000776:	b087      	sub	sp, #28
 8000778:	af00      	add	r7, sp, #0

	uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	2302      	movs	r3, #2
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	2302      	movs	r3, #2
 8000790:	603b      	str	r3, [r7, #0]


	 /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
	         SYSCLK = PLL_VCO / PLLP
	         */
	      pllsource = (RCC->PLLCFGR & ((uint32_t)0x00400000)) >> 22;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <RCC_GetPLLOutputClock+0x90>)
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	0d9b      	lsrs	r3, r3, #22
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	607b      	str	r3, [r7, #4]
	      pllm = RCC->PLLCFGR & ((uint32_t)0x0000003F);
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <RCC_GetPLLOutputClock+0x90>)
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80007a6:	603b      	str	r3, [r7, #0]

	      if (pllsource != 0)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d00c      	beq.n	80007c8 <RCC_GetPLLOutputClock+0x54>
	      {
	        /* HSE used as PLL clock source */
	        pllvco = (((uint32_t)8000000) / pllm) * ((RCC->PLLCFGR & ((uint32_t)0x00007FC0)) >> 6);
 80007ae:	4a16      	ldr	r2, [pc, #88]	; (8000808 <RCC_GetPLLOutputClock+0x94>)
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b6:	4a13      	ldr	r2, [pc, #76]	; (8000804 <RCC_GetPLLOutputClock+0x90>)
 80007b8:	6852      	ldr	r2, [r2, #4]
 80007ba:	0992      	lsrs	r2, r2, #6
 80007bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80007c0:	fb02 f303 	mul.w	r3, r2, r3
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	e00b      	b.n	80007e0 <RCC_GetPLLOutputClock+0x6c>
	      }
	      else
	      {
	        /* HSI used as PLL clock source */
	        pllvco = (((uint32_t)16000000) / pllm) * ((RCC->PLLCFGR & ((uint32_t)0x00007FC0)) >> 6);
 80007c8:	4a10      	ldr	r2, [pc, #64]	; (800080c <RCC_GetPLLOutputClock+0x98>)
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d0:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <RCC_GetPLLOutputClock+0x90>)
 80007d2:	6852      	ldr	r2, [r2, #4]
 80007d4:	0992      	lsrs	r2, r2, #6
 80007d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	617b      	str	r3, [r7, #20]
	      }

	      pllp = (((RCC->PLLCFGR & ((uint32_t)0x00030000)) >>16) + 1 ) *2;
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <RCC_GetPLLOutputClock+0x90>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	0c1b      	lsrs	r3, r3, #16
 80007e6:	f003 0303 	and.w	r3, r3, #3
 80007ea:	3301      	adds	r3, #1
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]

          return  pllvco/pllp;
 80007f0:	697a      	ldr	r2, [r7, #20]
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	fbb2 f3f3 	udiv	r3, r2, r3

	//return 0;
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	371c      	adds	r7, #28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	40023800 	.word	0x40023800
 8000808:	007a1200 	.word	0x007a1200
 800080c:	00f42400 	.word	0x00f42400

08000810 <USART_PeripheralControl>:
static FLAG_STATUS USART_GetFlagStatus(uint8_t USART_ID , uint32_t FlagName);
static void USART_PeripheralControl(uint8_t USART_ID, uint8_t Cmd);


static void USART_PeripheralControl(uint8_t USART_ID, uint8_t Cmd)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	460a      	mov	r2, r1
 800081a:	71fb      	strb	r3, [r7, #7]
 800081c:	4613      	mov	r3, r2
 800081e:	71bb      	strb	r3, [r7, #6]
	/*********NEW_BY_GHADA**************/
	USART_RegDef_t *pUSARTx = USART_Arr[USART_ID] ;
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <USART_PeripheralControl+0x44>)
 8000824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000828:	60fb      	str	r3, [r7, #12]

	pUSARTx->USART_CR1 = (pUSARTx->USART_CR1 & ~(One_bit_mask << USART_CR1_UE))
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	899b      	ldrh	r3, [r3, #12]
 800082e:	b29b      	uxth	r3, r3
 8000830:	b21b      	sxth	r3, r3
 8000832:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000836:	b21a      	sxth	r2, r3
							|(Cmd << USART_CR1_UE);
 8000838:	79bb      	ldrb	r3, [r7, #6]
 800083a:	035b      	lsls	r3, r3, #13
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21b      	sxth	r3, r3
 8000842:	b29a      	uxth	r2, r3
	pUSARTx->USART_CR1 = (pUSARTx->USART_CR1 & ~(One_bit_mask << USART_CR1_UE))
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	819a      	strh	r2, [r3, #12]
	/**********************************/

}
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	20000050 	.word	0x20000050

08000858 <USART_PeriClockControl>:


static void USART_PeriClockControl(uint8_t USART_ID, uint8_t EnorDi)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	460a      	mov	r2, r1
 8000862:	71fb      	strb	r3, [r7, #7]
 8000864:	4613      	mov	r3, r2
 8000866:	71bb      	strb	r3, [r7, #6]
	switch(USART_ID)
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <USART_PeriClockControl+0x1c>
 800086e:	2b05      	cmp	r3, #5
 8000870:	d012      	beq.n	8000898 <USART_PeriClockControl+0x40>
 8000872:	e021      	b.n	80008b8 <USART_PeriClockControl+0x60>
	{
	case USART1_ :
		USART_PCLK_1_6_EN = (USART_PCLK_1_6_EN & ~(One_bit_mask << (USART_ID+USART_1_APB2ENR_REG_OFFEST)))
 8000874:	481c      	ldr	r0, [pc, #112]	; (80008e8 <USART_PeriClockControl+0x90>)
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <USART_PeriClockControl+0x90>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	79fa      	ldrb	r2, [r7, #7]
 800087c:	3204      	adds	r2, #4
 800087e:	2101      	movs	r1, #1
 8000880:	fa01 f202 	lsl.w	r2, r1, r2
 8000884:	43d2      	mvns	r2, r2
 8000886:	4013      	ands	r3, r2
		|(EnorDi <<(USART_ID+USART_1_APB2ENR_REG_OFFEST));
 8000888:	79b9      	ldrb	r1, [r7, #6]
 800088a:	79fa      	ldrb	r2, [r7, #7]
 800088c:	3204      	adds	r2, #4
 800088e:	fa01 f202 	lsl.w	r2, r1, r2
 8000892:	4313      	orrs	r3, r2
		USART_PCLK_1_6_EN = (USART_PCLK_1_6_EN & ~(One_bit_mask << (USART_ID+USART_1_APB2ENR_REG_OFFEST)))
 8000894:	6443      	str	r3, [r0, #68]	; 0x44
		break;
 8000896:	e020      	b.n	80008da <USART_PeriClockControl+0x82>
	case USART6_:
		USART_PCLK_1_6_EN =(USART_PCLK_1_6_EN & ~(One_bit_mask << USART_ID))
 8000898:	4813      	ldr	r0, [pc, #76]	; (80008e8 <USART_PeriClockControl+0x90>)
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <USART_PeriClockControl+0x90>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	79fa      	ldrb	r2, [r7, #7]
 80008a0:	2101      	movs	r1, #1
 80008a2:	fa01 f202 	lsl.w	r2, r1, r2
 80008a6:	43d2      	mvns	r2, r2
 80008a8:	4013      	ands	r3, r2
		|(EnorDi <<USART_ID);
 80008aa:	79b9      	ldrb	r1, [r7, #6]
 80008ac:	79fa      	ldrb	r2, [r7, #7]
 80008ae:	fa01 f202 	lsl.w	r2, r1, r2
 80008b2:	4313      	orrs	r3, r2
		USART_PCLK_1_6_EN =(USART_PCLK_1_6_EN & ~(One_bit_mask << USART_ID))
 80008b4:	6443      	str	r3, [r0, #68]	; 0x44
		break;
 80008b6:	e010      	b.n	80008da <USART_PeriClockControl+0x82>
	default:
		USART_PCLK_2_TO_5_EN =(USART_PCLK_2_TO_5_EN & ~(One_bit_mask << (USART_ID+USART_2_TO_5_APB1ENR_REG_OFFEST-1)))
 80008b8:	480b      	ldr	r0, [pc, #44]	; (80008e8 <USART_PeriClockControl+0x90>)
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <USART_PeriClockControl+0x90>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	79fa      	ldrb	r2, [r7, #7]
 80008c0:	3210      	adds	r2, #16
 80008c2:	2101      	movs	r1, #1
 80008c4:	fa01 f202 	lsl.w	r2, r1, r2
 80008c8:	43d2      	mvns	r2, r2
 80008ca:	4013      	ands	r3, r2
		|(EnorDi << (USART_ID+USART_2_TO_5_APB1ENR_REG_OFFEST-1));
 80008cc:	79b9      	ldrb	r1, [r7, #6]
 80008ce:	79fa      	ldrb	r2, [r7, #7]
 80008d0:	3210      	adds	r2, #16
 80008d2:	fa01 f202 	lsl.w	r2, r1, r2
 80008d6:	4313      	orrs	r3, r2
		USART_PCLK_2_TO_5_EN =(USART_PCLK_2_TO_5_EN & ~(One_bit_mask << (USART_ID+USART_2_TO_5_APB1ENR_REG_OFFEST-1)))
 80008d8:	6403      	str	r3, [r0, #64]	; 0x40
	}
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <USART_GetFlagStatus>:

/*Get flag status function */

static FLAG_STATUS USART_GetFlagStatus(uint8_t USART_ID , uint32_t FlagName)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	6039      	str	r1, [r7, #0]
 80008f6:	71fb      	strb	r3, [r7, #7]
	/* one shift left with bitNum_FlagName_
	00000000
	00001000
	 */
	USART_RegDef_t *pUSARTx = USART_Arr[USART_ID] ;
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	4a0c      	ldr	r2, [pc, #48]	; (800092c <USART_GetFlagStatus+0x40>)
 80008fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000900:	60fb      	str	r3, [r7, #12]

	return ((pUSARTx->USART_SR & (One_bit_shift << FlagName)) >> FlagName );
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	b29b      	uxth	r3, r3
 8000908:	4619      	mov	r1, r3
 800090a:	2201      	movs	r2, #1
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	ea01 0203 	and.w	r2, r1, r3
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	fa42 f303 	asr.w	r3, r2, r3
 800091c:	b2db      	uxtb	r3, r3

}
 800091e:	4618      	mov	r0, r3
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20000050 	.word	0x20000050

08000930 <USART_SetBaudRate>:

void USART_SetBaudRate(uint8_t USART_ID, uint32_t BaudRate)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	71fb      	strb	r3, [r7, #7]
	USART_RegDef_t *pUSARTx = USART_Arr[USART_ID] ;
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	4a35      	ldr	r2, [pc, #212]	; (8000a14 <USART_SetBaudRate+0xe4>)
 8000940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000944:	613b      	str	r3, [r7, #16]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

	uint32_t tempreg=0;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]

	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6)
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	4a32      	ldr	r2, [pc, #200]	; (8000a18 <USART_SetBaudRate+0xe8>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d003      	beq.n	800095a <USART_SetBaudRate+0x2a>
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	4a31      	ldr	r2, [pc, #196]	; (8000a1c <USART_SetBaudRate+0xec>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d103      	bne.n	8000962 <USART_SetBaudRate+0x32>
	{
		//USART1 and USART6 are hanging on APB2 bus
		PCLKx = RCC_GetPCLK2Value();
 800095a:	f7ff febb 	bl	80006d4 <RCC_GetPCLK2Value>
 800095e:	61f8      	str	r0, [r7, #28]
 8000960:	e002      	b.n	8000968 <USART_SetBaudRate+0x38>
	}else
	{
		PCLKx = RCC_GetPCLK1Value();
 8000962:	f7ff fe5f 	bl	8000624 <RCC_GetPCLK1Value>
 8000966:	61f8      	str	r0, [r7, #28]
	}

	//Check for OVER8 configuration bit
	if(pUSARTx->USART_CR1 & (One_bit_shift << USART_CR1_OVER8))
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	899b      	ldrh	r3, [r3, #12]
 800096c:	b29b      	uxth	r3, r3
 800096e:	b21b      	sxth	r3, r3
 8000970:	2b00      	cmp	r3, #0
 8000972:	da0b      	bge.n	800098c <USART_SetBaudRate+0x5c>
	{
		//OVER8 = 1 , over sampling by 8
		usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000974:	69fa      	ldr	r2, [r7, #28]
 8000976:	4613      	mov	r3, r2
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	4413      	add	r3, r2
 800097c:	009a      	lsls	r2, r3, #2
 800097e:	441a      	add	r2, r3
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	fbb2 f3f3 	udiv	r3, r2, r3
 8000988:	61bb      	str	r3, [r7, #24]
 800098a:	e00a      	b.n	80009a2 <USART_SetBaudRate+0x72>
	}else
	{
		//over sampling by 16
		usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 800098c:	69fa      	ldr	r2, [r7, #28]
 800098e:	4613      	mov	r3, r2
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	4413      	add	r3, r2
 8000994:	009a      	lsls	r2, r3, #2
 8000996:	441a      	add	r2, r3
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a0:	61bb      	str	r3, [r7, #24]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	4a1e      	ldr	r2, [pc, #120]	; (8000a20 <USART_SetBaudRate+0xf0>)
 80009a6:	fba2 2303 	umull	r2, r3, r2, r3
 80009aa:	095b      	lsrs	r3, r3, #5
 80009ac:	60bb      	str	r3, [r7, #8]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	011b      	lsls	r3, r3, #4
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	2264      	movs	r2, #100	; 0x64
 80009bc:	fb02 f303 	mul.w	r3, r2, r3
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	if(pUSARTx->USART_CR1 & ( One_bit_shift << USART_CR1_OVER8))
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	899b      	ldrh	r3, [r3, #12]
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	b21b      	sxth	r3, r3
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	da0a      	bge.n	80009e8 <USART_SetBaudRate+0xb8>
	{
		//OVER8 = 1 , over sampling by 8
		F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	3332      	adds	r3, #50	; 0x32
 80009d8:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <USART_SetBaudRate+0xf0>)
 80009da:	fba2 2303 	umull	r2, r3, r2, r3
 80009de:	095b      	lsrs	r3, r3, #5
 80009e0:	f003 0307 	and.w	r3, r3, #7
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	e009      	b.n	80009fc <USART_SetBaudRate+0xcc>

	}else
	{
		//over sampling by 16
		F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	011b      	lsls	r3, r3, #4
 80009ec:	3332      	adds	r3, #50	; 0x32
 80009ee:	4a0c      	ldr	r2, [pc, #48]	; (8000a20 <USART_SetBaudRate+0xf0>)
 80009f0:	fba2 2303 	umull	r2, r3, r2, r3
 80009f4:	095b      	lsrs	r3, r3, #5
 80009f6:	f003 030f 	and.w	r3, r3, #15
 80009fa:	617b      	str	r3, [r7, #20]

	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]

	//copy the value of tempreg in to BRR register
	pUSARTx->USART_BRR = tempreg;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	811a      	strh	r2, [r3, #8]
}
 8000a0c:	bf00      	nop
 8000a0e:	3720      	adds	r7, #32
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000050 	.word	0x20000050
 8000a18:	40011000 	.word	0x40011000
 8000a1c:	40011400 	.word	0x40011400
 8000a20:	51eb851f 	.word	0x51eb851f

08000a24 <USART_Init>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0

	//Temporary variable
	uint32_t TempReg=0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
	uint8_t counter=0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	72fb      	strb	r3, [r7, #11]
	USART_RegDef_t *pUSARTx;


	for(;counter<NUMBER_OF_CONFIGURED_UART;counter++)
 8000a32:	e0e1      	b.n	8000bf8 <USART_Init+0x1d4>
	{
		/******************************** Configuration of CR1******************************************/
		pUSARTx = USART_Arr[UART_ConfigArray[counter].USART_ID] ;
 8000a34:	7afa      	ldrb	r2, [r7, #11]
 8000a36:	4974      	ldr	r1, [pc, #464]	; (8000c08 <USART_Init+0x1e4>)
 8000a38:	4613      	mov	r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	4413      	add	r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	440b      	add	r3, r1
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b71      	ldr	r3, [pc, #452]	; (8000c0c <USART_Init+0x1e8>)
 8000a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a4c:	607b      	str	r3, [r7, #4]


		//Implement the code to enable the Clock for given USART peripheral
		USART_PeriClockControl(UART_ConfigArray[counter].USART_ID, ENABLE);
 8000a4e:	7afa      	ldrb	r2, [r7, #11]
 8000a50:	496d      	ldr	r1, [pc, #436]	; (8000c08 <USART_Init+0x1e4>)
 8000a52:	4613      	mov	r3, r2
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	4413      	add	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2101      	movs	r1, #1
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fef9 	bl	8000858 <USART_PeriClockControl>


		//Enable USART Tx and Rx engines according to the USART_Mode configuration item
		switch(UART_ConfigArray[counter].USART_Mode)
 8000a66:	7afa      	ldrb	r2, [r7, #11]
 8000a68:	4967      	ldr	r1, [pc, #412]	; (8000c08 <USART_Init+0x1e4>)
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	4413      	add	r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	440b      	add	r3, r1
 8000a74:	3301      	adds	r3, #1
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d004      	beq.n	8000a86 <USART_Init+0x62>
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d00c      	beq.n	8000a9a <USART_Init+0x76>
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d005      	beq.n	8000a90 <USART_Init+0x6c>
 8000a84:	e00e      	b.n	8000aa4 <USART_Init+0x80>
		{
		case USART_MODE_ONLY_RX :
			//Implement the code to enable the Receiver bit field
			TempReg |= (One_bit_shift << USART_CR1_RE);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	60fb      	str	r3, [r7, #12]

			break;
 8000a8e:	e009      	b.n	8000aa4 <USART_Init+0x80>

		case USART_MODE_ONLY_TX :
			//Implement the code to enable the Transmitter bit field
			TempReg |= ( One_bit_shift << USART_CR1_TE);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f043 0308 	orr.w	r3, r3, #8
 8000a96:	60fb      	str	r3, [r7, #12]
			break;
 8000a98:	e004      	b.n	8000aa4 <USART_Init+0x80>

		case USART_MODE_TXRX :
			//Implement the code to enable the both Transmitter and Receiver bit fields
			TempReg |= ( ( One_bit_shift << USART_CR1_TE) | ( One_bit_shift << USART_CR1_RE) );
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f043 030c 	orr.w	r3, r3, #12
 8000aa0:	60fb      	str	r3, [r7, #12]
			break;
 8000aa2:	bf00      	nop
		}
		//Implement the code to configure the Word length configuration item
		TempReg |= UART_ConfigArray[counter].USART_WordLength << USART_CR1_M ;
 8000aa4:	7afa      	ldrb	r2, [r7, #11]
 8000aa6:	4958      	ldr	r1, [pc, #352]	; (8000c08 <USART_Init+0x1e4>)
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	4413      	add	r3, r2
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	440b      	add	r3, r1
 8000ab2:	3309      	adds	r3, #9
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	031b      	lsls	r3, r3, #12
 8000ab8:	461a      	mov	r2, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	60fb      	str	r3, [r7, #12]


		//Configuration of parity control bit fields
		switch(UART_ConfigArray[counter].USART_ParityControl)
 8000ac0:	7afa      	ldrb	r2, [r7, #11]
 8000ac2:	4951      	ldr	r1, [pc, #324]	; (8000c08 <USART_Init+0x1e4>)
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	4413      	add	r3, r2
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	440b      	add	r3, r1
 8000ace:	330a      	adds	r3, #10
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d002      	beq.n	8000adc <USART_Init+0xb8>
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d005      	beq.n	8000ae6 <USART_Init+0xc2>
 8000ada:	e00d      	b.n	8000af8 <USART_Init+0xd4>
		{
		case USART_PARITY_EN_EVEN:
			//Implement the code to enable the parity control
			//
			TempReg |= ( 1 << USART_CR1_PCE);
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ae2:	60fb      	str	r3, [r7, #12]
			break;
 8000ae4:	e008      	b.n	8000af8 <USART_Init+0xd4>

		case USART_PARITY_EN_ODD:
			//Implement the code to enable the parity control
			TempReg |= ( 1 << USART_CR1_PCE);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aec:	60fb      	str	r3, [r7, #12]
			//Implement the code to enable ODD parity
			TempReg |= ( 1 << USART_CR1_PS);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af4:	60fb      	str	r3, [r7, #12]

			break;
 8000af6:	bf00      	nop
		}

		//Program the CR1 register
		USART_Arr[UART_ConfigArray[counter].USART_ID]->USART_CR1 = TempReg;
 8000af8:	7afa      	ldrb	r2, [r7, #11]
 8000afa:	4943      	ldr	r1, [pc, #268]	; (8000c08 <USART_Init+0x1e4>)
 8000afc:	4613      	mov	r3, r2
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	4413      	add	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	440b      	add	r3, r1
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b40      	ldr	r3, [pc, #256]	; (8000c0c <USART_Init+0x1e8>)
 8000b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	b292      	uxth	r2, r2
 8000b14:	819a      	strh	r2, [r3, #12]


		USART_PeripheralControl(UART_ConfigArray[counter].USART_ID, ENABLE);
 8000b16:	7afa      	ldrb	r2, [r7, #11]
 8000b18:	493b      	ldr	r1, [pc, #236]	; (8000c08 <USART_Init+0x1e4>)
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	4413      	add	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	440b      	add	r3, r1
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2101      	movs	r1, #1
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fe71 	bl	8000810 <USART_PeripheralControl>

		/******************************** Configuration of CR2******************************************/

		TempReg=0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]

		//Implement the code to configure the number of stop bits inserted during USART frame transmission
		TempReg |= UART_ConfigArray[counter].USART_NoOfStopBits << USART_CR2_STOP;
 8000b32:	7afa      	ldrb	r2, [r7, #11]
 8000b34:	4934      	ldr	r1, [pc, #208]	; (8000c08 <USART_Init+0x1e4>)
 8000b36:	4613      	mov	r3, r2
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	4413      	add	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	440b      	add	r3, r1
 8000b40:	3308      	adds	r3, #8
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	031b      	lsls	r3, r3, #12
 8000b46:	461a      	mov	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]

		//Program the CR2 register
		USART_Arr[UART_ConfigArray[counter].USART_ID]->USART_CR2 = TempReg;
 8000b4e:	7afa      	ldrb	r2, [r7, #11]
 8000b50:	492d      	ldr	r1, [pc, #180]	; (8000c08 <USART_Init+0x1e4>)
 8000b52:	4613      	mov	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4413      	add	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <USART_Init+0x1e8>)
 8000b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	b292      	uxth	r2, r2
 8000b6a:	821a      	strh	r2, [r3, #16]


		/******************************** Configuration of CR3******************************************/

		TempReg=0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]

		//Configuration of USART hardware flow control
		switch (UART_ConfigArray[counter].USART_HWFlowControl)
 8000b70:	7afa      	ldrb	r2, [r7, #11]
 8000b72:	4925      	ldr	r1, [pc, #148]	; (8000c08 <USART_Init+0x1e4>)
 8000b74:	4613      	mov	r3, r2
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	4413      	add	r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	440b      	add	r3, r1
 8000b7e:	330b      	adds	r3, #11
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d008      	beq.n	8000b98 <USART_Init+0x174>
 8000b86:	2b03      	cmp	r3, #3
 8000b88:	d00b      	beq.n	8000ba2 <USART_Init+0x17e>
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d10e      	bne.n	8000bac <USART_Init+0x188>
		{
		case USART_HW_FLOW_CTRL_CTS:
			//Implement the code to enable CTS flow control
			TempReg |= ( 1 << USART_CR3_CTSE);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b94:	60fb      	str	r3, [r7, #12]
			break;
 8000b96:	e009      	b.n	8000bac <USART_Init+0x188>

		case USART_HW_FLOW_CTRL_RTS:
			//Implement the code to enable RTS flow control
			TempReg |= (1 << USART_CR3_RTSE);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9e:	60fb      	str	r3, [r7, #12]
			break;
 8000ba0:	e004      	b.n	8000bac <USART_Init+0x188>

		case USART_HW_FLOW_CTRL_CTS_RTS:
			//Implement the code to enable both CTS and RTS Flow control
			TempReg |= ( ( 1 << USART_CR3_CTSE) | ( 1 << USART_CR3_RTSE) );
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000ba8:	60fb      	str	r3, [r7, #12]
			break;
 8000baa:	bf00      	nop
		}


		USART_Arr[UART_ConfigArray[counter].USART_ID]->USART_CR3 = TempReg;
 8000bac:	7afa      	ldrb	r2, [r7, #11]
 8000bae:	4916      	ldr	r1, [pc, #88]	; (8000c08 <USART_Init+0x1e4>)
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	440b      	add	r3, r1
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <USART_Init+0x1e8>)
 8000bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	b292      	uxth	r2, r2
 8000bc8:	829a      	strh	r2, [r3, #20]

		/******************************** Configuration of BRR(Baudrate register)******************************************/

		USART_SetBaudRate(UART_ConfigArray[counter].USART_ID ,UART_ConfigArray[counter].USART_Baud);
 8000bca:	7afa      	ldrb	r2, [r7, #11]
 8000bcc:	490e      	ldr	r1, [pc, #56]	; (8000c08 <USART_Init+0x1e4>)
 8000bce:	4613      	mov	r3, r2
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	4413      	add	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	7818      	ldrb	r0, [r3, #0]
 8000bda:	7afa      	ldrb	r2, [r7, #11]
 8000bdc:	490a      	ldr	r1, [pc, #40]	; (8000c08 <USART_Init+0x1e4>)
 8000bde:	4613      	mov	r3, r2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	4413      	add	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	440b      	add	r3, r1
 8000be8:	3304      	adds	r3, #4
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4619      	mov	r1, r3
 8000bee:	f7ff fe9f 	bl	8000930 <USART_SetBaudRate>
	for(;counter<NUMBER_OF_CONFIGURED_UART;counter++)
 8000bf2:	7afb      	ldrb	r3, [r7, #11]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	72fb      	strb	r3, [r7, #11]
 8000bf8:	7afb      	ldrb	r3, [r7, #11]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f43f af1a 	beq.w	8000a34 <USART_Init+0x10>

		//USART2->USART_BRR = 0x1117;

	}
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000068 	.word	0x20000068
 8000c0c:	20000050 	.word	0x20000050

08000c10 <USART_SendDataRequest>:


//static USART_RegDef_t *Global_pUSARTx;

void USART_SendDataRequest(uint8_t USART_ID , const uint8_t *pTxBuffer, uint32_t Len)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
 8000c1c:	73fb      	strb	r3, [r7, #15]
	gUSART_ID = USART_ID;
 8000c1e:	4a09      	ldr	r2, [pc, #36]	; (8000c44 <USART_SendDataRequest+0x34>)
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	7013      	strb	r3, [r2, #0]
	Global_pTxData = pTxBuffer;
 8000c24:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <USART_SendDataRequest+0x38>)
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	6013      	str	r3, [r2, #0]
	Global_Len = Len;
 8000c2a:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <USART_SendDataRequest+0x3c>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6013      	str	r3, [r2, #0]
	TransmitRequest = 1;
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <USART_SendDataRequest+0x40>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	2000009c 	.word	0x2000009c
 8000c48:	200000a0 	.word	0x200000a0
 8000c4c:	200000a4 	.word	0x200000a4
 8000c50:	200000a8 	.word	0x200000a8

08000c54 <TransmitDoneFeedback>:

Tx_or_Rx_Feedback TransmitDoneFeedback(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
	static USART_RegDef_t *Local_pUSARTx;
	Local_pUSARTx = USART_Arr[gUSART_ID];
 8000c5a:	4b43      	ldr	r3, [pc, #268]	; (8000d68 <TransmitDoneFeedback+0x114>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4b42      	ldr	r3, [pc, #264]	; (8000d6c <TransmitDoneFeedback+0x118>)
 8000c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c66:	4a42      	ldr	r2, [pc, #264]	; (8000d70 <TransmitDoneFeedback+0x11c>)
 8000c68:	6013      	str	r3, [r2, #0]
	static const uint16_t *pTxBuffer;
	//static Tx_or_Rx_Feedback TC_FlagState = FALSE;
	static uint32_t TX_Counter = 0;

	pTxBuffer = (uint16_t *)Global_pTxData;
 8000c6a:	4b42      	ldr	r3, [pc, #264]	; (8000d74 <TransmitDoneFeedback+0x120>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a42      	ldr	r2, [pc, #264]	; (8000d78 <TransmitDoneFeedback+0x124>)
 8000c70:	6013      	str	r3, [r2, #0]

	uint32_t i = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]

	switch(MemState)
 8000c76:	4b41      	ldr	r3, [pc, #260]	; (8000d7c <TransmitDoneFeedback+0x128>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d002      	beq.n	8000c84 <TransmitDoneFeedback+0x30>
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d00b      	beq.n	8000c9a <TransmitDoneFeedback+0x46>
 8000c82:	e05e      	b.n	8000d42 <TransmitDoneFeedback+0xee>
	{
	case IDLE :
		if(TransmitRequest == 1)
 8000c84:	4b3e      	ldr	r3, [pc, #248]	; (8000d80 <TransmitDoneFeedback+0x12c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d157      	bne.n	8000d3c <TransmitDoneFeedback+0xe8>
		{
			TransmitRequest = 0;
 8000c8c:	4b3c      	ldr	r3, [pc, #240]	; (8000d80 <TransmitDoneFeedback+0x12c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
			MemState = TX_IN_PROGRESS;
 8000c92:	4b3a      	ldr	r3, [pc, #232]	; (8000d7c <TransmitDoneFeedback+0x128>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000c98:	e050      	b.n	8000d3c <TransmitDoneFeedback+0xe8>
	case TX_IN_PROGRESS :
		if(  USART_GetFlagStatus(UART_ConfigArray[i].USART_ID,USART_FLAG_TXE) )
 8000c9a:	493a      	ldr	r1, [pc, #232]	; (8000d84 <TransmitDoneFeedback+0x130>)
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	4413      	add	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2107      	movs	r1, #7
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fe1d 	bl	80008ec <USART_GetFlagStatus>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d043      	beq.n	8000d40 <TransmitDoneFeedback+0xec>
		{
			if(UART_ConfigArray[i].USART_WordLength == USART_WORDLEN_9BITS)
 8000cb8:	4932      	ldr	r1, [pc, #200]	; (8000d84 <TransmitDoneFeedback+0x130>)
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	3309      	adds	r3, #9
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d124      	bne.n	8000d18 <TransmitDoneFeedback+0xc4>
			{
				//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
				Local_pUSARTx->USART_DR = (*pTxBuffer & (uint16_t)DR_2BITS_MASKING_TO_LOAD_9BITS);
 8000cce:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <TransmitDoneFeedback+0x11c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a29      	ldr	r2, [pc, #164]	; (8000d78 <TransmitDoneFeedback+0x124>)
 8000cd4:	6812      	ldr	r2, [r2, #0]
 8000cd6:	8812      	ldrh	r2, [r2, #0]
 8000cd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000cdc:	b292      	uxth	r2, r2
 8000cde:	809a      	strh	r2, [r3, #4]

				//check for USART_ParityControl
				if(UART_ConfigArray[i].USART_ParityControl == USART_PARITY_DISABLE)
 8000ce0:	4928      	ldr	r1, [pc, #160]	; (8000d84 <TransmitDoneFeedback+0x130>)
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	4413      	add	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	440b      	add	r3, r1
 8000cee:	330a      	adds	r3, #10
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d10a      	bne.n	8000d0c <TransmitDoneFeedback+0xb8>
				{
					//No parity is used in this transfer. so, 9bits of user data will be sent
					//Implement the code to increment pTxBuffer twice
					Global_pTxData++;
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <TransmitDoneFeedback+0x120>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	4a1d      	ldr	r2, [pc, #116]	; (8000d74 <TransmitDoneFeedback+0x120>)
 8000cfe:	6013      	str	r3, [r2, #0]
					Global_pTxData++;
 8000d00:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <TransmitDoneFeedback+0x120>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	3301      	adds	r3, #1
 8000d06:	4a1b      	ldr	r2, [pc, #108]	; (8000d74 <TransmitDoneFeedback+0x120>)
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	e011      	b.n	8000d30 <TransmitDoneFeedback+0xdc>
				}
				else
				{
					//Parity bit is used in this transfer . so , 8bits of user data will be sent
					//The 9th bit will be replaced by parity bit by the hardware
					Global_pTxData++;
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <TransmitDoneFeedback+0x120>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	4a18      	ldr	r2, [pc, #96]	; (8000d74 <TransmitDoneFeedback+0x120>)
 8000d14:	6013      	str	r3, [r2, #0]
 8000d16:	e00b      	b.n	8000d30 <TransmitDoneFeedback+0xdc>
			}
			else
			{

				//This is 8bit data transfer
				Local_pUSARTx->USART_DR = (*Global_pTxData  & (uint8_t)TRANSFER_8BITS);
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <TransmitDoneFeedback+0x11c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a15      	ldr	r2, [pc, #84]	; (8000d74 <TransmitDoneFeedback+0x120>)
 8000d1e:	6812      	ldr	r2, [r2, #0]
 8000d20:	7812      	ldrb	r2, [r2, #0]
 8000d22:	b292      	uxth	r2, r2
 8000d24:	809a      	strh	r2, [r3, #4]

				//Implement the code to increment the buffer address
				Global_pTxData++;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <TransmitDoneFeedback+0x120>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	4a11      	ldr	r2, [pc, #68]	; (8000d74 <TransmitDoneFeedback+0x120>)
 8000d2e:	6013      	str	r3, [r2, #0]

			}
			TX_Counter ++;
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <TransmitDoneFeedback+0x134>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <TransmitDoneFeedback+0x134>)
 8000d38:	6013      	str	r3, [r2, #0]
		}
		break;
 8000d3a:	e001      	b.n	8000d40 <TransmitDoneFeedback+0xec>
		break;
 8000d3c:	bf00      	nop
 8000d3e:	e000      	b.n	8000d42 <TransmitDoneFeedback+0xee>
		break;
 8000d40:	bf00      	nop
	}



	if(TX_Counter >= Global_Len)
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <TransmitDoneFeedback+0x134>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <TransmitDoneFeedback+0x138>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d307      	bcc.n	8000d5e <TransmitDoneFeedback+0x10a>
	{
		TX_Counter = 0;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <TransmitDoneFeedback+0x134>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
		MemState = IDLE;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <TransmitDoneFeedback+0x128>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
		//TC_FlagState = TRUE;
		return TRUE;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e000      	b.n	8000d60 <TransmitDoneFeedback+0x10c>

	}
	return FALSE;
 8000d5e:	2300      	movs	r3, #0

}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	2000009c 	.word	0x2000009c
 8000d6c:	20000050 	.word	0x20000050
 8000d70:	200000bc 	.word	0x200000bc
 8000d74:	200000a0 	.word	0x200000a0
 8000d78:	200000c0 	.word	0x200000c0
 8000d7c:	200000a9 	.word	0x200000a9
 8000d80:	200000a8 	.word	0x200000a8
 8000d84:	20000068 	.word	0x20000068
 8000d88:	200000c4 	.word	0x200000c4
 8000d8c:	200000a4 	.word	0x200000a4

08000d90 <USART_ReceiveDataRequest>:
 * @Note              -

 */

void USART_ReceiveDataRequest(uint8_t USART_ID, const uint8_t *pRxBuffer, uint32_t LenR)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	73fb      	strb	r3, [r7, #15]
	gUSART_ID_R = USART_ID;
 8000d9e:	4a09      	ldr	r2, [pc, #36]	; (8000dc4 <USART_ReceiveDataRequest+0x34>)
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	7013      	strb	r3, [r2, #0]
	Global_pRxData = pRxBuffer;
 8000da4:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <USART_ReceiveDataRequest+0x38>)
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	6013      	str	r3, [r2, #0]
	Global_LenR = LenR;
 8000daa:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <USART_ReceiveDataRequest+0x3c>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6013      	str	r3, [r2, #0]
	ReceivetRequest = 1;
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <USART_ReceiveDataRequest+0x40>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	200000aa 	.word	0x200000aa
 8000dc8:	200000ac 	.word	0x200000ac
 8000dcc:	200000b4 	.word	0x200000b4
 8000dd0:	200000b0 	.word	0x200000b0

08000dd4 <ReceiveDoneFeedback>:

Tx_or_Rx_Feedback ReceiveDoneFeedback(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
	static USART_RegDef_t *Local_pUSARTx;
	Local_pUSARTx = USART_Arr[gUSART_ID_R];
 8000dda:	4b53      	ldr	r3, [pc, #332]	; (8000f28 <ReceiveDoneFeedback+0x154>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b52      	ldr	r3, [pc, #328]	; (8000f2c <ReceiveDoneFeedback+0x158>)
 8000de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de6:	4a52      	ldr	r2, [pc, #328]	; (8000f30 <ReceiveDoneFeedback+0x15c>)
 8000de8:	6013      	str	r3, [r2, #0]
	const uint16_t *pRxBuffer;
	static uint32_t RX_Counter = 0;
	pRxBuffer = (uint16_t *)Global_pRxData;
 8000dea:	4b52      	ldr	r3, [pc, #328]	; (8000f34 <ReceiveDoneFeedback+0x160>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	607b      	str	r3, [r7, #4]


	uint32_t i = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	603b      	str	r3, [r7, #0]

	switch(MemState_R)
 8000df4:	4b50      	ldr	r3, [pc, #320]	; (8000f38 <ReceiveDoneFeedback+0x164>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d002      	beq.n	8000e02 <ReceiveDoneFeedback+0x2e>
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d00b      	beq.n	8000e18 <ReceiveDoneFeedback+0x44>
 8000e00:	e07f      	b.n	8000f02 <ReceiveDoneFeedback+0x12e>
	{
	case IDLE :
		if(ReceivetRequest == 1)
 8000e02:	4b4e      	ldr	r3, [pc, #312]	; (8000f3c <ReceiveDoneFeedback+0x168>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d178      	bne.n	8000efc <ReceiveDoneFeedback+0x128>
		{
			ReceivetRequest = 0;
 8000e0a:	4b4c      	ldr	r3, [pc, #304]	; (8000f3c <ReceiveDoneFeedback+0x168>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
			MemState_R = RX_IN_PROGRESS;
 8000e10:	4b49      	ldr	r3, [pc, #292]	; (8000f38 <ReceiveDoneFeedback+0x164>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000e16:	e071      	b.n	8000efc <ReceiveDoneFeedback+0x128>
	case RX_IN_PROGRESS :

		if ( USART_GetFlagStatus(UART_ConfigArray[i].USART_ID,USART_FLAG_RXNE))
 8000e18:	4949      	ldr	r1, [pc, #292]	; (8000f40 <ReceiveDoneFeedback+0x16c>)
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	4413      	add	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	440b      	add	r3, r1
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2105      	movs	r1, #5
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fd5e 	bl	80008ec <USART_GetFlagStatus>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d064      	beq.n	8000f00 <ReceiveDoneFeedback+0x12c>
		{
			//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
			if(UART_ConfigArray[i].USART_WordLength == USART_WORDLEN_9BITS)
 8000e36:	4942      	ldr	r1, [pc, #264]	; (8000f40 <ReceiveDoneFeedback+0x16c>)
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	4413      	add	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	440b      	add	r3, r1
 8000e44:	3309      	adds	r3, #9
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d12d      	bne.n	8000ea8 <ReceiveDoneFeedback+0xd4>
			{
				//We are going to receive 9bit data in a frame

				//check are we using USART_ParityControl control or not
				if(UART_ConfigArray[i].USART_ParityControl == USART_PARITY_DISABLE)
 8000e4c:	493c      	ldr	r1, [pc, #240]	; (8000f40 <ReceiveDoneFeedback+0x16c>)
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	4613      	mov	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	4413      	add	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	440b      	add	r3, r1
 8000e5a:	330a      	adds	r3, #10
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d114      	bne.n	8000e8c <ReceiveDoneFeedback+0xb8>
				{
					//No parity is used. so, all 9bits will be of user data

					//read only first 9 bits. so, mask the DR with 0x01FF

					*((uint16_t*) Global_pRxData) = (Local_pUSARTx->USART_DR  & (uint16_t)DR_2BITS_MASKING_TO_READ_9BITS);
 8000e62:	4b34      	ldr	r3, [pc, #208]	; (8000f34 <ReceiveDoneFeedback+0x160>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a32      	ldr	r2, [pc, #200]	; (8000f30 <ReceiveDoneFeedback+0x15c>)
 8000e68:	6812      	ldr	r2, [r2, #0]
 8000e6a:	8892      	ldrh	r2, [r2, #4]
 8000e6c:	b292      	uxth	r2, r2
 8000e6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e72:	b292      	uxth	r2, r2
 8000e74:	801a      	strh	r2, [r3, #0]

					//Now increment the pRxBuffer two times
					Global_pRxData++;
 8000e76:	4b2f      	ldr	r3, [pc, #188]	; (8000f34 <ReceiveDoneFeedback+0x160>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	4a2d      	ldr	r2, [pc, #180]	; (8000f34 <ReceiveDoneFeedback+0x160>)
 8000e7e:	6013      	str	r3, [r2, #0]
					Global_pRxData++;
 8000e80:	4b2c      	ldr	r3, [pc, #176]	; (8000f34 <ReceiveDoneFeedback+0x160>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	3301      	adds	r3, #1
 8000e86:	4a2b      	ldr	r2, [pc, #172]	; (8000f34 <ReceiveDoneFeedback+0x160>)
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	e031      	b.n	8000ef0 <ReceiveDoneFeedback+0x11c>
				}
				else
				{
					//Parity is used, so, 8bits will be of user data and 1 bit is parity
					*Global_pRxData = (Local_pUSARTx->USART_DR  & (uint8_t)RECEIVE_8BITS);
 8000e8c:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <ReceiveDoneFeedback+0x160>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a27      	ldr	r2, [pc, #156]	; (8000f30 <ReceiveDoneFeedback+0x15c>)
 8000e92:	6812      	ldr	r2, [r2, #0]
 8000e94:	8892      	ldrh	r2, [r2, #4]
 8000e96:	b292      	uxth	r2, r2
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	701a      	strb	r2, [r3, #0]

					//Increment the pRxBuffer
					Global_pRxData++;
 8000e9c:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <ReceiveDoneFeedback+0x160>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	4a24      	ldr	r2, [pc, #144]	; (8000f34 <ReceiveDoneFeedback+0x160>)
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	e023      	b.n	8000ef0 <ReceiveDoneFeedback+0x11c>
			else
			{
				//We are going to receive 8bit data in a frame

				//check are we using USART_ParityControl control or not
				if(UART_ConfigArray[i].USART_ParityControl == USART_PARITY_DISABLE)
 8000ea8:	4925      	ldr	r1, [pc, #148]	; (8000f40 <ReceiveDoneFeedback+0x16c>)
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	4613      	mov	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	4413      	add	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	330a      	adds	r3, #10
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d108      	bne.n	8000ed0 <ReceiveDoneFeedback+0xfc>
				{
					//No parity is used , so all 8bits will be of user data

					//read 8 bits from DR
					*Global_pRxData = Local_pUSARTx->USART_DR;
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <ReceiveDoneFeedback+0x160>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a1b      	ldr	r2, [pc, #108]	; (8000f30 <ReceiveDoneFeedback+0x15c>)
 8000ec4:	6812      	ldr	r2, [r2, #0]
 8000ec6:	8892      	ldrh	r2, [r2, #4]
 8000ec8:	b292      	uxth	r2, r2
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	701a      	strb	r2, [r3, #0]
 8000ece:	e00a      	b.n	8000ee6 <ReceiveDoneFeedback+0x112>
				else
				{
					//Parity is used, so , 7 bits will be of user data and 1 bit is parity

					//read only 7 bits , hence mask the DR with 0X7F
					*Global_pRxData = (Local_pUSARTx->USART_DR & (uint8_t) DR_MASKING_TO_READ_7BITS);
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <ReceiveDoneFeedback+0x160>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a16      	ldr	r2, [pc, #88]	; (8000f30 <ReceiveDoneFeedback+0x15c>)
 8000ed6:	6812      	ldr	r2, [r2, #0]
 8000ed8:	8892      	ldrh	r2, [r2, #4]
 8000eda:	b292      	uxth	r2, r2
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	701a      	strb	r2, [r3, #0]

				}

				//increment the pRxBuffer
				Global_pRxData++;
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <ReceiveDoneFeedback+0x160>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	4a11      	ldr	r2, [pc, #68]	; (8000f34 <ReceiveDoneFeedback+0x160>)
 8000eee:	6013      	str	r3, [r2, #0]
			}
			RX_Counter ++;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <ReceiveDoneFeedback+0x170>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	4a13      	ldr	r2, [pc, #76]	; (8000f44 <ReceiveDoneFeedback+0x170>)
 8000ef8:	6013      	str	r3, [r2, #0]
		}
		break;
 8000efa:	e001      	b.n	8000f00 <ReceiveDoneFeedback+0x12c>
		break;
 8000efc:	bf00      	nop
 8000efe:	e000      	b.n	8000f02 <ReceiveDoneFeedback+0x12e>
		break;
 8000f00:	bf00      	nop
	}
	if(RX_Counter >= Global_LenR)
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <ReceiveDoneFeedback+0x170>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <ReceiveDoneFeedback+0x174>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d307      	bcc.n	8000f1e <ReceiveDoneFeedback+0x14a>
	{
		RX_Counter = 0;
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <ReceiveDoneFeedback+0x170>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
		MemState_R = IDLE;
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <ReceiveDoneFeedback+0x164>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
		return TRUE;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <ReceiveDoneFeedback+0x14c>

	}
	return FALSE;
 8000f1e:	2300      	movs	r3, #0

}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200000aa 	.word	0x200000aa
 8000f2c:	20000050 	.word	0x20000050
 8000f30:	200000c8 	.word	0x200000c8
 8000f34:	200000ac 	.word	0x200000ac
 8000f38:	200000b8 	.word	0x200000b8
 8000f3c:	200000b0 	.word	0x200000b0
 8000f40:	20000068 	.word	0x20000068
 8000f44:	200000cc 	.word	0x200000cc
 8000f48:	200000b4 	.word	0x200000b4

08000f4c <main>:
//char msg[1024] = "UART Tx testing...\n\r";
char msg[9] = {1,2,3,4,5,6,7,8,9};
char msgg[10] = {0};

int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
	//int i = 0;

	GPIO_Init();
 8000f52:	f7ff f961 	bl	8000218 <GPIO_Init>
	USART_Init();
 8000f56:	f7ff fd65 	bl	8000a24 <USART_Init>
	USART_SendDataRequest(USART2_ , (uint8_t*)msg, strlen(msg));
 8000f5a:	4817      	ldr	r0, [pc, #92]	; (8000fb8 <main+0x6c>)
 8000f5c:	f7ff f934 	bl	80001c8 <strlen>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	4914      	ldr	r1, [pc, #80]	; (8000fb8 <main+0x6c>)
 8000f66:	2001      	movs	r0, #1
 8000f68:	f7ff fe52 	bl	8000c10 <USART_SendDataRequest>
	Tx_or_Rx_Feedback Tx_State = FALSE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	71fb      	strb	r3, [r7, #7]
	USART_ReceiveDataRequest(USART2_ , (uint8_t*)msgg, 5);
 8000f70:	2205      	movs	r2, #5
 8000f72:	4912      	ldr	r1, [pc, #72]	; (8000fbc <main+0x70>)
 8000f74:	2001      	movs	r0, #1
 8000f76:	f7ff ff0b 	bl	8000d90 <USART_ReceiveDataRequest>
	Tx_or_Rx_Feedback Rx_State = FALSE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	71bb      	strb	r3, [r7, #6]
	//
	//			Tx_or_Rx_Feedback Tx_State = FALSE;
	while (1)
	{
		//
		Tx_State = TransmitDoneFeedback();
 8000f7e:	f7ff fe69 	bl	8000c54 <TransmitDoneFeedback>
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
		if(Tx_State == TRUE )
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d103      	bne.n	8000f94 <main+0x48>
		{
			Tx_State == FALSE;
			GPIO_WriteOutputPin(LED0 , GPIO_PIN_SET);
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	203c      	movs	r0, #60	; 0x3c
 8000f90:	f7ff fb10 	bl	80005b4 <GPIO_WriteOutputPin>
			//GPIO_WriteOutputPin(LED0 , GPIO_PIN_RESET);


		}

		Rx_State = ReceiveDoneFeedback();
 8000f94:	f7ff ff1e 	bl	8000dd4 <ReceiveDoneFeedback>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	71bb      	strb	r3, [r7, #6]
		if(msgg[2]==2)
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <main+0x70>)
 8000f9e:	789b      	ldrb	r3, [r3, #2]
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d104      	bne.n	8000fae <main+0x62>
			GPIO_WriteOutputPin(LED1 , GPIO_PIN_SET);
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	203d      	movs	r0, #61	; 0x3d
 8000fa8:	f7ff fb04 	bl	80005b4 <GPIO_WriteOutputPin>
 8000fac:	e7e7      	b.n	8000f7e <main+0x32>
		else
			GPIO_WriteOutputPin(LED1 , GPIO_PIN_RESET);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	203d      	movs	r0, #61	; 0x3d
 8000fb2:	f7ff faff 	bl	80005b4 <GPIO_WriteOutputPin>
		Tx_State = TransmitDoneFeedback();
 8000fb6:	e7e2      	b.n	8000f7e <main+0x32>
 8000fb8:	20000074 	.word	0x20000074
 8000fbc:	200000d0 	.word	0x200000d0

08000fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fc6:	e003      	b.n	8000fd0 <LoopCopyDataInit>

08000fc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fce:	3104      	adds	r1, #4

08000fd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fd0:	480b      	ldr	r0, [pc, #44]	; (8001000 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fd8:	d3f6      	bcc.n	8000fc8 <CopyDataInit>
  ldr  r2, =_sbss
 8000fda:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fdc:	e002      	b.n	8000fe4 <LoopFillZerobss>

08000fde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fe0:	f842 3b04 	str.w	r3, [r2], #4

08000fe4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fe6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fe8:	d3f9      	bcc.n	8000fde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fea:	f000 f841 	bl	8001070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fee:	f000 f8f1 	bl	80011d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff2:	f7ff ffab 	bl	8000f4c <main>
  bx  lr    
 8000ff6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ff8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ffc:	0800123c 	.word	0x0800123c
  ldr  r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001004:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8001008:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 800100c:	200000dc 	.word	0x200000dc

08001010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001010:	e7fe      	b.n	8001010 <ADC_IRQHandler>

08001012 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001024:	e7fe      	b.n	8001024 <HardFault_Handler+0x4>

08001026 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800102a:	e7fe      	b.n	800102a <MemManage_Handler+0x4>

0800102c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001030:	e7fe      	b.n	8001030 <BusFault_Handler+0x4>

08001032 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001036:	e7fe      	b.n	8001036 <UsageFault_Handler+0x4>

08001038 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001074:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <SystemInit+0x60>)
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <SystemInit+0x60>)
 8001078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001084:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <SystemInit+0x64>)
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <SystemInit+0x64>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <SystemInit+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <SystemInit+0x64>)
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <SystemInit+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80010a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <SystemInit+0x64>)
 80010a8:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <SystemInit+0x68>)
 80010aa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80010ac:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <SystemInit+0x64>)
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <SystemInit+0x64>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <SystemInit+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80010be:	f000 f80d 	bl	80010dc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010c2:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <SystemInit+0x60>)
 80010c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010c8:	609a      	str	r2, [r3, #8]
#endif
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00
 80010d4:	40023800 	.word	0x40023800
 80010d8:	24003010 	.word	0x24003010

080010dc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	2300      	movs	r3, #0
 80010e8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80010ea:	4a36      	ldr	r2, [pc, #216]	; (80011c4 <SetSysClock+0xe8>)
 80010ec:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <SetSysClock+0xe8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80010f6:	4b33      	ldr	r3, [pc, #204]	; (80011c4 <SetSysClock+0xe8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3301      	adds	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d103      	bne.n	8001114 <SetSysClock+0x38>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001112:	d1f0      	bne.n	80010f6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001114:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <SetSysClock+0xe8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d002      	beq.n	8001126 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001120:	2301      	movs	r3, #1
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	e001      	b.n	800112a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001126:	2300      	movs	r3, #0
 8001128:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d142      	bne.n	80011b6 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001130:	4a24      	ldr	r2, [pc, #144]	; (80011c4 <SetSysClock+0xe8>)
 8001132:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <SetSysClock+0xe8>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;
 800113c:	4a22      	ldr	r2, [pc, #136]	; (80011c8 <SetSysClock+0xec>)
 800113e:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <SetSysClock+0xec>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001146:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001148:	4a1e      	ldr	r2, [pc, #120]	; (80011c4 <SetSysClock+0xe8>)
 800114a:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <SetSysClock+0xe8>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001150:	4a1c      	ldr	r2, [pc, #112]	; (80011c4 <SetSysClock+0xe8>)
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <SetSysClock+0xe8>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800115a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800115c:	4a19      	ldr	r2, [pc, #100]	; (80011c4 <SetSysClock+0xe8>)
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <SetSysClock+0xe8>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001166:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <SetSysClock+0xe8>)
 800116a:	4a18      	ldr	r2, [pc, #96]	; (80011cc <SetSysClock+0xf0>)
 800116c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800116e:	4a15      	ldr	r2, [pc, #84]	; (80011c4 <SetSysClock+0xe8>)
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <SetSysClock+0xe8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001178:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800117a:	bf00      	nop
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <SetSysClock+0xe8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f9      	beq.n	800117c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <SetSysClock+0xf4>)
 800118a:	f240 6205 	movw	r2, #1541	; 0x605
 800118e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001190:	4a0c      	ldr	r2, [pc, #48]	; (80011c4 <SetSysClock+0xe8>)
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <SetSysClock+0xe8>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f023 0303 	bic.w	r3, r3, #3
 800119a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800119c:	4a09      	ldr	r2, [pc, #36]	; (80011c4 <SetSysClock+0xe8>)
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <SetSysClock+0xe8>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f043 0302 	orr.w	r3, r3, #2
 80011a6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80011a8:	bf00      	nop
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <SetSysClock+0xe8>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b08      	cmp	r3, #8
 80011b4:	d1f9      	bne.n	80011aa <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40007000 	.word	0x40007000
 80011cc:	07405408 	.word	0x07405408
 80011d0:	40023c00 	.word	0x40023c00

080011d4 <__libc_init_array>:
 80011d4:	b570      	push	{r4, r5, r6, lr}
 80011d6:	4e0d      	ldr	r6, [pc, #52]	; (800120c <__libc_init_array+0x38>)
 80011d8:	4c0d      	ldr	r4, [pc, #52]	; (8001210 <__libc_init_array+0x3c>)
 80011da:	1ba4      	subs	r4, r4, r6
 80011dc:	10a4      	asrs	r4, r4, #2
 80011de:	2500      	movs	r5, #0
 80011e0:	42a5      	cmp	r5, r4
 80011e2:	d109      	bne.n	80011f8 <__libc_init_array+0x24>
 80011e4:	4e0b      	ldr	r6, [pc, #44]	; (8001214 <__libc_init_array+0x40>)
 80011e6:	4c0c      	ldr	r4, [pc, #48]	; (8001218 <__libc_init_array+0x44>)
 80011e8:	f000 f818 	bl	800121c <_init>
 80011ec:	1ba4      	subs	r4, r4, r6
 80011ee:	10a4      	asrs	r4, r4, #2
 80011f0:	2500      	movs	r5, #0
 80011f2:	42a5      	cmp	r5, r4
 80011f4:	d105      	bne.n	8001202 <__libc_init_array+0x2e>
 80011f6:	bd70      	pop	{r4, r5, r6, pc}
 80011f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011fc:	4798      	blx	r3
 80011fe:	3501      	adds	r5, #1
 8001200:	e7ee      	b.n	80011e0 <__libc_init_array+0xc>
 8001202:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001206:	4798      	blx	r3
 8001208:	3501      	adds	r5, #1
 800120a:	e7f2      	b.n	80011f2 <__libc_init_array+0x1e>
 800120c:	08001234 	.word	0x08001234
 8001210:	08001234 	.word	0x08001234
 8001214:	08001234 	.word	0x08001234
 8001218:	08001238 	.word	0x08001238

0800121c <_init>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	bf00      	nop
 8001220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001222:	bc08      	pop	{r3}
 8001224:	469e      	mov	lr, r3
 8001226:	4770      	bx	lr

08001228 <_fini>:
 8001228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122a:	bf00      	nop
 800122c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800122e:	bc08      	pop	{r3}
 8001230:	469e      	mov	lr, r3
 8001232:	4770      	bx	lr
